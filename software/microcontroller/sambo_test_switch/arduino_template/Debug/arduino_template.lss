
arduino_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004fe8  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00404fe8  00404fe8  0000cfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008e4  20000000  00404ff0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000d44  200008e4  004058d4  000108e4  2**2
                  ALLOC
  4 .stack        00003000  20001628  00406618  000108e4  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  000108e4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  0001090e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001d7b3  00000000  00000000  00010969  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004c4a  00000000  00000000  0002e11c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a95e  00000000  00000000  00032d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001200  00000000  00000000  0003d6c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001170  00000000  00000000  0003e8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001e2b5  00000000  00000000  0003fa34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001789b  00000000  00000000  0005dce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005e91f  00000000  00000000  00075584  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003074  00000000  00000000  000d3ea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20004628 	.word	0x20004628
  400004:	00403cc9 	.word	0x00403cc9
  400008:	00403cc5 	.word	0x00403cc5
  40000c:	00403cc5 	.word	0x00403cc5
  400010:	00403cc5 	.word	0x00403cc5
  400014:	00403cc5 	.word	0x00403cc5
  400018:	00403cc5 	.word	0x00403cc5
	...
  40002c:	00403cc5 	.word	0x00403cc5
  400030:	00403cc5 	.word	0x00403cc5
  400034:	00000000 	.word	0x00000000
  400038:	00403cc5 	.word	0x00403cc5
  40003c:	00403cc5 	.word	0x00403cc5
  400040:	00403cc5 	.word	0x00403cc5
  400044:	00403cc5 	.word	0x00403cc5
  400048:	00403cc5 	.word	0x00403cc5
  40004c:	00403cc5 	.word	0x00403cc5
  400050:	00403cc5 	.word	0x00403cc5
  400054:	00403cc5 	.word	0x00403cc5
  400058:	00403cc5 	.word	0x00403cc5
  40005c:	00000000 	.word	0x00000000
  400060:	004009c1 	.word	0x004009c1
  400064:	004009f9 	.word	0x004009f9
  400068:	00000000 	.word	0x00000000
  40006c:	00401cc1 	.word	0x00401cc1
  400070:	00401cd5 	.word	0x00401cd5
  400074:	00000000 	.word	0x00000000
  400078:	00400a31 	.word	0x00400a31
  40007c:	00400a69 	.word	0x00400a69
	...
  400088:	00403cc5 	.word	0x00403cc5
  40008c:	00403cc5 	.word	0x00403cc5
  400090:	00403cc5 	.word	0x00403cc5
  400094:	00403cc5 	.word	0x00403cc5
  400098:	00403cc5 	.word	0x00403cc5
  40009c:	00400989 	.word	0x00400989
  4000a0:	00403cc5 	.word	0x00403cc5
  4000a4:	00403cc5 	.word	0x00403cc5
	...
  4000b4:	00403cc5 	.word	0x00403cc5
  4000b8:	00403cc5 	.word	0x00403cc5
  4000bc:	00403cc5 	.word	0x00403cc5
  4000c0:	00403cc5 	.word	0x00403cc5
  4000c4:	00403cc5 	.word	0x00403cc5
  4000c8:	0040235d 	.word	0x0040235d

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	200008e4 	.word	0x200008e4
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00404ff0 	.word	0x00404ff0

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4808      	ldr	r0, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4908      	ldr	r1, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	00404ff0 	.word	0x00404ff0
  40011c:	200008e8 	.word	0x200008e8
  400120:	00404ff0 	.word	0x00404ff0
  400124:	00000000 	.word	0x00000000

00400128 <setup>:
int myAddress = 0;
int bufferIndex = 0;
char buffer[128];

void setup(void)
{
  400128:	b538      	push	{r3, r4, r5, lr}
	Serial.begin(115200);
  40012a:	4c23      	ldr	r4, [pc, #140]	; (4001b8 <setup+0x90>)
  40012c:	4620      	mov	r0, r4
  40012e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  400132:	4b22      	ldr	r3, [pc, #136]	; (4001bc <setup+0x94>)
  400134:	4798      	blx	r3
	Serial1.begin(115200);
  400136:	4822      	ldr	r0, [pc, #136]	; (4001c0 <setup+0x98>)
  400138:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  40013c:	4b21      	ldr	r3, [pc, #132]	; (4001c4 <setup+0x9c>)
  40013e:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
  400140:	200b      	movs	r0, #11
  400142:	4b21      	ldr	r3, [pc, #132]	; (4001c8 <setup+0xa0>)
  400144:	4798      	blx	r3
	
	
	delay(2000);
  400146:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  40014a:	4b20      	ldr	r3, [pc, #128]	; (4001cc <setup+0xa4>)
  40014c:	4798      	blx	r3
	//Get my address
	Serial.println("Enter this unit's address");
  40014e:	4620      	mov	r0, r4
  400150:	491f      	ldr	r1, [pc, #124]	; (4001d0 <setup+0xa8>)
  400152:	4b20      	ldr	r3, [pc, #128]	; (4001d4 <setup+0xac>)
  400154:	4798      	blx	r3
	while(Serial.available() == 0);  //wait for byte
  400156:	4625      	mov	r5, r4
  400158:	4c1f      	ldr	r4, [pc, #124]	; (4001d8 <setup+0xb0>)
  40015a:	4628      	mov	r0, r5
  40015c:	47a0      	blx	r4
  40015e:	2800      	cmp	r0, #0
  400160:	d0fb      	beq.n	40015a <setup+0x32>
	myAddress = Serial.read() - 48;
  400162:	4c15      	ldr	r4, [pc, #84]	; (4001b8 <setup+0x90>)
  400164:	4620      	mov	r0, r4
  400166:	4b1d      	ldr	r3, [pc, #116]	; (4001dc <setup+0xb4>)
  400168:	4798      	blx	r3
  40016a:	4d1d      	ldr	r5, [pc, #116]	; (4001e0 <setup+0xb8>)
  40016c:	3830      	subs	r0, #48	; 0x30
  40016e:	6028      	str	r0, [r5, #0]
	Serial.print("Requesting Address from switch: ");
  400170:	4620      	mov	r0, r4
  400172:	491c      	ldr	r1, [pc, #112]	; (4001e4 <setup+0xbc>)
  400174:	4b1c      	ldr	r3, [pc, #112]	; (4001e8 <setup+0xc0>)
  400176:	4798      	blx	r3
	Serial.println(myAddress);
  400178:	4620      	mov	r0, r4
  40017a:	6829      	ldr	r1, [r5, #0]
  40017c:	220a      	movs	r2, #10
  40017e:	4b1b      	ldr	r3, [pc, #108]	; (4001ec <setup+0xc4>)
  400180:	4798      	blx	r3
	virtual void flush(void);
	virtual size_t write(uint8_t data);
	inline size_t write(unsigned long n) { return write((uint8_t)n); }
	inline size_t write(long n) { return write((uint8_t)n); }
	inline size_t write(unsigned int n) { return write((uint8_t)n); }
	inline size_t write(int n) { return write((uint8_t)n); }
  400182:	4c0f      	ldr	r4, [pc, #60]	; (4001c0 <setup+0x98>)
  400184:	6823      	ldr	r3, [r4, #0]
  400186:	681b      	ldr	r3, [r3, #0]
  400188:	4620      	mov	r0, r4
  40018a:	2100      	movs	r1, #0
  40018c:	4798      	blx	r3
  40018e:	6823      	ldr	r3, [r4, #0]
  400190:	681b      	ldr	r3, [r3, #0]
  400192:	4620      	mov	r0, r4
  400194:	7829      	ldrb	r1, [r5, #0]
  400196:	4798      	blx	r3
  400198:	6823      	ldr	r3, [r4, #0]
  40019a:	681b      	ldr	r3, [r3, #0]
  40019c:	4620      	mov	r0, r4
  40019e:	2140      	movs	r1, #64	; 0x40
  4001a0:	4798      	blx	r3
  4001a2:	6823      	ldr	r3, [r4, #0]
  4001a4:	681b      	ldr	r3, [r3, #0]
  4001a6:	4620      	mov	r0, r4
  4001a8:	2101      	movs	r1, #1
  4001aa:	4798      	blx	r3
  4001ac:	6823      	ldr	r3, [r4, #0]
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	4620      	mov	r0, r4
  4001b2:	7829      	ldrb	r1, [r5, #0]
  4001b4:	4798      	blx	r3
  4001b6:	bd38      	pop	{r3, r4, r5, pc}
  4001b8:	20001278 	.word	0x20001278
  4001bc:	00400cc9 	.word	0x00400cc9
  4001c0:	20000dfc 	.word	0x20000dfc
  4001c4:	0040065d 	.word	0x0040065d
  4001c8:	00403a2d 	.word	0x00403a2d
  4001cc:	0040096d 	.word	0x0040096d
  4001d0:	00404ed4 	.word	0x00404ed4
  4001d4:	00400b31 	.word	0x00400b31
  4001d8:	00400c35 	.word	0x00400c35
  4001dc:	00400d51 	.word	0x00400d51
  4001e0:	20000900 	.word	0x20000900
  4001e4:	00404ef0 	.word	0x00404ef0
  4001e8:	00400aed 	.word	0x00400aed
  4001ec:	00400c15 	.word	0x00400c15

004001f0 <loop>:
	Serial1.write(0x01);
	Serial1.write(myAddress);
}

void loop(void)
{
  4001f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(Serial.available() > 0)
  4001f4:	4840      	ldr	r0, [pc, #256]	; (4002f8 <loop+0x108>)
  4001f6:	4b41      	ldr	r3, [pc, #260]	; (4002fc <loop+0x10c>)
  4001f8:	4798      	blx	r3
  4001fa:	2800      	cmp	r0, #0
  4001fc:	dd4a      	ble.n	400294 <loop+0xa4>
	{
		//write to sernet packet and send
		char c = Serial.read();
  4001fe:	483e      	ldr	r0, [pc, #248]	; (4002f8 <loop+0x108>)
  400200:	4b3f      	ldr	r3, [pc, #252]	; (400300 <loop+0x110>)
  400202:	4798      	blx	r3
  400204:	b2c0      	uxtb	r0, r0
		if((c == '\r' || c == '\n') && bufferIndex > 0)
  400206:	280d      	cmp	r0, #13
  400208:	d06e      	beq.n	4002e8 <loop+0xf8>
  40020a:	280a      	cmp	r0, #10
  40020c:	d13a      	bne.n	400284 <loop+0x94>
  40020e:	e065      	b.n	4002dc <loop+0xec>
		{
			//send the buffer
			int readIndex = 0;
			int toAddress = buffer[0] - 48;
  400210:	4b3c      	ldr	r3, [pc, #240]	; (400304 <loop+0x114>)
  400212:	791b      	ldrb	r3, [r3, #4]
  400214:	3b30      	subs	r3, #48	; 0x30
			readIndex ++;
			while(readIndex < bufferIndex)
  400216:	2a01      	cmp	r2, #1
  400218:	dd1f      	ble.n	40025a <loop+0x6a>
  40021a:	4f3b      	ldr	r7, [pc, #236]	; (400308 <loop+0x118>)
  40021c:	2501      	movs	r5, #1
  40021e:	4c3b      	ldr	r4, [pc, #236]	; (40030c <loop+0x11c>)
  400220:	fa5f f883 	uxtb.w	r8, r3
			{
				//first byte is to address
				Serial1.write(toAddress);
				Serial1.write(myAddress);
  400224:	1f3e      	subs	r6, r7, #4
  400226:	6823      	ldr	r3, [r4, #0]
  400228:	681b      	ldr	r3, [r3, #0]
  40022a:	4620      	mov	r0, r4
  40022c:	4641      	mov	r1, r8
  40022e:	4798      	blx	r3
  400230:	6823      	ldr	r3, [r4, #0]
  400232:	681b      	ldr	r3, [r3, #0]
  400234:	4620      	mov	r0, r4
  400236:	7831      	ldrb	r1, [r6, #0]
  400238:	4798      	blx	r3
  40023a:	6823      	ldr	r3, [r4, #0]
  40023c:	681b      	ldr	r3, [r3, #0]
  40023e:	4620      	mov	r0, r4
  400240:	2100      	movs	r1, #0
  400242:	4798      	blx	r3
  400244:	6823      	ldr	r3, [r4, #0]
  400246:	681b      	ldr	r3, [r3, #0]
  400248:	4620      	mov	r0, r4
  40024a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  40024e:	4798      	blx	r3
				Serial1.write(SET_SERNET_LEN_CHECK_BYTE(0x01, 0x00));
				Serial1.write(buffer[readIndex]);
				readIndex++;
  400250:	3501      	adds	r5, #1
		{
			//send the buffer
			int readIndex = 0;
			int toAddress = buffer[0] - 48;
			readIndex ++;
			while(readIndex < bufferIndex)
  400252:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
  400256:	42ab      	cmp	r3, r5
  400258:	dce5      	bgt.n	400226 <loop+0x36>
				Serial1.write(myAddress);
				Serial1.write(SET_SERNET_LEN_CHECK_BYTE(0x01, 0x00));
				Serial1.write(buffer[readIndex]);
				readIndex++;
			}
			bufferIndex = 0;
  40025a:	2200      	movs	r2, #0
  40025c:	4b29      	ldr	r3, [pc, #164]	; (400304 <loop+0x114>)
  40025e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			Serial.println("Sent Packet");
  400262:	4825      	ldr	r0, [pc, #148]	; (4002f8 <loop+0x108>)
  400264:	492a      	ldr	r1, [pc, #168]	; (400310 <loop+0x120>)
  400266:	4b2b      	ldr	r3, [pc, #172]	; (400314 <loop+0x124>)
  400268:	4798      	blx	r3
  40026a:	e013      	b.n	400294 <loop+0xa4>
		}
		else if(c == '\r' || c == '\n')
		{
			bufferIndex = 0;
  40026c:	2200      	movs	r2, #0
  40026e:	4b25      	ldr	r3, [pc, #148]	; (400304 <loop+0x114>)
  400270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			Serial1.flush();
  400274:	4825      	ldr	r0, [pc, #148]	; (40030c <loop+0x11c>)
  400276:	4b28      	ldr	r3, [pc, #160]	; (400318 <loop+0x128>)
  400278:	4798      	blx	r3
			Serial.println("Flushed");
  40027a:	481f      	ldr	r0, [pc, #124]	; (4002f8 <loop+0x108>)
  40027c:	4927      	ldr	r1, [pc, #156]	; (40031c <loop+0x12c>)
  40027e:	4b25      	ldr	r3, [pc, #148]	; (400314 <loop+0x124>)
  400280:	4798      	blx	r3
  400282:	e007      	b.n	400294 <loop+0xa4>
		}
		else
		{
			buffer[bufferIndex] = c;
  400284:	4a1f      	ldr	r2, [pc, #124]	; (400304 <loop+0x114>)
  400286:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
  40028a:	18d1      	adds	r1, r2, r3
  40028c:	7108      	strb	r0, [r1, #4]
			bufferIndex++;
  40028e:	3301      	adds	r3, #1
  400290:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		}
	}
	
	if(Serial1.available() > 3)
  400294:	481d      	ldr	r0, [pc, #116]	; (40030c <loop+0x11c>)
  400296:	4b22      	ldr	r3, [pc, #136]	; (400320 <loop+0x130>)
  400298:	4798      	blx	r3
  40029a:	2803      	cmp	r0, #3
  40029c:	dd2a      	ble.n	4002f4 <loop+0x104>
	{
		int toAddress = Serial1.read();
  40029e:	4d1b      	ldr	r5, [pc, #108]	; (40030c <loop+0x11c>)
  4002a0:	4628      	mov	r0, r5
  4002a2:	4c20      	ldr	r4, [pc, #128]	; (400324 <loop+0x134>)
  4002a4:	47a0      	blx	r4
		int fromAddress = Serial1.read();
  4002a6:	4628      	mov	r0, r5
  4002a8:	47a0      	blx	r4
  4002aa:	4607      	mov	r7, r0
		int lenCheck = Serial1.read();
  4002ac:	4628      	mov	r0, r5
  4002ae:	47a0      	blx	r4
		int data = Serial1.read();
  4002b0:	4628      	mov	r0, r5
  4002b2:	47a0      	blx	r4
  4002b4:	4606      	mov	r6, r0
		Serial.print("Got Data: ");
  4002b6:	4c10      	ldr	r4, [pc, #64]	; (4002f8 <loop+0x108>)
  4002b8:	4620      	mov	r0, r4
  4002ba:	491b      	ldr	r1, [pc, #108]	; (400328 <loop+0x138>)
  4002bc:	4d1b      	ldr	r5, [pc, #108]	; (40032c <loop+0x13c>)
  4002be:	47a8      	blx	r5
		Serial.print(fromAddress);
  4002c0:	4620      	mov	r0, r4
  4002c2:	4639      	mov	r1, r7
  4002c4:	220a      	movs	r2, #10
  4002c6:	4b1a      	ldr	r3, [pc, #104]	; (400330 <loop+0x140>)
  4002c8:	4798      	blx	r3
		Serial.print(" ");
  4002ca:	4620      	mov	r0, r4
  4002cc:	4919      	ldr	r1, [pc, #100]	; (400334 <loop+0x144>)
  4002ce:	47a8      	blx	r5
		Serial.println((char)data);
  4002d0:	4620      	mov	r0, r4
  4002d2:	b2f1      	uxtb	r1, r6
  4002d4:	4b18      	ldr	r3, [pc, #96]	; (400338 <loop+0x148>)
  4002d6:	4798      	blx	r3
  4002d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
	if(Serial.available() > 0)
	{
		//write to sernet packet and send
		char c = Serial.read();
		if((c == '\r' || c == '\n') && bufferIndex > 0)
  4002dc:	4b09      	ldr	r3, [pc, #36]	; (400304 <loop+0x114>)
  4002de:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  4002e2:	2a00      	cmp	r2, #0
  4002e4:	dc94      	bgt.n	400210 <loop+0x20>
  4002e6:	e7c1      	b.n	40026c <loop+0x7c>
  4002e8:	4b06      	ldr	r3, [pc, #24]	; (400304 <loop+0x114>)
  4002ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  4002ee:	2a00      	cmp	r2, #0
  4002f0:	dc8e      	bgt.n	400210 <loop+0x20>
  4002f2:	e7bb      	b.n	40026c <loop+0x7c>
  4002f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002f8:	20001278 	.word	0x20001278
  4002fc:	00400c35 	.word	0x00400c35
  400300:	00400d51 	.word	0x00400d51
  400304:	20000900 	.word	0x20000900
  400308:	20000904 	.word	0x20000904
  40030c:	20000dfc 	.word	0x20000dfc
  400310:	00404f14 	.word	0x00404f14
  400314:	00400b31 	.word	0x00400b31
  400318:	0040052d 	.word	0x0040052d
  40031c:	00404f20 	.word	0x00404f20
  400320:	0040050d 	.word	0x0040050d
  400324:	0040073d 	.word	0x0040073d
  400328:	00404f28 	.word	0x00404f28
  40032c:	00400aed 	.word	0x00400aed
  400330:	00400c09 	.word	0x00400c09
  400334:	00404f34 	.word	0x00404f34
  400338:	00400b4d 	.word	0x00400b4d

0040033c <_ZN18HardwareSerialUart9availableEv>:
  flush();
}

int HardwareSerialUart::available(void)
{
  return rx_buffer_size;
  40033c:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
}
  400340:	4770      	bx	lr
  400342:	bf00      	nop

00400344 <_ZN18HardwareSerialUart4peekEv>:

int HardwareSerialUart::peek(void)
{
	if (rx_buffer_size == 0) 
  400344:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
  400348:	f013 0fff 	tst.w	r3, #255	; 0xff
	{
		return -1;
	} 
	else 
	{
		return (*rx_buffer_head);
  40034c:	bf1d      	ittte	ne
  40034e:	f8d0 3114 	ldrne.w	r3, [r0, #276]	; 0x114
  400352:	7818      	ldrbne	r0, [r3, #0]
  400354:	b2c0      	uxtbne	r0, r0

int HardwareSerialUart::peek(void)
{
	if (rx_buffer_size == 0) 
	{
		return -1;
  400356:	f04f 30ff 	moveq.w	r0, #4294967295
	} 
	else 
	{
		return (*rx_buffer_head);
	}
}
  40035a:	4770      	bx	lr

0040035c <_ZN18HardwareSerialUart5flushEv>:
{
	return (SERIAL_TX_BUFFER_SIZE - tx_buffer_size);
}

void HardwareSerialUart::flush()
{
  40035c:	4770      	bx	lr
  40035e:	bf00      	nop

00400360 <_ZN18HardwareSerialUart17tx_empty_callbackEv>:
{
	uart_peripheral = peripheral_pointer;
}

void HardwareSerialUart::tx_empty_callback(void)
{
  400360:	b508      	push	{r3, lr}
	//Generated by UART_IER_TXEMPTY
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	
	if(tx_buffer_size == 0)
  400362:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
  400366:	f013 0fff 	tst.w	r3, #255	; 0xff
  40036a:	d106      	bne.n	40037a <_ZN18HardwareSerialUart17tx_empty_callbackEv+0x1a>
	{
		//nothing in buffer, disable the interrupt
		uart_disable_interrupt(uart_peripheral, UART_IDR_TXEMPTY);
  40036c:	f8d0 022c 	ldr.w	r0, [r0, #556]	; 0x22c
  400370:	f44f 7100 	mov.w	r1, #512	; 0x200
  400374:	4b0d      	ldr	r3, [pc, #52]	; (4003ac <_ZN18HardwareSerialUart17tx_empty_callbackEv+0x4c>)
  400376:	4798      	blx	r3
		return;
  400378:	bd08      	pop	{r3, pc}
	}

	uint8_t data = *tx_buffer_head;
  40037a:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  40037e:	7819      	ldrb	r1, [r3, #0]
  400380:	b2c9      	uxtb	r1, r1
	//increment the tx_buffer_head pointer
	if(tx_buffer_head == tx_buffer_end)
  400382:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
  400386:	4293      	cmp	r3, r2
	{
		tx_buffer_head = tx_buffer;
  400388:	bf0c      	ite	eq
  40038a:	f200 131d 	addweq	r3, r0, #285	; 0x11d
	}
	else
	{
		tx_buffer_head++;
  40038e:	3301      	addne	r3, #1
  400390:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
	}
	//decrement the buffer counter because we have removed a byte
	tx_buffer_size--;
  400394:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
  400398:	3b01      	subs	r3, #1
  40039a:	b2db      	uxtb	r3, r3
  40039c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228

	//might need to clear the tx empty interrupt?
	uart_write(uart_peripheral, data);
  4003a0:	f8d0 022c 	ldr.w	r0, [r0, #556]	; 0x22c
  4003a4:	4b02      	ldr	r3, [pc, #8]	; (4003b0 <_ZN18HardwareSerialUart17tx_empty_callbackEv+0x50>)
  4003a6:	4798      	blx	r3
  4003a8:	bd08      	pop	{r3, pc}
  4003aa:	bf00      	nop
  4003ac:	00401ced 	.word	0x00401ced
  4003b0:	00401cf5 	.word	0x00401cf5

004003b4 <_ZN18HardwareSerialUart17rx_ready_callbackEv>:
}

void HardwareSerialUart::rx_ready_callback(void)
{
  4003b4:	b510      	push	{r4, lr}
  4003b6:	4604      	mov	r4, r0
	//Generated by UART_IER_RXRDY
	//This callback happens when a hardware interrupt on the UART has happened
	uart_read(uart_peripheral, rx_buffer_tail);
  4003b8:	f8d0 022c 	ldr.w	r0, [r0, #556]	; 0x22c
  4003bc:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
  4003c0:	4b09      	ldr	r3, [pc, #36]	; (4003e8 <_ZN18HardwareSerialUart17rx_ready_callbackEv+0x34>)
  4003c2:	4798      	blx	r3
	
	//increment rx_buffer_tail pointer because we have just added a byte
	if(rx_buffer_tail == rx_buffer_end)
  4003c4:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  4003c8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
  4003cc:	4293      	cmp	r3, r2
	{
		rx_buffer_tail = rx_buffer;
  4003ce:	bf0c      	ite	eq
  4003d0:	f104 0310 	addeq.w	r3, r4, #16
	}
	else
	{
		rx_buffer_tail++;
  4003d4:	3301      	addne	r3, #1
  4003d6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
	}

	rx_buffer_size++;
  4003da:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  4003de:	3301      	adds	r3, #1
  4003e0:	b2db      	uxtb	r3, r3
  4003e2:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
  4003e6:	bd10      	pop	{r4, pc}
  4003e8:	00401d05 	.word	0x00401d05

004003ec <_ZN18HardwareSerialUart16rx_buffer_removeEPh>:
		//else no room
		return 0;
	}
}
uint8_t HardwareSerialUart::rx_buffer_remove(uint8_t* data)
{
  4003ec:	4603      	mov	r3, r0
	if(rx_buffer_size > 0)
  4003ee:	f890 211c 	ldrb.w	r2, [r0, #284]	; 0x11c
  4003f2:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4003f6:	b1aa      	cbz	r2, 400424 <_ZN18HardwareSerialUart16rx_buffer_removeEPh+0x38>
	{
		*data = *rx_buffer_head;
  4003f8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  4003fc:	7812      	ldrb	r2, [r2, #0]
  4003fe:	700a      	strb	r2, [r1, #0]
		
		if(rx_buffer_head == rx_buffer_end)
  400400:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  400404:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
  400408:	428a      	cmp	r2, r1
		{
			rx_buffer_head = rx_buffer;
  40040a:	bf0c      	ite	eq
  40040c:	f103 0210 	addeq.w	r2, r3, #16
		}
		else
		{
			rx_buffer_head++;
  400410:	3201      	addne	r2, #1
  400412:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
		
		rx_buffer_size--;
  400416:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
  40041a:	3a01      	subs	r2, #1
  40041c:	b2d2      	uxtb	r2, r2
  40041e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
		return 1;
  400422:	2001      	movs	r0, #1
	else
	{
		//nothing to remove
		return 0;
	}
}
  400424:	4770      	bx	lr
  400426:	bf00      	nop

00400428 <_ZN18HardwareSerialUart4readEv>:
		return (*rx_buffer_head);
	}
}

int HardwareSerialUart::read(void)
{
  400428:	b500      	push	{lr}
  40042a:	b083      	sub	sp, #12
	uint8_t data = 0;
  40042c:	a902      	add	r1, sp, #8
  40042e:	2300      	movs	r3, #0
  400430:	f801 3d01 	strb.w	r3, [r1, #-1]!
	rx_buffer_remove(&data);
  400434:	4b03      	ldr	r3, [pc, #12]	; (400444 <_ZN18HardwareSerialUart4readEv+0x1c>)
  400436:	4798      	blx	r3
	return data;
}
  400438:	f89d 0007 	ldrb.w	r0, [sp, #7]
  40043c:	b003      	add	sp, #12
  40043e:	f85d fb04 	ldr.w	pc, [sp], #4
  400442:	bf00      	nop
  400444:	004003ed 	.word	0x004003ed

00400448 <_ZN18HardwareSerialUart16tx_buffer_appendEh>:
	}
}

uint8_t HardwareSerialUart::tx_buffer_append(uint8_t data)
{
	if(tx_buffer_size < SERIAL_TX_BUFFER_SIZE)
  400448:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
  40044c:	b2db      	uxtb	r3, r3
  40044e:	2bff      	cmp	r3, #255	; 0xff
  400450:	d015      	beq.n	40047e <_ZN18HardwareSerialUart16tx_buffer_appendEh+0x36>
	{
		*tx_buffer_tail = data;
  400452:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
  400456:	7019      	strb	r1, [r3, #0]
		
		if(tx_buffer_head == tx_buffer_end)
  400458:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  40045c:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
  400460:	4293      	cmp	r3, r2
		{
			tx_buffer_head = tx_buffer;
  400462:	bf0c      	ite	eq
  400464:	f200 131d 	addweq	r3, r0, #285	; 0x11d
		}
		else
		{
			tx_buffer_head++;
  400468:	3301      	addne	r3, #1
  40046a:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
		}
		
		tx_buffer_size++;
  40046e:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
  400472:	3301      	adds	r3, #1
  400474:	b2db      	uxtb	r3, r3
  400476:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
		return 1;
  40047a:	2001      	movs	r0, #1
  40047c:	4770      	bx	lr
	}
	else
	{
		//else no room
		return 0;
  40047e:	2000      	movs	r0, #0
	}
}
  400480:	4770      	bx	lr
  400482:	bf00      	nop

00400484 <_ZN18HardwareSerialUart5writeEh>:
void HardwareSerialUart::flush()
{
}

size_t HardwareSerialUart::write(uint8_t data)
{
  400484:	b538      	push	{r3, r4, r5, lr}
  400486:	4604      	mov	r4, r0
  400488:	460d      	mov	r5, r1
	//if there is no data in buffer and tx is ready just pass to peripheral
	//this is just optimization to avoid buffering and interrupt sending
	if(tx_buffer_size == 0 && uart_peripheral->UART_SR & UART_SR_TXRDY)
  40048a:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
  40048e:	f013 0fff 	tst.w	r3, #255	; 0xff
  400492:	d105      	bne.n	4004a0 <_ZN18HardwareSerialUart5writeEh+0x1c>
  400494:	f8d0 022c 	ldr.w	r0, [r0, #556]	; 0x22c
  400498:	6943      	ldr	r3, [r0, #20]
  40049a:	f013 0f02 	tst.w	r3, #2
  40049e:	d10a      	bne.n	4004b6 <_ZN18HardwareSerialUart5writeEh+0x32>
		uart_write(uart_peripheral, data);
		return 1;
	}
	else
	{
		uart_enable_interrupt(uart_peripheral, UART_IER_TXEMPTY);
  4004a0:	f8d4 022c 	ldr.w	r0, [r4, #556]	; 0x22c
  4004a4:	f44f 7100 	mov.w	r1, #512	; 0x200
  4004a8:	4b05      	ldr	r3, [pc, #20]	; (4004c0 <_ZN18HardwareSerialUart5writeEh+0x3c>)
  4004aa:	4798      	blx	r3
		return tx_buffer_append(data);
  4004ac:	4620      	mov	r0, r4
  4004ae:	4629      	mov	r1, r5
  4004b0:	4b04      	ldr	r3, [pc, #16]	; (4004c4 <_ZN18HardwareSerialUart5writeEh+0x40>)
  4004b2:	4798      	blx	r3
  4004b4:	bd38      	pop	{r3, r4, r5, pc}
{
	//if there is no data in buffer and tx is ready just pass to peripheral
	//this is just optimization to avoid buffering and interrupt sending
	if(tx_buffer_size == 0 && uart_peripheral->UART_SR & UART_SR_TXRDY)
	{
		uart_write(uart_peripheral, data);
  4004b6:	4b04      	ldr	r3, [pc, #16]	; (4004c8 <_ZN18HardwareSerialUart5writeEh+0x44>)
  4004b8:	4798      	blx	r3
		return 1;
  4004ba:	2001      	movs	r0, #1
	else
	{
		uart_enable_interrupt(uart_peripheral, UART_IER_TXEMPTY);
		return tx_buffer_append(data);
	}
}
  4004bc:	bd38      	pop	{r3, r4, r5, pc}
  4004be:	bf00      	nop
  4004c0:	00401ce9 	.word	0x00401ce9
  4004c4:	00400449 	.word	0x00400449
  4004c8:	00401cf5 	.word	0x00401cf5

004004cc <_GLOBAL__sub_I__ZN18HardwareSerialUartC2EP4Uart>:
		return 0;
	}
}

HardwareSerialUart Serial3 = HardwareSerialUart(UART0);
HardwareSerialUart Serial4 = HardwareSerialUart(UART1);
  4004cc:	b410      	push	{r4}
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
  4004ce:	4b0b      	ldr	r3, [pc, #44]	; (4004fc <_GLOBAL__sub_I__ZN18HardwareSerialUartC2EP4Uart+0x30>)
  4004d0:	2000      	movs	r0, #0
  4004d2:	6058      	str	r0, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  4004d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4004d8:	6099      	str	r1, [r3, #8]
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}

HardwareSerialUart::HardwareSerialUart(Uart* peripheral_pointer)
  4004da:	4a09      	ldr	r2, [pc, #36]	; (400500 <_GLOBAL__sub_I__ZN18HardwareSerialUartC2EP4Uart+0x34>)
  4004dc:	601a      	str	r2, [r3, #0]
{
	uart_peripheral = peripheral_pointer;
  4004de:	4c09      	ldr	r4, [pc, #36]	; (400504 <_GLOBAL__sub_I__ZN18HardwareSerialUartC2EP4Uart+0x38>)
  4004e0:	f8c3 422c 	str.w	r4, [r3, #556]	; 0x22c
  4004e4:	f8c3 0234 	str.w	r0, [r3, #564]	; 0x234
  4004e8:	f8c3 1238 	str.w	r1, [r3, #568]	; 0x238
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}

HardwareSerialUart::HardwareSerialUart(Uart* peripheral_pointer)
  4004ec:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
{
	uart_peripheral = peripheral_pointer;
  4004f0:	4a05      	ldr	r2, [pc, #20]	; (400508 <_GLOBAL__sub_I__ZN18HardwareSerialUartC2EP4Uart+0x3c>)
  4004f2:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
		return 0;
	}
}

HardwareSerialUart Serial3 = HardwareSerialUart(UART0);
HardwareSerialUart Serial4 = HardwareSerialUart(UART1);
  4004f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004fa:	4770      	bx	lr
  4004fc:	20000994 	.word	0x20000994
  400500:	00404f40 	.word	0x00404f40
  400504:	400e0600 	.word	0x400e0600
  400508:	400e0800 	.word	0x400e0800

0040050c <_ZN19HardwareSerialUsart9availableEv>:
  flush();
}

int HardwareSerialUsart::available(void)
{
  return rx_buffer_size;
  40050c:	f8b0 011c 	ldrh.w	r0, [r0, #284]	; 0x11c
}
  400510:	b280      	uxth	r0, r0
  400512:	4770      	bx	lr

00400514 <_ZN19HardwareSerialUsart4peekEv>:

int HardwareSerialUsart::peek(void)
{
	if (rx_buffer_size == 0) 
  400514:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
  400518:	b29b      	uxth	r3, r3
  40051a:	b123      	cbz	r3, 400526 <_ZN19HardwareSerialUsart4peekEv+0x12>
	{
		return -1;
	} 
	else 
	{
		return (*rx_buffer_head);
  40051c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
  400520:	7818      	ldrb	r0, [r3, #0]
  400522:	b2c0      	uxtb	r0, r0
  400524:	4770      	bx	lr

int HardwareSerialUsart::peek(void)
{
	if (rx_buffer_size == 0) 
	{
		return -1;
  400526:	f04f 30ff 	mov.w	r0, #4294967295
	} 
	else 
	{
		return (*rx_buffer_head);
	}
}
  40052a:	4770      	bx	lr

0040052c <_ZN19HardwareSerialUsart5flushEv>:
}

void HardwareSerialUsart::flush()
{
	//tx_buffer_size = 0;
	while(tx_buffer_size > 0); //wait for tx to flush
  40052c:	f8b0 322c 	ldrh.w	r3, [r0, #556]	; 0x22c
  400530:	b29b      	uxth	r3, r3
  400532:	2b00      	cmp	r3, #0
  400534:	d1fa      	bne.n	40052c <_ZN19HardwareSerialUsart5flushEv>
	tx_buffer_head = tx_buffer;
  400536:	f500 738f 	add.w	r3, r0, #286	; 0x11e
  40053a:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
	tx_buffer_tail = tx_buffer;
  40053e:	f8c0 3228 	str.w	r3, [r0, #552]	; 0x228
	
	rx_buffer_head = rx_buffer;
  400542:	f100 0310 	add.w	r3, r0, #16
  400546:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
	rx_buffer_tail = rx_buffer;
  40054a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40054e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400550:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400554:	4b05      	ldr	r3, [pc, #20]	; (40056c <_ZN19HardwareSerialUsart5flushEv+0x40>)
  400556:	2200      	movs	r2, #0
  400558:	701a      	strb	r2, [r3, #0]
	rx_buffer_size = 0; //flush rx buffer by dropping everything in buffer
  40055a:	f8a0 211c 	strh.w	r2, [r0, #284]	; 0x11c
	cpu_irq_enable();
  40055e:	2201      	movs	r2, #1
  400560:	701a      	strb	r2, [r3, #0]
  400562:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400566:	b662      	cpsie	i
  400568:	4770      	bx	lr
  40056a:	bf00      	nop
  40056c:	200000a3 	.word	0x200000a3

00400570 <_ZN19HardwareSerialUsart5beginEmh>:
{ 
	begin(baud, SERIAL_8N1);
}

void HardwareSerialUsart::begin(unsigned long baud, byte config)
{
  400570:	b5f0      	push	{r4, r5, r6, r7, lr}
  400572:	b087      	sub	sp, #28
  400574:	4604      	mov	r4, r0
  400576:	460d      	mov	r5, r1
	IRQn_Type usart_irq_num;
	int usart_id;
	//setup the UART peripheral
	if(usart_peripheral == USART0)
  400578:	f8d0 3230 	ldr.w	r3, [r0, #560]	; 0x230
  40057c:	4a2c      	ldr	r2, [pc, #176]	; (400630 <_ZN19HardwareSerialUsart5beginEmh+0xc0>)
  40057e:	4293      	cmp	r3, r2
  400580:	d109      	bne.n	400596 <_ZN19HardwareSerialUsart5beginEmh+0x26>
	{
		//set pins for uart0 peripheral, peripheral A RXD = PA9, TXD = PA10
		pio_configure(PIOA, PIO_PERIPH_A, (PIO_PA5A_RXD0 | PIO_PA6A_TXD0), PIO_DEFAULT);
  400582:	482c      	ldr	r0, [pc, #176]	; (400634 <_ZN19HardwareSerialUsart5beginEmh+0xc4>)
  400584:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400588:	2260      	movs	r2, #96	; 0x60
  40058a:	2300      	movs	r3, #0
  40058c:	4e2a      	ldr	r6, [pc, #168]	; (400638 <_ZN19HardwareSerialUsart5beginEmh+0xc8>)
  40058e:	47b0      	blx	r6
		//set the uart irq number
		usart_irq_num = USART0_IRQn;
		usart_id = ID_USART0;
  400590:	200e      	movs	r0, #14
	if(usart_peripheral == USART0)
	{
		//set pins for uart0 peripheral, peripheral A RXD = PA9, TXD = PA10
		pio_configure(PIOA, PIO_PERIPH_A, (PIO_PA5A_RXD0 | PIO_PA6A_TXD0), PIO_DEFAULT);
		//set the uart irq number
		usart_irq_num = USART0_IRQn;
  400592:	4607      	mov	r7, r0
  400594:	e00c      	b.n	4005b0 <_ZN19HardwareSerialUsart5beginEmh+0x40>
		usart_id = ID_USART0;
	}
	else if(usart_peripheral == USART1)
  400596:	4a29      	ldr	r2, [pc, #164]	; (40063c <_ZN19HardwareSerialUsart5beginEmh+0xcc>)
  400598:	4293      	cmp	r3, r2
  40059a:	d146      	bne.n	40062a <_ZN19HardwareSerialUsart5beginEmh+0xba>
	{
		//set pins for uart1 peripheral, peripheral A RXD = PA21, TXD = PA22
		pio_configure(PIOA, PIO_PERIPH_A, (PIO_PA21A_RXD1 | PIO_PA22A_TXD1), PIO_DEFAULT);
  40059c:	4825      	ldr	r0, [pc, #148]	; (400634 <_ZN19HardwareSerialUsart5beginEmh+0xc4>)
  40059e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005a2:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  4005a6:	2300      	movs	r3, #0
  4005a8:	4e23      	ldr	r6, [pc, #140]	; (400638 <_ZN19HardwareSerialUsart5beginEmh+0xc8>)
  4005aa:	47b0      	blx	r6
		//PIOA->PIO_PDR = ((1 << 21) | (1 << 22));  //disable pio from controlling txd and rxd pins
		//PIOA->PIO_ABCDSR[0] &= ~((1 << 21) | (1 << 22));  //set to peripheral A control
		//PIOA->PIO_ABCDSR[1] &= ~((1 << 21) | (1 << 22));  //set to peripheral A control
		
		usart_irq_num = USART1_IRQn;
		usart_id = ID_USART1;
  4005ac:	200f      	movs	r0, #15
		
		//PIOA->PIO_PDR = ((1 << 21) | (1 << 22));  //disable pio from controlling txd and rxd pins
		//PIOA->PIO_ABCDSR[0] &= ~((1 << 21) | (1 << 22));  //set to peripheral A control
		//PIOA->PIO_ABCDSR[1] &= ~((1 << 21) | (1 << 22));  //set to peripheral A control
		
		usart_irq_num = USART1_IRQn;
  4005ae:	4607      	mov	r7, r0
	{
		return; //error, uart_peripheral not set to correct base address
	}
	
	//setup the buffers
	rx_buffer_size = 0;
  4005b0:	2300      	movs	r3, #0
  4005b2:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
	rx_buffer_head = rx_buffer;
  4005b6:	f104 0210 	add.w	r2, r4, #16
  4005ba:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
	rx_buffer_tail = rx_buffer;
  4005be:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
	rx_buffer_end = &rx_buffer[SERIAL_USART_RX_BUFFER_SIZE-1];
  4005c2:	f204 120f 	addw	r2, r4, #271	; 0x10f
  4005c6:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110

	tx_buffer_size = 0;
  4005ca:	f8a4 322c 	strh.w	r3, [r4, #556]	; 0x22c
	tx_buffer_head = tx_buffer;
  4005ce:	f504 728f 	add.w	r2, r4, #286	; 0x11e
  4005d2:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
	tx_buffer_tail = tx_buffer;
  4005d6:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
	tx_buffer_end = &tx_buffer[SERIAL_USART_RX_BUFFER_SIZE-1];
  4005da:	f204 221d 	addw	r2, r4, #541	; 0x21d
  4005de:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
		baud,
		US_MR_CHRL_8_BIT,
		US_MR_PAR_NO,
		US_MR_NBSTOP_1_BIT,
		US_MR_CHMODE_NORMAL
	};
  4005e2:	9303      	str	r3, [sp, #12]
  4005e4:	9304      	str	r3, [sp, #16]
  4005e6:	9305      	str	r3, [sp, #20]
  4005e8:	23c0      	movs	r3, #192	; 0xc0
  4005ea:	9301      	str	r3, [sp, #4]
  4005ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4005f0:	9302      	str	r3, [sp, #8]
  4005f2:	ae06      	add	r6, sp, #24
  4005f4:	f846 5d18 	str.w	r5, [r6, #-24]!
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4005f8:	4b11      	ldr	r3, [pc, #68]	; (400640 <_ZN19HardwareSerialUsart5beginEmh+0xd0>)
  4005fa:	4798      	blx	r3

	//enable clock gate to usart
	sysclk_enable_peripheral_clock(usart_id);

	//init the uart peripheral
	usart_init_rs232(usart_peripheral, &usart_settings, sysclk_get_peripheral_hz());
  4005fc:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
  400600:	4631      	mov	r1, r6
  400602:	4a10      	ldr	r2, [pc, #64]	; (400644 <_ZN19HardwareSerialUsart5beginEmh+0xd4>)
  400604:	4b10      	ldr	r3, [pc, #64]	; (400648 <_ZN19HardwareSerialUsart5beginEmh+0xd8>)
  400606:	4798      	blx	r3

	//enable tx and rx
	usart_enable_tx(usart_peripheral);
  400608:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
  40060c:	4b0f      	ldr	r3, [pc, #60]	; (40064c <_ZN19HardwareSerialUsart5beginEmh+0xdc>)
  40060e:	4798      	blx	r3
	usart_enable_rx(usart_peripheral);
  400610:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
  400614:	4b0e      	ldr	r3, [pc, #56]	; (400650 <_ZN19HardwareSerialUsart5beginEmh+0xe0>)
  400616:	4798      	blx	r3

	//enable the rx interrupt
	usart_enable_interrupt(usart_peripheral, US_IER_RXRDY);
  400618:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
  40061c:	2101      	movs	r1, #1
  40061e:	4b0d      	ldr	r3, [pc, #52]	; (400654 <_ZN19HardwareSerialUsart5beginEmh+0xe4>)
  400620:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400622:	2301      	movs	r3, #1
  400624:	40bb      	lsls	r3, r7
  400626:	4a0c      	ldr	r2, [pc, #48]	; (400658 <_ZN19HardwareSerialUsart5beginEmh+0xe8>)
  400628:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(usart_irq_num);
	
	return;
}
  40062a:	b007      	add	sp, #28
  40062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40062e:	bf00      	nop
  400630:	40024000 	.word	0x40024000
  400634:	400e0e00 	.word	0x400e0e00
  400638:	00403889 	.word	0x00403889
  40063c:	40028000 	.word	0x40028000
  400640:	00403a2d 	.word	0x00403a2d
  400644:	07270e00 	.word	0x07270e00
  400648:	00403c29 	.word	0x00403c29
  40064c:	00403c7d 	.word	0x00403c7d
  400650:	00403c85 	.word	0x00403c85
  400654:	00403c8d 	.word	0x00403c8d
  400658:	e000e100 	.word	0xe000e100

0040065c <_ZN19HardwareSerialUsart5beginEm>:


// Public Methods //////////////////////////////////////////////////////////////
//TODO: make the config byte from Arduino work with ASF
void HardwareSerialUsart::begin(unsigned long baud)
{ 
  40065c:	b508      	push	{r3, lr}
	begin(baud, SERIAL_8N1);
  40065e:	2206      	movs	r2, #6
  400660:	4b01      	ldr	r3, [pc, #4]	; (400668 <_ZN19HardwareSerialUsart5beginEm+0xc>)
  400662:	4798      	blx	r3
  400664:	bd08      	pop	{r3, pc}
  400666:	bf00      	nop
  400668:	00400571 	.word	0x00400571

0040066c <_ZN19HardwareSerialUsart16rx_buffer_appendEh>:
	}
}

uint8_t HardwareSerialUsart::rx_buffer_append(uint8_t data)
{
	if(rx_buffer_size < SERIAL_USART_RX_BUFFER_SIZE)
  40066c:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
  400670:	b29b      	uxth	r3, r3
  400672:	2bff      	cmp	r3, #255	; 0xff
  400674:	d81f      	bhi.n	4006b6 <_ZN19HardwareSerialUsart16rx_buffer_appendEh+0x4a>
	{
		*rx_buffer_tail = data;
  400676:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
  40067a:	7019      	strb	r1, [r3, #0]
		
		if(rx_buffer_tail == rx_buffer_end)
  40067c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
  400680:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
  400684:	4293      	cmp	r3, r2
		{
			rx_buffer_tail = rx_buffer;
  400686:	bf0c      	ite	eq
  400688:	f100 0310 	addeq.w	r3, r0, #16
		}
		else
		{
			rx_buffer_tail++;
  40068c:	3301      	addne	r3, #1
  40068e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400692:	b672      	cpsid	i
  400694:	f3bf 8f5f 	dmb	sy
		}
		cpu_irq_disable();
  400698:	4a08      	ldr	r2, [pc, #32]	; (4006bc <_ZN19HardwareSerialUsart16rx_buffer_appendEh+0x50>)
  40069a:	2300      	movs	r3, #0
  40069c:	7013      	strb	r3, [r2, #0]
		rx_buffer_size++;
  40069e:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
  4006a2:	3301      	adds	r3, #1
  4006a4:	b29b      	uxth	r3, r3
  4006a6:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
		cpu_irq_enable();
  4006aa:	2001      	movs	r0, #1
  4006ac:	7010      	strb	r0, [r2, #0]
  4006ae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4006b2:	b662      	cpsie	i
		return 1;
  4006b4:	4770      	bx	lr
	}
	else
	{
		//else no room
		return 0;
  4006b6:	2000      	movs	r0, #0
	}
}
  4006b8:	4770      	bx	lr
  4006ba:	bf00      	nop
  4006bc:	200000a3 	.word	0x200000a3

004006c0 <_ZN19HardwareSerialUsart17rx_ready_callbackEv>:
		usart_write(usart_peripheral, data);
	}
}

void HardwareSerialUsart::rx_ready_callback(void)
{
  4006c0:	b510      	push	{r4, lr}
  4006c2:	b082      	sub	sp, #8
  4006c4:	4604      	mov	r4, r0
	//Generated by UART_IER_RXRDY
	//This callback happens when a hardware interrupt on the UART has happened
	uint32_t readData;
	usart_read(usart_peripheral, &readData);
  4006c6:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
  4006ca:	a901      	add	r1, sp, #4
  4006cc:	4b04      	ldr	r3, [pc, #16]	; (4006e0 <_ZN19HardwareSerialUsart17rx_ready_callbackEv+0x20>)
  4006ce:	4798      	blx	r3
	
	rx_buffer_append(readData);
  4006d0:	4620      	mov	r0, r4
  4006d2:	f89d 1004 	ldrb.w	r1, [sp, #4]
  4006d6:	4b03      	ldr	r3, [pc, #12]	; (4006e4 <_ZN19HardwareSerialUsart17rx_ready_callbackEv+0x24>)
  4006d8:	4798      	blx	r3
		rx_buffer_tail++;
	}

	rx_buffer_size++;
	*/
}
  4006da:	b002      	add	sp, #8
  4006dc:	bd10      	pop	{r4, pc}
  4006de:	bf00      	nop
  4006e0:	00403cad 	.word	0x00403cad
  4006e4:	0040066d 	.word	0x0040066d

004006e8 <_ZN19HardwareSerialUsart16rx_buffer_removeEPh>:
		return 0;
	}
}
uint8_t HardwareSerialUsart::rx_buffer_remove(uint8_t* data)
{
	if(rx_buffer_size > 0)
  4006e8:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
  4006ec:	b29b      	uxth	r3, r3
  4006ee:	b303      	cbz	r3, 400732 <_ZN19HardwareSerialUsart16rx_buffer_removeEPh+0x4a>
	{
		*data = *rx_buffer_head;
  4006f0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
  4006f4:	781b      	ldrb	r3, [r3, #0]
  4006f6:	700b      	strb	r3, [r1, #0]
		
		if(rx_buffer_head == rx_buffer_end)
  4006f8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
  4006fc:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
  400700:	4293      	cmp	r3, r2
		{
			rx_buffer_head = rx_buffer;
  400702:	bf0c      	ite	eq
  400704:	f100 0310 	addeq.w	r3, r0, #16
		}
		else
		{
			rx_buffer_head++;
  400708:	3301      	addne	r3, #1
  40070a:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40070e:	b672      	cpsid	i
  400710:	f3bf 8f5f 	dmb	sy
		}
		cpu_irq_disable();
  400714:	4a08      	ldr	r2, [pc, #32]	; (400738 <_ZN19HardwareSerialUsart16rx_buffer_removeEPh+0x50>)
  400716:	2300      	movs	r3, #0
  400718:	7013      	strb	r3, [r2, #0]
		rx_buffer_size--;
  40071a:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
  40071e:	3b01      	subs	r3, #1
  400720:	b29b      	uxth	r3, r3
  400722:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
		cpu_irq_enable();
  400726:	2001      	movs	r0, #1
  400728:	7010      	strb	r0, [r2, #0]
  40072a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40072e:	b662      	cpsie	i
		return 1;
  400730:	4770      	bx	lr
	}
	else
	{
		//nothing to remove
		return 0;
  400732:	2000      	movs	r0, #0
	}
}
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	200000a3 	.word	0x200000a3

0040073c <_ZN19HardwareSerialUsart4readEv>:
	}
}

int HardwareSerialUsart::read(void)
{
	if(rx_buffer_size > 0)
  40073c:	f8b0 311c 	ldrh.w	r3, [r0, #284]	; 0x11c
  400740:	b29b      	uxth	r3, r3
  400742:	b153      	cbz	r3, 40075a <_ZN19HardwareSerialUsart4readEv+0x1e>
		return (*rx_buffer_head);
	}
}

int HardwareSerialUsart::read(void)
{
  400744:	b500      	push	{lr}
  400746:	b083      	sub	sp, #12
	if(rx_buffer_size > 0)
	{
		uint8_t data = 0;
  400748:	a902      	add	r1, sp, #8
  40074a:	2300      	movs	r3, #0
  40074c:	f801 3d01 	strb.w	r3, [r1, #-1]!
		rx_buffer_remove(&data);
  400750:	4b05      	ldr	r3, [pc, #20]	; (400768 <_ZN19HardwareSerialUsart4readEv+0x2c>)
  400752:	4798      	blx	r3
		return data;
  400754:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400758:	e002      	b.n	400760 <_ZN19HardwareSerialUsart4readEv+0x24>
	}
	else
	{
		return -1;
  40075a:	f04f 30ff 	mov.w	r0, #4294967295
  40075e:	4770      	bx	lr
	}
}
  400760:	b003      	add	sp, #12
  400762:	f85d fb04 	ldr.w	pc, [sp], #4
  400766:	bf00      	nop
  400768:	004006e9 	.word	0x004006e9

0040076c <_ZN19HardwareSerialUsart16tx_buffer_appendEh>:
	}
}

uint8_t HardwareSerialUsart::tx_buffer_append(uint8_t data)
{
	if(tx_buffer_size < SERIAL_USART_RX_BUFFER_SIZE)
  40076c:	f8b0 322c 	ldrh.w	r3, [r0, #556]	; 0x22c
  400770:	b29b      	uxth	r3, r3
  400772:	2bff      	cmp	r3, #255	; 0xff
  400774:	d81f      	bhi.n	4007b6 <_ZN19HardwareSerialUsart16tx_buffer_appendEh+0x4a>
	{
		*tx_buffer_tail = data;
  400776:	f8d0 3228 	ldr.w	r3, [r0, #552]	; 0x228
  40077a:	7019      	strb	r1, [r3, #0]
		if(tx_buffer_tail == tx_buffer_end)
  40077c:	f8d0 3228 	ldr.w	r3, [r0, #552]	; 0x228
  400780:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  400784:	4293      	cmp	r3, r2
		{
			tx_buffer_tail = tx_buffer;
  400786:	bf0c      	ite	eq
  400788:	f500 738f 	addeq.w	r3, r0, #286	; 0x11e
		}
		else
		{
			tx_buffer_tail++;
  40078c:	3301      	addne	r3, #1
  40078e:	f8c0 3228 	str.w	r3, [r0, #552]	; 0x228
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400792:	b672      	cpsid	i
  400794:	f3bf 8f5f 	dmb	sy
		}
		cpu_irq_disable();
  400798:	4a08      	ldr	r2, [pc, #32]	; (4007bc <_ZN19HardwareSerialUsart16tx_buffer_appendEh+0x50>)
  40079a:	2300      	movs	r3, #0
  40079c:	7013      	strb	r3, [r2, #0]
		tx_buffer_size++;
  40079e:	f8b0 322c 	ldrh.w	r3, [r0, #556]	; 0x22c
  4007a2:	3301      	adds	r3, #1
  4007a4:	b29b      	uxth	r3, r3
  4007a6:	f8a0 322c 	strh.w	r3, [r0, #556]	; 0x22c
		cpu_irq_enable();
  4007aa:	2001      	movs	r0, #1
  4007ac:	7010      	strb	r0, [r2, #0]
  4007ae:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4007b2:	b662      	cpsie	i
		return 1;
  4007b4:	4770      	bx	lr
	}
	else
	{
		//else no room
		return 0;
  4007b6:	2000      	movs	r0, #0
	}
}
  4007b8:	4770      	bx	lr
  4007ba:	bf00      	nop
  4007bc:	200000a3 	.word	0x200000a3

004007c0 <_ZN19HardwareSerialUsart5writeEh>:
	cpu_irq_enable();
	
}

size_t HardwareSerialUsart::write(uint8_t data)
{
  4007c0:	b510      	push	{r4, lr}
  4007c2:	4604      	mov	r4, r0
	//if there is no data in buffer and tx is ready just pass to peripheral
	//this is just optimization to avoid buffering and interrupt sending
	if(tx_buffer_size == 0 && usart_peripheral->US_CSR & US_CSR_TXRDY)
  4007c4:	f8b0 322c 	ldrh.w	r3, [r0, #556]	; 0x22c
  4007c8:	b29b      	uxth	r3, r3
  4007ca:	b943      	cbnz	r3, 4007de <_ZN19HardwareSerialUsart5writeEh+0x1e>
  4007cc:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
  4007d0:	6943      	ldr	r3, [r0, #20]
  4007d2:	f013 0f02 	tst.w	r3, #2
  4007d6:	d002      	beq.n	4007de <_ZN19HardwareSerialUsart5writeEh+0x1e>
	{
		usart_write(usart_peripheral, data);
  4007d8:	4b09      	ldr	r3, [pc, #36]	; (400800 <_ZN19HardwareSerialUsart5writeEh+0x40>)
  4007da:	4798      	blx	r3
		return 1;
  4007dc:	e00d      	b.n	4007fa <_ZN19HardwareSerialUsart5writeEh+0x3a>
	}
	else
	{
		while(tx_buffer_size == SERIAL_USART_RX_BUFFER_SIZE) ; //wait for room to put stuff into tx buffer
  4007de:	f8b4 322c 	ldrh.w	r3, [r4, #556]	; 0x22c
  4007e2:	b29b      	uxth	r3, r3
  4007e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4007e8:	d0f9      	beq.n	4007de <_ZN19HardwareSerialUsart5writeEh+0x1e>
		tx_buffer_append(data);
  4007ea:	4620      	mov	r0, r4
  4007ec:	4b05      	ldr	r3, [pc, #20]	; (400804 <_ZN19HardwareSerialUsart5writeEh+0x44>)
  4007ee:	4798      	blx	r3
		usart_enable_interrupt(usart_peripheral, US_IER_TXRDY);
  4007f0:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
  4007f4:	2102      	movs	r1, #2
  4007f6:	4b04      	ldr	r3, [pc, #16]	; (400808 <_ZN19HardwareSerialUsart5writeEh+0x48>)
  4007f8:	4798      	blx	r3
		return 1;
	}
}
  4007fa:	2001      	movs	r0, #1
  4007fc:	bd10      	pop	{r4, pc}
  4007fe:	bf00      	nop
  400800:	00403c99 	.word	0x00403c99
  400804:	0040076d 	.word	0x0040076d
  400808:	00403c8d 	.word	0x00403c8d

0040080c <_ZN19HardwareSerialUsart16tx_buffer_removeEPh>:
		return 0;
	}
}
uint8_t HardwareSerialUsart::tx_buffer_remove(uint8_t* data)
{
	if(tx_buffer_size > 0)
  40080c:	f8b0 322c 	ldrh.w	r3, [r0, #556]	; 0x22c
  400810:	b29b      	uxth	r3, r3
  400812:	b303      	cbz	r3, 400856 <_ZN19HardwareSerialUsart16tx_buffer_removeEPh+0x4a>
	{
		*data = *tx_buffer_head;
  400814:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
  400818:	781b      	ldrb	r3, [r3, #0]
  40081a:	700b      	strb	r3, [r1, #0]
		
		if(tx_buffer_head == tx_buffer_end)
  40081c:	f8d0 3224 	ldr.w	r3, [r0, #548]	; 0x224
  400820:	f8d0 2220 	ldr.w	r2, [r0, #544]	; 0x220
  400824:	4293      	cmp	r3, r2
		{
			tx_buffer_head = tx_buffer;
  400826:	bf0c      	ite	eq
  400828:	f500 738f 	addeq.w	r3, r0, #286	; 0x11e
		}
		else
		{
			tx_buffer_head++;
  40082c:	3301      	addne	r3, #1
  40082e:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400832:	b672      	cpsid	i
  400834:	f3bf 8f5f 	dmb	sy
		}
		cpu_irq_disable();
  400838:	4a08      	ldr	r2, [pc, #32]	; (40085c <_ZN19HardwareSerialUsart16tx_buffer_removeEPh+0x50>)
  40083a:	2300      	movs	r3, #0
  40083c:	7013      	strb	r3, [r2, #0]
		tx_buffer_size--;
  40083e:	f8b0 322c 	ldrh.w	r3, [r0, #556]	; 0x22c
  400842:	3b01      	subs	r3, #1
  400844:	b29b      	uxth	r3, r3
  400846:	f8a0 322c 	strh.w	r3, [r0, #556]	; 0x22c
		cpu_irq_enable();
  40084a:	2001      	movs	r0, #1
  40084c:	7010      	strb	r0, [r2, #0]
  40084e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400852:	b662      	cpsie	i
		return 1;
  400854:	4770      	bx	lr
	}
	else
	{
		//nothing to remove
		return 0;
  400856:	2000      	movs	r0, #0
	}
}
  400858:	4770      	bx	lr
  40085a:	bf00      	nop
  40085c:	200000a3 	.word	0x200000a3

00400860 <_ZN19HardwareSerialUsart17tx_empty_callbackEv>:
{
	usart_peripheral = peripheral_pointer;
}

void HardwareSerialUsart::tx_empty_callback(void)
{
  400860:	b510      	push	{r4, lr}
  400862:	b082      	sub	sp, #8
  400864:	4604      	mov	r4, r0
	//Generated by UART_IER_TXEMPTY
	// If interrupts are enabled, there must be more data in the output
	// buffer. Send the next byte
	
	if(tx_buffer_size == 0)
  400866:	f8b0 322c 	ldrh.w	r3, [r0, #556]	; 0x22c
  40086a:	b29b      	uxth	r3, r3
  40086c:	b92b      	cbnz	r3, 40087a <_ZN19HardwareSerialUsart17tx_empty_callbackEv+0x1a>
	{
		//nothing in buffer, disable the interrupt
		usart_disable_interrupt(usart_peripheral, US_IER_TXRDY);
  40086e:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
  400872:	2102      	movs	r1, #2
  400874:	4b07      	ldr	r3, [pc, #28]	; (400894 <_ZN19HardwareSerialUsart17tx_empty_callbackEv+0x34>)
  400876:	4798      	blx	r3
  400878:	e009      	b.n	40088e <_ZN19HardwareSerialUsart17tx_empty_callbackEv+0x2e>
	}
	else
	{
		uint8_t data;
		tx_buffer_remove(&data);
  40087a:	f10d 0107 	add.w	r1, sp, #7
  40087e:	4b06      	ldr	r3, [pc, #24]	; (400898 <_ZN19HardwareSerialUsart17tx_empty_callbackEv+0x38>)
  400880:	4798      	blx	r3
		usart_write(usart_peripheral, data);
  400882:	f8d4 0230 	ldr.w	r0, [r4, #560]	; 0x230
  400886:	f89d 1007 	ldrb.w	r1, [sp, #7]
  40088a:	4b04      	ldr	r3, [pc, #16]	; (40089c <_ZN19HardwareSerialUsart17tx_empty_callbackEv+0x3c>)
  40088c:	4798      	blx	r3
	}
}
  40088e:	b002      	add	sp, #8
  400890:	bd10      	pop	{r4, pc}
  400892:	bf00      	nop
  400894:	00403c91 	.word	0x00403c91
  400898:	0040080d 	.word	0x0040080d
  40089c:	00403c99 	.word	0x00403c99

004008a0 <_GLOBAL__sub_I__ZN19HardwareSerialUsartC2EP5Usart>:
		return 0;
	}
}

HardwareSerialUsart Serial1 = HardwareSerialUsart(USART0);
HardwareSerialUsart Serial2 = HardwareSerialUsart(USART1);
  4008a0:	b410      	push	{r4}
  4008a2:	4b0b      	ldr	r3, [pc, #44]	; (4008d0 <_GLOBAL__sub_I__ZN19HardwareSerialUsartC2EP5Usart+0x30>)
  4008a4:	2000      	movs	r0, #0
  4008a6:	6058      	str	r0, [r3, #4]
  4008a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4008ac:	6099      	str	r1, [r3, #8]
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}

HardwareSerialUsart::HardwareSerialUsart(Usart* peripheral_pointer)
  4008ae:	4a09      	ldr	r2, [pc, #36]	; (4008d4 <_GLOBAL__sub_I__ZN19HardwareSerialUsartC2EP5Usart+0x34>)
  4008b0:	601a      	str	r2, [r3, #0]
{
	usart_peripheral = peripheral_pointer;
  4008b2:	4c09      	ldr	r4, [pc, #36]	; (4008d8 <_GLOBAL__sub_I__ZN19HardwareSerialUsartC2EP5Usart+0x38>)
  4008b4:	f8c3 4230 	str.w	r4, [r3, #560]	; 0x230
  4008b8:	f8c3 0238 	str.w	r0, [r3, #568]	; 0x238
  4008bc:	f8c3 123c 	str.w	r1, [r3, #572]	; 0x23c
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}

HardwareSerialUsart::HardwareSerialUsart(Usart* peripheral_pointer)
  4008c0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
{
	usart_peripheral = peripheral_pointer;
  4008c4:	4a05      	ldr	r2, [pc, #20]	; (4008dc <_GLOBAL__sub_I__ZN19HardwareSerialUsartC2EP5Usart+0x3c>)
  4008c6:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
		return 0;
	}
}

HardwareSerialUsart Serial1 = HardwareSerialUsart(USART0);
HardwareSerialUsart Serial2 = HardwareSerialUsart(USART1);
  4008ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4008ce:	4770      	bx	lr
  4008d0:	20000dfc 	.word	0x20000dfc
  4008d4:	00404f60 	.word	0x00404f60
  4008d8:	40024000 	.word	0x40024000
  4008dc:	40028000 	.word	0x40028000

004008e0 <internal_timer_configure>:
#include "internal_timer.h"

volatile uint32_t ms_counter;

void internal_timer_configure(uint32_t hertz)
{
  4008e0:	b570      	push	{r4, r5, r6, lr}
  4008e2:	b084      	sub	sp, #16
  4008e4:	4606      	mov	r6, r0
	uint32_t div;
	uint32_t tcclks;
	uint32_t sysclk = sysclk_get_cpu_hz();
	uint32_t counts;

	pmc_enable_periph_clk(ID_TC0);
  4008e6:	2017      	movs	r0, #23
  4008e8:	4b16      	ldr	r3, [pc, #88]	; (400944 <internal_timer_configure+0x64>)
  4008ea:	4798      	blx	r3

	tc_find_mck_divisor(hertz, sysclk, &div, &tcclks, sysclk);
  4008ec:	4c16      	ldr	r4, [pc, #88]	; (400948 <internal_timer_configure+0x68>)
  4008ee:	9400      	str	r4, [sp, #0]
  4008f0:	4630      	mov	r0, r6
  4008f2:	4621      	mov	r1, r4
  4008f4:	aa02      	add	r2, sp, #8
  4008f6:	ab03      	add	r3, sp, #12
  4008f8:	4d14      	ldr	r5, [pc, #80]	; (40094c <internal_timer_configure+0x6c>)
  4008fa:	47a8      	blx	r5

	tc_init(INTERNAL_TIMER, INTERNAL_TIMER_CHANNEL, tcclks | TC_CMR_CPCTRG);
  4008fc:	4d14      	ldr	r5, [pc, #80]	; (400950 <internal_timer_configure+0x70>)
  4008fe:	4628      	mov	r0, r5
  400900:	2100      	movs	r1, #0
  400902:	9a03      	ldr	r2, [sp, #12]
  400904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  400908:	4b12      	ldr	r3, [pc, #72]	; (400954 <internal_timer_configure+0x74>)
  40090a:	4798      	blx	r3

	//find the number of timer counter counts to use to generate timer
	counts = (sysclk / div) / hertz;
  40090c:	9a02      	ldr	r2, [sp, #8]
  40090e:	fbb4 f2f2 	udiv	r2, r4, r2
	tc_write_rc(INTERNAL_TIMER, INTERNAL_TIMER_CHANNEL, counts);
  400912:	4628      	mov	r0, r5
  400914:	2100      	movs	r1, #0
  400916:	fbb2 f2f6 	udiv	r2, r2, r6
  40091a:	4b0f      	ldr	r3, [pc, #60]	; (400958 <internal_timer_configure+0x78>)
  40091c:	4798      	blx	r3

	//reset our internal ms counter
	ms_counter = 0;
  40091e:	2400      	movs	r4, #0
  400920:	4b0e      	ldr	r3, [pc, #56]	; (40095c <internal_timer_configure+0x7c>)
  400922:	601c      	str	r4, [r3, #0]

	//enable interrupts
	tc_enable_interrupt(INTERNAL_TIMER, INTERNAL_TIMER_CHANNEL, TC_IER_CPCS);
  400924:	4628      	mov	r0, r5
  400926:	4621      	mov	r1, r4
  400928:	2210      	movs	r2, #16
  40092a:	4b0d      	ldr	r3, [pc, #52]	; (400960 <internal_timer_configure+0x80>)
  40092c:	4798      	blx	r3
  40092e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400932:	4b0c      	ldr	r3, [pc, #48]	; (400964 <internal_timer_configure+0x84>)
  400934:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(TC0_IRQn);
	tc_start(INTERNAL_TIMER, INTERNAL_TIMER_CHANNEL);
  400936:	4628      	mov	r0, r5
  400938:	4621      	mov	r1, r4
  40093a:	4b0b      	ldr	r3, [pc, #44]	; (400968 <internal_timer_configure+0x88>)
  40093c:	4798      	blx	r3

}
  40093e:	b004      	add	sp, #16
  400940:	bd70      	pop	{r4, r5, r6, pc}
  400942:	bf00      	nop
  400944:	00403a2d 	.word	0x00403a2d
  400948:	07270e00 	.word	0x07270e00
  40094c:	00401be5 	.word	0x00401be5
  400950:	40010000 	.word	0x40010000
  400954:	00401ba9 	.word	0x00401ba9
  400958:	00401bcd 	.word	0x00401bcd
  40095c:	2000126c 	.word	0x2000126c
  400960:	00401bd5 	.word	0x00401bd5
  400964:	e000e100 	.word	0xe000e100
  400968:	00401bc5 	.word	0x00401bc5

0040096c <delay>:

void delay(uint32_t ms_delay)
{
	//get current counter value
	uint32_t current_value = ms_counter;
  40096c:	4b05      	ldr	r3, [pc, #20]	; (400984 <delay+0x18>)
  40096e:	681b      	ldr	r3, [r3, #0]
	uint32_t wait_till_value = 0;

	//to wait accordingly, we need to figure out if we will encounter overflow
	//in the timer during this delay.  So we check for this condition first
	if(UINT32_MAX - ms_delay < current_value)
  400970:	43c2      	mvns	r2, r0
  400972:	4293      	cmp	r3, r2
  400974:	bf88      	it	hi
  400976:	3301      	addhi	r3, #1
		//this means overflow will happen in our counter
		wait_till_value = current_value - (UINT32_MAX - ms_delay);
	}
	else
	{
		wait_till_value = current_value + ms_delay;
  400978:	4418      	add	r0, r3
	}
	
	//wait till the value is hit as a "delay"
	while(ms_counter != wait_till_value);
  40097a:	4a02      	ldr	r2, [pc, #8]	; (400984 <delay+0x18>)
  40097c:	6813      	ldr	r3, [r2, #0]
  40097e:	4283      	cmp	r3, r0
  400980:	d1fc      	bne.n	40097c <delay+0x10>
	
}
  400982:	4770      	bx	lr
  400984:	2000126c 	.word	0x2000126c

00400988 <TC0_Handler>:
{
	return ms_counter;
}

void TC0_Handler()
{
  400988:	b508      	push	{r3, lr}
	uint32_t status = tc_get_status(INTERNAL_TIMER, INTERNAL_TIMER_CHANNEL);
  40098a:	480a      	ldr	r0, [pc, #40]	; (4009b4 <TC0_Handler+0x2c>)
  40098c:	2100      	movs	r1, #0
  40098e:	4b0a      	ldr	r3, [pc, #40]	; (4009b8 <TC0_Handler+0x30>)
  400990:	4798      	blx	r3
	
	//if the interrupt is on this
	if(status & TC_SR_CPCS)
  400992:	f010 0f10 	tst.w	r0, #16
  400996:	d00c      	beq.n	4009b2 <TC0_Handler+0x2a>
	{
		if(ms_counter == UINT32_MAX)
  400998:	4b08      	ldr	r3, [pc, #32]	; (4009bc <TC0_Handler+0x34>)
  40099a:	681b      	ldr	r3, [r3, #0]
  40099c:	f1b3 3fff 	cmp.w	r3, #4294967295
  4009a0:	d103      	bne.n	4009aa <TC0_Handler+0x22>
		{
			ms_counter = 0;
  4009a2:	2200      	movs	r2, #0
  4009a4:	4b05      	ldr	r3, [pc, #20]	; (4009bc <TC0_Handler+0x34>)
  4009a6:	601a      	str	r2, [r3, #0]
  4009a8:	bd08      	pop	{r3, pc}
		}
		else
		{
			ms_counter++;
  4009aa:	4a04      	ldr	r2, [pc, #16]	; (4009bc <TC0_Handler+0x34>)
  4009ac:	6813      	ldr	r3, [r2, #0]
  4009ae:	3301      	adds	r3, #1
  4009b0:	6013      	str	r3, [r2, #0]
  4009b2:	bd08      	pop	{r3, pc}
  4009b4:	40010000 	.word	0x40010000
  4009b8:	00401bdd 	.word	0x00401bdd
  4009bc:	2000126c 	.word	0x2000126c

004009c0 <UART0_Handler>:

extern HardwareSerialUart Serial3;
extern HardwareSerialUart Serial4;

void UART0_Handler()
{
  4009c0:	b510      	push	{r4, lr}
	uint32_t uart_status = uart_get_status(UART0);
  4009c2:	4808      	ldr	r0, [pc, #32]	; (4009e4 <UART0_Handler+0x24>)
  4009c4:	4b08      	ldr	r3, [pc, #32]	; (4009e8 <UART0_Handler+0x28>)
  4009c6:	4798      	blx	r3
  4009c8:	4604      	mov	r4, r0
	if(uart_status & UART_SR_RXRDY)
  4009ca:	f010 0f01 	tst.w	r0, #1
  4009ce:	d002      	beq.n	4009d6 <UART0_Handler+0x16>
	{
		//uint8_t data;
		//uart_read(UART0, &data);
		Serial3.rx_ready_callback();
  4009d0:	4806      	ldr	r0, [pc, #24]	; (4009ec <UART0_Handler+0x2c>)
  4009d2:	4b07      	ldr	r3, [pc, #28]	; (4009f0 <UART0_Handler+0x30>)
  4009d4:	4798      	blx	r3
	}
	
	if(uart_status & UART_SR_TXEMPTY)
  4009d6:	f414 7f00 	tst.w	r4, #512	; 0x200
  4009da:	d002      	beq.n	4009e2 <UART0_Handler+0x22>
	{
		Serial3.tx_empty_callback();
  4009dc:	4803      	ldr	r0, [pc, #12]	; (4009ec <UART0_Handler+0x2c>)
  4009de:	4b05      	ldr	r3, [pc, #20]	; (4009f4 <UART0_Handler+0x34>)
  4009e0:	4798      	blx	r3
  4009e2:	bd10      	pop	{r4, pc}
  4009e4:	400e0600 	.word	0x400e0600
  4009e8:	00401cf1 	.word	0x00401cf1
  4009ec:	20000994 	.word	0x20000994
  4009f0:	004003b5 	.word	0x004003b5
  4009f4:	00400361 	.word	0x00400361

004009f8 <UART1_Handler>:
	}
}

void UART1_Handler()
{
  4009f8:	b510      	push	{r4, lr}
	uint32_t uart_status = uart_get_status(UART0);
  4009fa:	4808      	ldr	r0, [pc, #32]	; (400a1c <UART1_Handler+0x24>)
  4009fc:	4b08      	ldr	r3, [pc, #32]	; (400a20 <UART1_Handler+0x28>)
  4009fe:	4798      	blx	r3
  400a00:	4604      	mov	r4, r0
	if(uart_status & UART_SR_RXRDY)
  400a02:	f010 0f01 	tst.w	r0, #1
  400a06:	d002      	beq.n	400a0e <UART1_Handler+0x16>
	{
		//uint8_t data;
		//uart_read(UART0, &data);
		Serial4.rx_ready_callback();
  400a08:	4806      	ldr	r0, [pc, #24]	; (400a24 <UART1_Handler+0x2c>)
  400a0a:	4b07      	ldr	r3, [pc, #28]	; (400a28 <UART1_Handler+0x30>)
  400a0c:	4798      	blx	r3
	}
	
	if(uart_status & UART_SR_TXEMPTY)
  400a0e:	f414 7f00 	tst.w	r4, #512	; 0x200
  400a12:	d002      	beq.n	400a1a <UART1_Handler+0x22>
	{
		Serial4.tx_empty_callback();
  400a14:	4803      	ldr	r0, [pc, #12]	; (400a24 <UART1_Handler+0x2c>)
  400a16:	4b05      	ldr	r3, [pc, #20]	; (400a2c <UART1_Handler+0x34>)
  400a18:	4798      	blx	r3
  400a1a:	bd10      	pop	{r4, pc}
  400a1c:	400e0600 	.word	0x400e0600
  400a20:	00401cf1 	.word	0x00401cf1
  400a24:	20000bc4 	.word	0x20000bc4
  400a28:	004003b5 	.word	0x004003b5
  400a2c:	00400361 	.word	0x00400361

00400a30 <USART0_Handler>:
	}
}

void USART0_Handler()
{
  400a30:	b510      	push	{r4, lr}
	uint32_t usart_status = usart_get_status(USART0);
  400a32:	4808      	ldr	r0, [pc, #32]	; (400a54 <USART0_Handler+0x24>)
  400a34:	4b08      	ldr	r3, [pc, #32]	; (400a58 <USART0_Handler+0x28>)
  400a36:	4798      	blx	r3
  400a38:	4604      	mov	r4, r0
	if(usart_status & US_CSR_RXRDY)
  400a3a:	f010 0f01 	tst.w	r0, #1
  400a3e:	d002      	beq.n	400a46 <USART0_Handler+0x16>
	{
		Serial1.rx_ready_callback();
  400a40:	4806      	ldr	r0, [pc, #24]	; (400a5c <USART0_Handler+0x2c>)
  400a42:	4b07      	ldr	r3, [pc, #28]	; (400a60 <USART0_Handler+0x30>)
  400a44:	4798      	blx	r3
	}
	
	if(usart_status & US_CSR_TXRDY)
  400a46:	f014 0f02 	tst.w	r4, #2
  400a4a:	d002      	beq.n	400a52 <USART0_Handler+0x22>
	{
		Serial1.tx_empty_callback();
  400a4c:	4803      	ldr	r0, [pc, #12]	; (400a5c <USART0_Handler+0x2c>)
  400a4e:	4b05      	ldr	r3, [pc, #20]	; (400a64 <USART0_Handler+0x34>)
  400a50:	4798      	blx	r3
  400a52:	bd10      	pop	{r4, pc}
  400a54:	40024000 	.word	0x40024000
  400a58:	00403c95 	.word	0x00403c95
  400a5c:	20000dfc 	.word	0x20000dfc
  400a60:	004006c1 	.word	0x004006c1
  400a64:	00400861 	.word	0x00400861

00400a68 <USART1_Handler>:
	}
}

void USART1_Handler()
{
  400a68:	b510      	push	{r4, lr}
	uint32_t usart_status = usart_get_status(USART1);
  400a6a:	4808      	ldr	r0, [pc, #32]	; (400a8c <USART1_Handler+0x24>)
  400a6c:	4b08      	ldr	r3, [pc, #32]	; (400a90 <USART1_Handler+0x28>)
  400a6e:	4798      	blx	r3
  400a70:	4604      	mov	r4, r0
	if(usart_status & US_CSR_RXRDY)
  400a72:	f010 0f01 	tst.w	r0, #1
  400a76:	d002      	beq.n	400a7e <USART1_Handler+0x16>
	{
		Serial2.rx_ready_callback();
  400a78:	4806      	ldr	r0, [pc, #24]	; (400a94 <USART1_Handler+0x2c>)
  400a7a:	4b07      	ldr	r3, [pc, #28]	; (400a98 <USART1_Handler+0x30>)
  400a7c:	4798      	blx	r3
	}
	
	if(usart_status & US_CSR_TXRDY)
  400a7e:	f014 0f02 	tst.w	r4, #2
  400a82:	d002      	beq.n	400a8a <USART1_Handler+0x22>
	{
		Serial2.tx_empty_callback();
  400a84:	4803      	ldr	r0, [pc, #12]	; (400a94 <USART1_Handler+0x2c>)
  400a86:	4b05      	ldr	r3, [pc, #20]	; (400a9c <USART1_Handler+0x34>)
  400a88:	4798      	blx	r3
  400a8a:	bd10      	pop	{r4, pc}
  400a8c:	40028000 	.word	0x40028000
  400a90:	00403c95 	.word	0x00403c95
  400a94:	20001030 	.word	0x20001030
  400a98:	004006c1 	.word	0x004006c1
  400a9c:	00400861 	.word	0x00400861

00400aa0 <main>:
//extern void setup(void);
//extern void loop(void);

int main (void)
//extern "C" int main(void)
{
  400aa0:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  400aa2:	4b04      	ldr	r3, [pc, #16]	; (400ab4 <main+0x14>)
  400aa4:	4798      	blx	r3
	sysclk_init();
  400aa6:	4b04      	ldr	r3, [pc, #16]	; (400ab8 <main+0x18>)
  400aa8:	4798      	blx	r3

	//call Arduino setup function
	setup();
  400aaa:	4b04      	ldr	r3, [pc, #16]	; (400abc <main+0x1c>)
  400aac:	4798      	blx	r3

	while(1)
	{
		//call Arduino loop function
		loop();
  400aae:	4c04      	ldr	r4, [pc, #16]	; (400ac0 <main+0x20>)
  400ab0:	47a0      	blx	r4
//usb_serial Serial;

//extern void setup(void);
//extern void loop(void);

int main (void)
  400ab2:	e7fd      	b.n	400ab0 <main+0x10>
  400ab4:	00403b19 	.word	0x00403b19
  400ab8:	00403735 	.word	0x00403735
  400abc:	00400129 	.word	0x00400129
  400ac0:	004001f1 	.word	0x004001f1

00400ac4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  400ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t n = 0;
  while (size--) {
  400ac6:	b172      	cbz	r2, 400ae6 <_ZN5Print5writeEPKhj+0x22>
  400ac8:	4605      	mov	r5, r0
  400aca:	460e      	mov	r6, r1
  400acc:	4617      	mov	r7, r2
  400ace:	2400      	movs	r4, #0
    if (write(*buffer++)) n++;
  400ad0:	682b      	ldr	r3, [r5, #0]
  400ad2:	681b      	ldr	r3, [r3, #0]
  400ad4:	4628      	mov	r0, r5
  400ad6:	f816 1b01 	ldrb.w	r1, [r6], #1
  400ada:	4798      	blx	r3
  400adc:	b120      	cbz	r0, 400ae8 <_ZN5Print5writeEPKhj+0x24>
  400ade:	3401      	adds	r4, #1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
  400ae0:	42a7      	cmp	r7, r4
  400ae2:	d1f5      	bne.n	400ad0 <_ZN5Print5writeEPKhj+0xc>
  400ae4:	e000      	b.n	400ae8 <_ZN5Print5writeEPKhj+0x24>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  400ae6:	2400      	movs	r4, #0
  while (size--) {
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
  400ae8:	4620      	mov	r0, r4
  400aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00400aec <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
  400aec:	b161      	cbz	r1, 400b08 <_ZN5Print5printEPKc+0x1c>
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  400aee:	b538      	push	{r3, r4, r5, lr}
  400af0:	460c      	mov	r4, r1
  400af2:	4605      	mov	r5, r0
      return write((const uint8_t *)str, strlen(str));
  400af4:	4608      	mov	r0, r1
  400af6:	4b05      	ldr	r3, [pc, #20]	; (400b0c <_ZN5Print5printEPKc+0x20>)
  400af8:	4798      	blx	r3
  400afa:	4602      	mov	r2, r0
  400afc:	682b      	ldr	r3, [r5, #0]
  400afe:	685b      	ldr	r3, [r3, #4]
  400b00:	4628      	mov	r0, r5
  400b02:	4621      	mov	r1, r4
  400b04:	4798      	blx	r3
  400b06:	bd38      	pop	{r3, r4, r5, pc}
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
  400b08:	2000      	movs	r0, #0
  400b0a:	4770      	bx	lr
  400b0c:	004046b5 	.word	0x004046b5

00400b10 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  400b10:	b508      	push	{r3, lr}
  return write(c);
  400b12:	6803      	ldr	r3, [r0, #0]
  400b14:	681b      	ldr	r3, [r3, #0]
  400b16:	4798      	blx	r3
}
  400b18:	bd08      	pop	{r3, pc}
  400b1a:	bf00      	nop

00400b1c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
  400b1c:	b508      	push	{r3, lr}
      return write((const uint8_t *)str, strlen(str));
  400b1e:	6803      	ldr	r3, [r0, #0]
  400b20:	685b      	ldr	r3, [r3, #4]
  400b22:	4902      	ldr	r1, [pc, #8]	; (400b2c <_ZN5Print7printlnEv+0x10>)
  400b24:	2202      	movs	r2, #2
  400b26:	4798      	blx	r3
  return write("\r\n");
}
  400b28:	bd08      	pop	{r3, pc}
  400b2a:	bf00      	nop
  400b2c:	00404f78 	.word	0x00404f78

00400b30 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
  400b30:	b538      	push	{r3, r4, r5, lr}
  400b32:	4605      	mov	r5, r0
  size_t n = print(c);
  400b34:	4b03      	ldr	r3, [pc, #12]	; (400b44 <_ZN5Print7printlnEPKc+0x14>)
  400b36:	4798      	blx	r3
  400b38:	4604      	mov	r4, r0
  n += println();
  400b3a:	4628      	mov	r0, r5
  400b3c:	4b02      	ldr	r3, [pc, #8]	; (400b48 <_ZN5Print7printlnEPKc+0x18>)
  400b3e:	4798      	blx	r3
  return n;
}
  400b40:	4420      	add	r0, r4
  400b42:	bd38      	pop	{r3, r4, r5, pc}
  400b44:	00400aed 	.word	0x00400aed
  400b48:	00400b1d 	.word	0x00400b1d

00400b4c <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
  400b4c:	b538      	push	{r3, r4, r5, lr}
  400b4e:	4605      	mov	r5, r0
  size_t n = print(c);
  400b50:	4b03      	ldr	r3, [pc, #12]	; (400b60 <_ZN5Print7printlnEc+0x14>)
  400b52:	4798      	blx	r3
  400b54:	4604      	mov	r4, r0
  n += println();
  400b56:	4628      	mov	r0, r5
  400b58:	4b02      	ldr	r3, [pc, #8]	; (400b64 <_ZN5Print7printlnEc+0x18>)
  400b5a:	4798      	blx	r3
  return n;
}
  400b5c:	4420      	add	r0, r4
  400b5e:	bd38      	pop	{r3, r4, r5, pc}
  400b60:	00400b11 	.word	0x00400b11
  400b64:	00400b1d 	.word	0x00400b1d

00400b68 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
  400b68:	b530      	push	{r4, r5, lr}
  400b6a:	b08b      	sub	sp, #44	; 0x2c
  400b6c:	4604      	mov	r4, r0
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
  400b6e:	2300      	movs	r3, #0
  400b70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
  400b74:	2a01      	cmp	r2, #1
  400b76:	bf98      	it	ls
  400b78:	220a      	movls	r2, #10
  400b7a:	f10d 0023 	add.w	r0, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
  400b7e:	fbb1 f3f2 	udiv	r3, r1, r2
    char c = m - base * n;
  400b82:	fb03 1112 	mls	r1, r3, r2, r1
  400b86:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  400b8a:	4605      	mov	r5, r0
  400b8c:	2909      	cmp	r1, #9
  400b8e:	bf94      	ite	ls
  400b90:	3130      	addls	r1, #48	; 0x30
  400b92:	3137      	addhi	r1, #55	; 0x37
  400b94:	b2c9      	uxtb	r1, r1
  400b96:	7001      	strb	r1, [r0, #0]
  400b98:	3801      	subs	r0, #1
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
  400b9a:	4619      	mov	r1, r3
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
  400b9c:	2b00      	cmp	r3, #0
  400b9e:	d1ee      	bne.n	400b7e <_ZN5Print11printNumberEmh+0x16>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
  400ba0:	b14d      	cbz	r5, 400bb6 <_ZN5Print11printNumberEmh+0x4e>
      return write((const uint8_t *)str, strlen(str));
  400ba2:	4628      	mov	r0, r5
  400ba4:	4b05      	ldr	r3, [pc, #20]	; (400bbc <_ZN5Print11printNumberEmh+0x54>)
  400ba6:	4798      	blx	r3
  400ba8:	4602      	mov	r2, r0
  400baa:	6823      	ldr	r3, [r4, #0]
  400bac:	685b      	ldr	r3, [r3, #4]
  400bae:	4620      	mov	r0, r4
  400bb0:	4629      	mov	r1, r5
  400bb2:	4798      	blx	r3
  400bb4:	e000      	b.n	400bb8 <_ZN5Print11printNumberEmh+0x50>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
  400bb6:	2000      	movs	r0, #0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
  400bb8:	b00b      	add	sp, #44	; 0x2c
  400bba:	bd30      	pop	{r4, r5, pc}
  400bbc:	004046b5 	.word	0x004046b5

00400bc0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
  400bc0:	b570      	push	{r4, r5, r6, lr}
  400bc2:	4605      	mov	r5, r0
  400bc4:	460c      	mov	r4, r1
  if (base == 0) {
  400bc6:	b922      	cbnz	r2, 400bd2 <_ZN5Print5printEli+0x12>
    return write(n);
  400bc8:	6803      	ldr	r3, [r0, #0]
  400bca:	681b      	ldr	r3, [r3, #0]
  400bcc:	b2c9      	uxtb	r1, r1
  400bce:	4798      	blx	r3
  400bd0:	bd70      	pop	{r4, r5, r6, pc}
  } else if (base == 10) {
  400bd2:	2a0a      	cmp	r2, #10
  400bd4:	d110      	bne.n	400bf8 <_ZN5Print5printEli+0x38>
    if (n < 0) {
  400bd6:	2900      	cmp	r1, #0
  400bd8:	da0a      	bge.n	400bf0 <_ZN5Print5printEli+0x30>
      int t = print('-');
  400bda:	212d      	movs	r1, #45	; 0x2d
  400bdc:	4b08      	ldr	r3, [pc, #32]	; (400c00 <_ZN5Print5printEli+0x40>)
  400bde:	4798      	blx	r3
  400be0:	4606      	mov	r6, r0
      n = -n;
      return printNumber(n, 10) + t;
  400be2:	4628      	mov	r0, r5
  400be4:	4261      	negs	r1, r4
  400be6:	220a      	movs	r2, #10
  400be8:	4b06      	ldr	r3, [pc, #24]	; (400c04 <_ZN5Print5printEli+0x44>)
  400bea:	4798      	blx	r3
  400bec:	4430      	add	r0, r6
  400bee:	bd70      	pop	{r4, r5, r6, pc}
    }
    return printNumber(n, 10);
  400bf0:	220a      	movs	r2, #10
  400bf2:	4b04      	ldr	r3, [pc, #16]	; (400c04 <_ZN5Print5printEli+0x44>)
  400bf4:	4798      	blx	r3
  400bf6:	bd70      	pop	{r4, r5, r6, pc}
  } else {
    return printNumber(n, base);
  400bf8:	b2d2      	uxtb	r2, r2
  400bfa:	4b02      	ldr	r3, [pc, #8]	; (400c04 <_ZN5Print5printEli+0x44>)
  400bfc:	4798      	blx	r3
  }
}
  400bfe:	bd70      	pop	{r4, r5, r6, pc}
  400c00:	00400b11 	.word	0x00400b11
  400c04:	00400b69 	.word	0x00400b69

00400c08 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  400c08:	b508      	push	{r3, lr}
  return print((long) n, base);
  400c0a:	4b01      	ldr	r3, [pc, #4]	; (400c10 <_ZN5Print5printEii+0x8>)
  400c0c:	4798      	blx	r3
}
  400c0e:	bd08      	pop	{r3, pc}
  400c10:	00400bc1 	.word	0x00400bc1

00400c14 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
  400c14:	b538      	push	{r3, r4, r5, lr}
  400c16:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
  400c18:	4b03      	ldr	r3, [pc, #12]	; (400c28 <_ZN5Print7printlnEii+0x14>)
  400c1a:	4798      	blx	r3
  400c1c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  400c1e:	4628      	mov	r0, r5
  400c20:	4b02      	ldr	r3, [pc, #8]	; (400c2c <_ZN5Print7printlnEii+0x18>)
  400c22:	4798      	blx	r3
  return n;
}
  400c24:	4420      	add	r0, r4
  400c26:	bd38      	pop	{r3, r4, r5, pc}
  400c28:	00400bc1 	.word	0x00400bc1
  400c2c:	00400b1d 	.word	0x00400b1d

00400c30 <_ZN10usb_serialD1Ev>:
} //usb_serial

// default destructor
usb_serial::~usb_serial()
{
} //~usb_serial
  400c30:	4770      	bx	lr
  400c32:	bf00      	nop

00400c34 <_ZN10usb_serial9availableEv>:
}

int usb_serial::available(void)
{
	return rx_buffer_size;
}
  400c34:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
  400c38:	4770      	bx	lr
  400c3a:	bf00      	nop

00400c3c <_ZN10usb_serial4peekEv>:
	}
}

int usb_serial::peek(void)
{
	return (*rx_buffer_head);
  400c3c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
}
  400c40:	7818      	ldrb	r0, [r3, #0]
  400c42:	4770      	bx	lr

00400c44 <_ZN10usb_serial5flushEv>:

void usb_serial::flush(void)
{
  400c44:	4770      	bx	lr
  400c46:	bf00      	nop

00400c48 <_ZN10usb_serial5writeEh>:
	//TODO: actually clear the buffers
}

size_t usb_serial::write(uint8_t data)
{
  400c48:	b538      	push	{r3, r4, r5, lr}
  400c4a:	460d      	mov	r5, r1
	while(udi_cdc_is_tx_ready() == 0); //wait for tx to be ready to send
  400c4c:	4c03      	ldr	r4, [pc, #12]	; (400c5c <_ZN10usb_serial5writeEh+0x14>)
  400c4e:	47a0      	blx	r4
  400c50:	2800      	cmp	r0, #0
  400c52:	d0fc      	beq.n	400c4e <_ZN10usb_serial5writeEh+0x6>
	return udi_cdc_putc(data & 0xff);
  400c54:	4628      	mov	r0, r5
  400c56:	4b02      	ldr	r3, [pc, #8]	; (400c60 <_ZN10usb_serial5writeEh+0x18>)
  400c58:	4798      	blx	r3
}
  400c5a:	bd38      	pop	{r3, r4, r5, pc}
  400c5c:	004013a9 	.word	0x004013a9
  400c60:	00401449 	.word	0x00401449

00400c64 <_ZN10usb_serial5writeEPKhj>:

size_t usb_serial::write(const uint8_t* buffer, size_t bufferLength)
{
  400c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int bytesSent = 0;
	for(size_t i = 0; i < bufferLength; i++)
  400c68:	b182      	cbz	r2, 400c8c <_ZN10usb_serial5writeEPKhj+0x28>
  400c6a:	4690      	mov	r8, r2
  400c6c:	460f      	mov	r7, r1
  400c6e:	2600      	movs	r6, #0
  400c70:	4635      	mov	r5, r6
	{
		//bytesSent += udi_cdc_putc(buffer[bytesSent]);
		while(udi_cdc_is_tx_ready() == 0); //wait for tx to be ready to send
  400c72:	4c08      	ldr	r4, [pc, #32]	; (400c94 <_ZN10usb_serial5writeEPKhj+0x30>)
		bytesSent += udi_cdc_putc(buffer[bytesSent]);
  400c74:	f8df 9020 	ldr.w	r9, [pc, #32]	; 400c98 <_ZN10usb_serial5writeEPKhj+0x34>
{
	int bytesSent = 0;
	for(size_t i = 0; i < bufferLength; i++)
	{
		//bytesSent += udi_cdc_putc(buffer[bytesSent]);
		while(udi_cdc_is_tx_ready() == 0); //wait for tx to be ready to send
  400c78:	47a0      	blx	r4
  400c7a:	2800      	cmp	r0, #0
  400c7c:	d0fc      	beq.n	400c78 <_ZN10usb_serial5writeEPKhj+0x14>
		bytesSent += udi_cdc_putc(buffer[bytesSent]);
  400c7e:	5d78      	ldrb	r0, [r7, r5]
  400c80:	47c8      	blx	r9
  400c82:	4405      	add	r5, r0
}

size_t usb_serial::write(const uint8_t* buffer, size_t bufferLength)
{
	int bytesSent = 0;
	for(size_t i = 0; i < bufferLength; i++)
  400c84:	3601      	adds	r6, #1
  400c86:	4546      	cmp	r6, r8
  400c88:	d1f6      	bne.n	400c78 <_ZN10usb_serial5writeEPKhj+0x14>
  400c8a:	e000      	b.n	400c8e <_ZN10usb_serial5writeEPKhj+0x2a>
	return udi_cdc_putc(data & 0xff);
}

size_t usb_serial::write(const uint8_t* buffer, size_t bufferLength)
{
	int bytesSent = 0;
  400c8c:	2500      	movs	r5, #0
		//bytesSent += udi_cdc_putc(buffer[bytesSent]);
		while(udi_cdc_is_tx_ready() == 0); //wait for tx to be ready to send
		bytesSent += udi_cdc_putc(buffer[bytesSent]);
	}
	return bytesSent;
}
  400c8e:	4628      	mov	r0, r5
  400c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c94:	004013a9 	.word	0x004013a9
  400c98:	00401449 	.word	0x00401449

00400c9c <_ZN10usb_serialC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
  400c9c:	2200      	movs	r2, #0
  400c9e:	6042      	str	r2, [r0, #4]
  400ca0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  400ca4:	6081      	str	r1, [r0, #8]
#include "usb_serial.h"

usb_serial Serial;

// default constructor
usb_serial::usb_serial()
  400ca6:	4907      	ldr	r1, [pc, #28]	; (400cc4 <_ZN10usb_serialC1Ev+0x28>)
  400ca8:	6001      	str	r1, [r0, #0]
{
	rx_buffer_end = &rx_buffer[USB_SERIAL_BUFFER_SIZE - 1];
  400caa:	f200 110f 	addw	r1, r0, #271	; 0x10f
  400cae:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
	rx_buffer_head = rx_buffer;
  400cb2:	f100 0110 	add.w	r1, r0, #16
  400cb6:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
	rx_buffer_tail = rx_buffer;
  400cba:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
	rx_buffer_size = 0;
  400cbe:	f880 211c 	strb.w	r2, [r0, #284]	; 0x11c
} //usb_serial
  400cc2:	4770      	bx	lr
  400cc4:	00404f98 	.word	0x00404f98

00400cc8 <_ZN10usb_serial5beginEm>:
{
	return true;
}

void usb_serial::begin(unsigned long baud)
{
  400cc8:	b508      	push	{r3, lr}
	stdio_usb_init();
  400cca:	4b01      	ldr	r3, [pc, #4]	; (400cd0 <_ZN10usb_serial5beginEm+0x8>)
  400ccc:	4798      	blx	r3
  400cce:	bd08      	pop	{r3, pc}
  400cd0:	00401ae5 	.word	0x00401ae5

00400cd4 <_ZN10usb_serial17rx_buffer_enqueueEh>:

uint8_t usb_serial::rx_buffer_enqueue(uint8_t data)
{
	if(rx_buffer_size < USB_SERIAL_BUFFER_SIZE)
	{
		*rx_buffer_tail = data;
  400cd4:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
  400cd8:	7019      	strb	r1, [r3, #0]
		if(rx_buffer_tail == rx_buffer_end)
  400cda:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
  400cde:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
  400ce2:	4293      	cmp	r3, r2
		{
			rx_buffer_tail = rx_buffer;
  400ce4:	bf0c      	ite	eq
  400ce6:	f100 0310 	addeq.w	r3, r0, #16
		}
		else
		{
			rx_buffer_tail++;
  400cea:	3301      	addne	r3, #1
  400cec:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
		}
		rx_buffer_size++;
  400cf0:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
  400cf4:	3301      	adds	r3, #1
  400cf6:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
	}
	else
	{
		return 0;  //indicate the buffer was full
	}
}
  400cfa:	2001      	movs	r0, #1
  400cfc:	4770      	bx	lr
  400cfe:	bf00      	nop

00400d00 <_ZN10usb_serial11rx_callbackEv>:
	while(udi_cdc_is_tx_ready() == 0); //wait for tx to be ready to send
	return udi_cdc_putc(data & 0xff);
}

void usb_serial::rx_callback(void)
{
  400d00:	b510      	push	{r4, lr}
  400d02:	4604      	mov	r4, r0
	rx_buffer_enqueue(udi_cdc_getc());
  400d04:	4b03      	ldr	r3, [pc, #12]	; (400d14 <_ZN10usb_serial11rx_callbackEv+0x14>)
  400d06:	4798      	blx	r3
  400d08:	b2c1      	uxtb	r1, r0
  400d0a:	4620      	mov	r0, r4
  400d0c:	4b02      	ldr	r3, [pc, #8]	; (400d18 <_ZN10usb_serial11rx_callbackEv+0x18>)
  400d0e:	4798      	blx	r3
  400d10:	bd10      	pop	{r4, pc}
  400d12:	bf00      	nop
  400d14:	00401315 	.word	0x00401315
  400d18:	00400cd5 	.word	0x00400cd5

00400d1c <_ZN10usb_serial17rx_buffer_dequeueEPh>:
		return 0;  //indicate the buffer was full
	}
}

uint8_t usb_serial::rx_buffer_dequeue(uint8_t* data)
{
  400d1c:	4603      	mov	r3, r0
	if(rx_buffer_size > 0)
  400d1e:	f890 011c 	ldrb.w	r0, [r0, #284]	; 0x11c
  400d22:	b1a0      	cbz	r0, 400d4e <_ZN10usb_serial17rx_buffer_dequeueEPh+0x32>
	{
		*data = *rx_buffer_head;
  400d24:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  400d28:	7812      	ldrb	r2, [r2, #0]
  400d2a:	700a      	strb	r2, [r1, #0]
		if(rx_buffer_head == rx_buffer_end)
  400d2c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  400d30:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
  400d34:	428a      	cmp	r2, r1
		{
			rx_buffer_head = rx_buffer;
  400d36:	bf0c      	ite	eq
  400d38:	f103 0210 	addeq.w	r2, r3, #16
		}
		else
		{
			rx_buffer_head++;
  400d3c:	3201      	addne	r2, #1
  400d3e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		}
		rx_buffer_size--;
  400d42:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
  400d46:	3a01      	subs	r2, #1
  400d48:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
		return 1;
  400d4c:	2001      	movs	r0, #1
	}
	else
	{
		return 0;//indicate the buffer was empty
	}
}
  400d4e:	4770      	bx	lr

00400d50 <_ZN10usb_serial4readEv>:
{
	return rx_buffer_size;
}

int usb_serial::read(void)
{
  400d50:	b500      	push	{lr}
  400d52:	b083      	sub	sp, #12
	//return udi_cdc_getc();
	uint8_t data = 0;
  400d54:	2300      	movs	r3, #0
  400d56:	f88d 3007 	strb.w	r3, [sp, #7]
	if(rx_buffer_size > 0)
  400d5a:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
  400d5e:	b133      	cbz	r3, 400d6e <_ZN10usb_serial4readEv+0x1e>
	{
		rx_buffer_dequeue(&data);
  400d60:	f10d 0107 	add.w	r1, sp, #7
  400d64:	4b04      	ldr	r3, [pc, #16]	; (400d78 <_ZN10usb_serial4readEv+0x28>)
  400d66:	4798      	blx	r3
		return data;
  400d68:	f89d 0007 	ldrb.w	r0, [sp, #7]
  400d6c:	e001      	b.n	400d72 <_ZN10usb_serial4readEv+0x22>
	}
	else
	{
		return -1;
  400d6e:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
  400d72:	b003      	add	sp, #12
  400d74:	f85d fb04 	ldr.w	pc, [sp], #4
  400d78:	00400d1d 	.word	0x00400d1d

00400d7c <usb_serial_rx_notify>:
}


void usb_serial_rx_notify(uint8_t port)
{
	if(port == 0)
  400d7c:	b920      	cbnz	r0, 400d88 <usb_serial_rx_notify+0xc>
	}
}


void usb_serial_rx_notify(uint8_t port)
{
  400d7e:	b508      	push	{r3, lr}
	if(port == 0)
	{
		Serial.rx_callback();
  400d80:	4802      	ldr	r0, [pc, #8]	; (400d8c <usb_serial_rx_notify+0x10>)
  400d82:	4b03      	ldr	r3, [pc, #12]	; (400d90 <usb_serial_rx_notify+0x14>)
  400d84:	4798      	blx	r3
  400d86:	bd08      	pop	{r3, pc}
  400d88:	4770      	bx	lr
  400d8a:	bf00      	nop
  400d8c:	20001278 	.word	0x20001278
  400d90:	00400d01 	.word	0x00400d01

00400d94 <_GLOBAL__sub_I_Serial>:
	}
  400d94:	b510      	push	{r4, lr}
*/


#include "usb_serial.h"

usb_serial Serial;
  400d96:	4c05      	ldr	r4, [pc, #20]	; (400dac <_GLOBAL__sub_I_Serial+0x18>)
  400d98:	4620      	mov	r0, r4
  400d9a:	4b05      	ldr	r3, [pc, #20]	; (400db0 <_GLOBAL__sub_I_Serial+0x1c>)
  400d9c:	4798      	blx	r3
  400d9e:	4620      	mov	r0, r4
  400da0:	4904      	ldr	r1, [pc, #16]	; (400db4 <_GLOBAL__sub_I_Serial+0x20>)
  400da2:	4a05      	ldr	r2, [pc, #20]	; (400db8 <_GLOBAL__sub_I_Serial+0x24>)
  400da4:	4b05      	ldr	r3, [pc, #20]	; (400dbc <_GLOBAL__sub_I_Serial+0x28>)
  400da6:	4798      	blx	r3
  400da8:	bd10      	pop	{r4, pc}
  400daa:	bf00      	nop
  400dac:	20001278 	.word	0x20001278
  400db0:	00400c9d 	.word	0x00400c9d
  400db4:	00400c31 	.word	0x00400c31
  400db8:	20000000 	.word	0x20000000
  400dbc:	00403f41 	.word	0x00403f41

00400dc0 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
  400dc0:	490e      	ldr	r1, [pc, #56]	; (400dfc <udi_cdc_comm_enable+0x3c>)
  400dc2:	2300      	movs	r3, #0
  400dc4:	700b      	strb	r3, [r1, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
  400dc6:	4a0e      	ldr	r2, [pc, #56]	; (400e00 <udi_cdc_comm_enable+0x40>)
  400dc8:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
  400dca:	4a0e      	ldr	r2, [pc, #56]	; (400e04 <udi_cdc_comm_enable+0x44>)
  400dcc:	20a1      	movs	r0, #161	; 0xa1
  400dce:	7010      	strb	r0, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
  400dd0:	2020      	movs	r0, #32
  400dd2:	7050      	strb	r0, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
  400dd4:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
  400dd6:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
  400dd8:	2002      	movs	r0, #2
  400dda:	80d0      	strh	r0, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
  400ddc:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
  400dde:	4a0a      	ldr	r2, [pc, #40]	; (400e08 <udi_cdc_comm_enable+0x48>)
  400de0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
  400de4:	6010      	str	r0, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
  400de6:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
  400de8:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
  400dea:	2308      	movs	r3, #8
  400dec:	7193      	strb	r3, [r2, #6]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
  400dee:	780b      	ldrb	r3, [r1, #0]
  400df0:	3301      	adds	r3, #1
  400df2:	b2db      	uxtb	r3, r3
  400df4:	700b      	strb	r3, [r1, #0]
	return true;
}
  400df6:	2001      	movs	r0, #1
  400df8:	4770      	bx	lr
  400dfa:	bf00      	nop
  400dfc:	20001438 	.word	0x20001438
  400e00:	200014e0 	.word	0x200014e0
  400e04:	2000144c 	.word	0x2000144c
  400e08:	200013a0 	.word	0x200013a0

00400e0c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
  400e0c:	4a02      	ldr	r2, [pc, #8]	; (400e18 <udi_cdc_comm_disable+0xc>)
  400e0e:	7813      	ldrb	r3, [r2, #0]
  400e10:	3b01      	subs	r3, #1
  400e12:	b2db      	uxtb	r3, r3
  400e14:	7013      	strb	r3, [r2, #0]
  400e16:	4770      	bx	lr
  400e18:	20001438 	.word	0x20001438

00400e1c <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
  400e1c:	4a04      	ldr	r2, [pc, #16]	; (400e30 <udi_cdc_data_disable+0x14>)
  400e1e:	7813      	ldrb	r3, [r2, #0]
  400e20:	3b01      	subs	r3, #1
  400e22:	b2db      	uxtb	r3, r3
  400e24:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
  400e26:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
  400e28:	2200      	movs	r2, #0
  400e2a:	4b02      	ldr	r3, [pc, #8]	; (400e34 <udi_cdc_data_disable+0x18>)
  400e2c:	701a      	strb	r2, [r3, #0]
  400e2e:	4770      	bx	lr
  400e30:	200013a9 	.word	0x200013a9
  400e34:	20001442 	.word	0x20001442

00400e38 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
  400e38:	2000      	movs	r0, #0
  400e3a:	4770      	bx	lr

00400e3c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
  400e3c:	2000      	movs	r0, #0
  400e3e:	4770      	bx	lr

00400e40 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
  400e40:	4b1d      	ldr	r3, [pc, #116]	; (400eb8 <udi_cdc_comm_setup+0x78>)
  400e42:	781b      	ldrb	r3, [r3, #0]
  400e44:	f013 0f80 	tst.w	r3, #128	; 0x80
  400e48:	d012      	beq.n	400e70 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400e4e:	2b20      	cmp	r3, #32
  400e50:	d128      	bne.n	400ea4 <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  400e52:	4b19      	ldr	r3, [pc, #100]	; (400eb8 <udi_cdc_comm_setup+0x78>)
  400e54:	785b      	ldrb	r3, [r3, #1]
  400e56:	2b21      	cmp	r3, #33	; 0x21
  400e58:	d126      	bne.n	400ea8 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  400e5a:	4b17      	ldr	r3, [pc, #92]	; (400eb8 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400e5c:	88db      	ldrh	r3, [r3, #6]
  400e5e:	2b07      	cmp	r3, #7
  400e60:	d124      	bne.n	400eac <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
  400e62:	4b15      	ldr	r3, [pc, #84]	; (400eb8 <udi_cdc_comm_setup+0x78>)
  400e64:	4a15      	ldr	r2, [pc, #84]	; (400ebc <udi_cdc_comm_setup+0x7c>)
  400e66:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  400e68:	2207      	movs	r2, #7
  400e6a:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  400e6c:	2001      	movs	r0, #1
  400e6e:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400e70:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400e74:	2b20      	cmp	r3, #32
  400e76:	d11b      	bne.n	400eb0 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  400e78:	4b0f      	ldr	r3, [pc, #60]	; (400eb8 <udi_cdc_comm_setup+0x78>)
  400e7a:	7858      	ldrb	r0, [r3, #1]
  400e7c:	2820      	cmp	r0, #32
  400e7e:	d004      	beq.n	400e8a <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400e80:	2822      	cmp	r0, #34	; 0x22
  400e82:	bf14      	ite	ne
  400e84:	2000      	movne	r0, #0
  400e86:	2001      	moveq	r0, #1
  400e88:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
  400e8a:	4b0b      	ldr	r3, [pc, #44]	; (400eb8 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
  400e8c:	88db      	ldrh	r3, [r3, #6]
  400e8e:	2b07      	cmp	r3, #7
  400e90:	d110      	bne.n	400eb4 <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
  400e92:	4b09      	ldr	r3, [pc, #36]	; (400eb8 <udi_cdc_comm_setup+0x78>)
  400e94:	4a0a      	ldr	r2, [pc, #40]	; (400ec0 <udi_cdc_comm_setup+0x80>)
  400e96:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
  400e98:	4a08      	ldr	r2, [pc, #32]	; (400ebc <udi_cdc_comm_setup+0x7c>)
  400e9a:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
  400e9c:	2207      	movs	r2, #7
  400e9e:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
  400ea0:	2001      	movs	r0, #1
  400ea2:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400ea4:	2000      	movs	r0, #0
  400ea6:	4770      	bx	lr
  400ea8:	2000      	movs	r0, #0
  400eaa:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  400eac:	2000      	movs	r0, #0
  400eae:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
  400eb0:	2000      	movs	r0, #0
  400eb2:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
  400eb4:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
  400eb6:	4770      	bx	lr
  400eb8:	20001600 	.word	0x20001600
  400ebc:	200013a0 	.word	0x200013a0
  400ec0:	00400ec5 	.word	0x00400ec5

00400ec4 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
  400ec4:	4770      	bx	lr
  400ec6:	bf00      	nop

00400ec8 <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
  400ec8:	4b42      	ldr	r3, [pc, #264]	; (400fd4 <udi_cdc_tx_send+0x10c>)
  400eca:	781b      	ldrb	r3, [r3, #0]
  400ecc:	f013 0fff 	tst.w	r3, #255	; 0xff
  400ed0:	d17f      	bne.n	400fd2 <udi_cdc_tx_send+0x10a>
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
  400ed2:	b530      	push	{r4, r5, lr}
  400ed4:	b083      	sub	sp, #12
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
  400ed6:	4b40      	ldr	r3, [pc, #256]	; (400fd8 <udi_cdc_tx_send+0x110>)
  400ed8:	4798      	blx	r3
  400eda:	b130      	cbz	r0, 400eea <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
  400edc:	4b3f      	ldr	r3, [pc, #252]	; (400fdc <udi_cdc_tx_send+0x114>)
  400ede:	881c      	ldrh	r4, [r3, #0]
  400ee0:	4b3f      	ldr	r3, [pc, #252]	; (400fe0 <udi_cdc_tx_send+0x118>)
  400ee2:	4798      	blx	r3
  400ee4:	4284      	cmp	r4, r0
  400ee6:	d106      	bne.n	400ef6 <udi_cdc_tx_send+0x2e>
  400ee8:	e071      	b.n	400fce <udi_cdc_tx_send+0x106>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
  400eea:	4b3c      	ldr	r3, [pc, #240]	; (400fdc <udi_cdc_tx_send+0x114>)
  400eec:	881c      	ldrh	r4, [r3, #0]
  400eee:	4b3d      	ldr	r3, [pc, #244]	; (400fe4 <udi_cdc_tx_send+0x11c>)
  400ef0:	4798      	blx	r3
  400ef2:	4284      	cmp	r4, r0
  400ef4:	d06b      	beq.n	400fce <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400ef6:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  400efa:	fab5 f585 	clz	r5, r5
  400efe:	096d      	lsrs	r5, r5, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400f00:	b672      	cpsid	i
  400f02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400f06:	2200      	movs	r2, #0
  400f08:	4b37      	ldr	r3, [pc, #220]	; (400fe8 <udi_cdc_tx_send+0x120>)
  400f0a:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
  400f0c:	4b37      	ldr	r3, [pc, #220]	; (400fec <udi_cdc_tx_send+0x124>)
  400f0e:	781c      	ldrb	r4, [r3, #0]
  400f10:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
  400f12:	4b37      	ldr	r3, [pc, #220]	; (400ff0 <udi_cdc_tx_send+0x128>)
  400f14:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400f18:	b9db      	cbnz	r3, 400f52 <udi_cdc_tx_send+0x8a>
		sof_zlp_counter++;
  400f1a:	4a36      	ldr	r2, [pc, #216]	; (400ff4 <udi_cdc_tx_send+0x12c>)
  400f1c:	8813      	ldrh	r3, [r2, #0]
  400f1e:	3301      	adds	r3, #1
  400f20:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
  400f22:	4b2d      	ldr	r3, [pc, #180]	; (400fd8 <udi_cdc_tx_send+0x110>)
  400f24:	4798      	blx	r3
  400f26:	b918      	cbnz	r0, 400f30 <udi_cdc_tx_send+0x68>
  400f28:	4b32      	ldr	r3, [pc, #200]	; (400ff4 <udi_cdc_tx_send+0x12c>)
  400f2a:	881b      	ldrh	r3, [r3, #0]
  400f2c:	2b63      	cmp	r3, #99	; 0x63
  400f2e:	d907      	bls.n	400f40 <udi_cdc_tx_send+0x78>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
  400f30:	4b29      	ldr	r3, [pc, #164]	; (400fd8 <udi_cdc_tx_send+0x110>)
  400f32:	4798      	blx	r3
  400f34:	b168      	cbz	r0, 400f52 <udi_cdc_tx_send+0x8a>
  400f36:	4b2f      	ldr	r3, [pc, #188]	; (400ff4 <udi_cdc_tx_send+0x12c>)
  400f38:	881b      	ldrh	r3, [r3, #0]
  400f3a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
  400f3e:	d208      	bcs.n	400f52 <udi_cdc_tx_send+0x8a>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400f40:	2d00      	cmp	r5, #0
  400f42:	d044      	beq.n	400fce <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
  400f44:	2201      	movs	r2, #1
  400f46:	4b28      	ldr	r3, [pc, #160]	; (400fe8 <udi_cdc_tx_send+0x120>)
  400f48:	701a      	strb	r2, [r3, #0]
  400f4a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400f4e:	b662      	cpsie	i
  400f50:	e03d      	b.n	400fce <udi_cdc_tx_send+0x106>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
  400f52:	2200      	movs	r2, #0
  400f54:	4b27      	ldr	r3, [pc, #156]	; (400ff4 <udi_cdc_tx_send+0x12c>)
  400f56:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
  400f58:	4b27      	ldr	r3, [pc, #156]	; (400ff8 <udi_cdc_tx_send+0x130>)
  400f5a:	781b      	ldrb	r3, [r3, #0]
  400f5c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400f60:	d105      	bne.n	400f6e <udi_cdc_tx_send+0xa6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  400f62:	fab4 f384 	clz	r3, r4
  400f66:	095b      	lsrs	r3, r3, #5
  400f68:	4a20      	ldr	r2, [pc, #128]	; (400fec <udi_cdc_tx_send+0x124>)
  400f6a:	7013      	strb	r3, [r2, #0]
  400f6c:	e002      	b.n	400f74 <udi_cdc_tx_send+0xac>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
  400f6e:	fab4 f484 	clz	r4, r4
  400f72:	0964      	lsrs	r4, r4, #5
	}
	udi_cdc_tx_trans_ongoing[port] = true;
  400f74:	2201      	movs	r2, #1
  400f76:	4b17      	ldr	r3, [pc, #92]	; (400fd4 <udi_cdc_tx_send+0x10c>)
  400f78:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400f7a:	b125      	cbz	r5, 400f86 <udi_cdc_tx_send+0xbe>
		cpu_irq_enable();
  400f7c:	4b1a      	ldr	r3, [pc, #104]	; (400fe8 <udi_cdc_tx_send+0x120>)
  400f7e:	701a      	strb	r2, [r3, #0]
  400f80:	f3bf 8f5f 	dmb	sy
  400f84:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
  400f86:	4625      	mov	r5, r4
  400f88:	4b19      	ldr	r3, [pc, #100]	; (400ff0 <udi_cdc_tx_send+0x128>)
  400f8a:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
  400f8e:	3c40      	subs	r4, #64	; 0x40
  400f90:	bf18      	it	ne
  400f92:	2401      	movne	r4, #1
	if (b_short_packet) {
  400f94:	b164      	cbz	r4, 400fb0 <udi_cdc_tx_send+0xe8>
		if (udd_is_high_speed()) {
  400f96:	4b10      	ldr	r3, [pc, #64]	; (400fd8 <udi_cdc_tx_send+0x110>)
  400f98:	4798      	blx	r3
  400f9a:	b120      	cbz	r0, 400fa6 <udi_cdc_tx_send+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
  400f9c:	4b10      	ldr	r3, [pc, #64]	; (400fe0 <udi_cdc_tx_send+0x118>)
  400f9e:	4798      	blx	r3
  400fa0:	4b0e      	ldr	r3, [pc, #56]	; (400fdc <udi_cdc_tx_send+0x114>)
  400fa2:	8018      	strh	r0, [r3, #0]
  400fa4:	e007      	b.n	400fb6 <udi_cdc_tx_send+0xee>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
  400fa6:	4b0f      	ldr	r3, [pc, #60]	; (400fe4 <udi_cdc_tx_send+0x11c>)
  400fa8:	4798      	blx	r3
  400faa:	4b0c      	ldr	r3, [pc, #48]	; (400fdc <udi_cdc_tx_send+0x114>)
  400fac:	8018      	strh	r0, [r3, #0]
  400fae:	e002      	b.n	400fb6 <udi_cdc_tx_send+0xee>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
  400fb0:	2200      	movs	r2, #0
  400fb2:	4b0a      	ldr	r3, [pc, #40]	; (400fdc <udi_cdc_tx_send+0x114>)
  400fb4:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
  400fb6:	4b0e      	ldr	r3, [pc, #56]	; (400ff0 <udi_cdc_tx_send+0x128>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
  400fb8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
  400fbc:	4a0f      	ldr	r2, [pc, #60]	; (400ffc <udi_cdc_tx_send+0x134>)
  400fbe:	9200      	str	r2, [sp, #0]
  400fc0:	2081      	movs	r0, #129	; 0x81
  400fc2:	4621      	mov	r1, r4
  400fc4:	4a0e      	ldr	r2, [pc, #56]	; (401000 <udi_cdc_tx_send+0x138>)
  400fc6:	eb02 1285 	add.w	r2, r2, r5, lsl #6
  400fca:	4c0e      	ldr	r4, [pc, #56]	; (401004 <udi_cdc_tx_send+0x13c>)
  400fcc:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
  400fce:	b003      	add	sp, #12
  400fd0:	bd30      	pop	{r4, r5, pc}
  400fd2:	4770      	bx	lr
  400fd4:	20001448 	.word	0x20001448
  400fd8:	00402f81 	.word	0x00402f81
  400fdc:	20001440 	.word	0x20001440
  400fe0:	00402fe9 	.word	0x00402fe9
  400fe4:	00402fd9 	.word	0x00402fd9
  400fe8:	200000a3 	.word	0x200000a3
  400fec:	200013ac 	.word	0x200013ac
  400ff0:	200013b0 	.word	0x200013b0
  400ff4:	20001444 	.word	0x20001444
  400ff8:	200014dc 	.word	0x200014dc
  400ffc:	00401009 	.word	0x00401009
  401000:	200013b4 	.word	0x200013b4
  401004:	00403385 	.word	0x00403385

00401008 <udi_cdc_data_sent>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  401008:	b988      	cbnz	r0, 40102e <udi_cdc_data_sent+0x26>
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  40100a:	b508      	push	{r3, lr}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
  40100c:	4b08      	ldr	r3, [pc, #32]	; (401030 <udi_cdc_data_sent+0x28>)
  40100e:	781b      	ldrb	r3, [r3, #0]
  401010:	f013 0fff 	tst.w	r3, #255	; 0xff
  401014:	bf0c      	ite	eq
  401016:	2201      	moveq	r2, #1
  401018:	2200      	movne	r2, #0
  40101a:	4b06      	ldr	r3, [pc, #24]	; (401034 <udi_cdc_data_sent+0x2c>)
  40101c:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
  401020:	4b05      	ldr	r3, [pc, #20]	; (401038 <udi_cdc_data_sent+0x30>)
  401022:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
  401024:	4b05      	ldr	r3, [pc, #20]	; (40103c <udi_cdc_data_sent+0x34>)
  401026:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
  401028:	4b05      	ldr	r3, [pc, #20]	; (401040 <udi_cdc_data_sent+0x38>)
  40102a:	4798      	blx	r3
  40102c:	bd08      	pop	{r3, pc}
  40102e:	4770      	bx	lr
  401030:	200013ac 	.word	0x200013ac
  401034:	200013b0 	.word	0x200013b0
  401038:	200014dc 	.word	0x200014dc
  40103c:	20001448 	.word	0x20001448
  401040:	00400ec9 	.word	0x00400ec9

00401044 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
  401044:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
  401046:	2000      	movs	r0, #0
  401048:	4b01      	ldr	r3, [pc, #4]	; (401050 <udi_cdc_data_sof_notify+0xc>)
  40104a:	4798      	blx	r3
  40104c:	bd08      	pop	{r3, pc}
  40104e:	bf00      	nop
  401050:	00400ec9 	.word	0x00400ec9

00401054 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401054:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401058:	b672      	cpsid	i
  40105a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40105e:	2100      	movs	r1, #0
  401060:	4b0a      	ldr	r3, [pc, #40]	; (40108c <udi_cdc_multi_get_nb_received_data+0x38>)
  401062:	7019      	strb	r1, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  401064:	4b0a      	ldr	r3, [pc, #40]	; (401090 <udi_cdc_multi_get_nb_received_data+0x3c>)
  401066:	8818      	ldrh	r0, [r3, #0]
  401068:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
  40106a:	4b0a      	ldr	r3, [pc, #40]	; (401094 <udi_cdc_multi_get_nb_received_data+0x40>)
  40106c:	781b      	ldrb	r3, [r3, #0]
  40106e:	b2db      	uxtb	r3, r3
  401070:	4909      	ldr	r1, [pc, #36]	; (401098 <udi_cdc_multi_get_nb_received_data+0x44>)
  401072:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
  401076:	b29b      	uxth	r3, r3
  401078:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40107a:	b92a      	cbnz	r2, 401088 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
  40107c:	2201      	movs	r2, #1
  40107e:	4b03      	ldr	r3, [pc, #12]	; (40108c <udi_cdc_multi_get_nb_received_data+0x38>)
  401080:	701a      	strb	r2, [r3, #0]
  401082:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401086:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
  401088:	4770      	bx	lr
  40108a:	bf00      	nop
  40108c:	200000a3 	.word	0x200000a3
  401090:	2000143c 	.word	0x2000143c
  401094:	200013a8 	.word	0x200013a8
  401098:	20001434 	.word	0x20001434

0040109c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
  40109c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
  40109e:	4b03      	ldr	r3, [pc, #12]	; (4010ac <udi_cdc_multi_is_rx_ready+0x10>)
  4010a0:	4798      	blx	r3
}
  4010a2:	3000      	adds	r0, #0
  4010a4:	bf18      	it	ne
  4010a6:	2001      	movne	r0, #1
  4010a8:	bd08      	pop	{r3, pc}
  4010aa:	bf00      	nop
  4010ac:	00401055 	.word	0x00401055

004010b0 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
  4010b0:	b510      	push	{r4, lr}
  4010b2:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4010b4:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  4010b8:	fab3 f383 	clz	r3, r3
  4010bc:	095b      	lsrs	r3, r3, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4010be:	b672      	cpsid	i
  4010c0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4010c4:	2100      	movs	r1, #0
  4010c6:	4a21      	ldr	r2, [pc, #132]	; (40114c <udi_cdc_rx_start+0x9c>)
  4010c8:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
  4010ca:	4a21      	ldr	r2, [pc, #132]	; (401150 <udi_cdc_rx_start+0xa0>)
  4010cc:	7812      	ldrb	r2, [r2, #0]
  4010ce:	b2d4      	uxtb	r4, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
  4010d0:	4a20      	ldr	r2, [pc, #128]	; (401154 <udi_cdc_rx_start+0xa4>)
  4010d2:	7812      	ldrb	r2, [r2, #0]
  4010d4:	f012 0fff 	tst.w	r2, #255	; 0xff
  4010d8:	d108      	bne.n	4010ec <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
  4010da:	4a1f      	ldr	r2, [pc, #124]	; (401158 <udi_cdc_rx_start+0xa8>)
  4010dc:	8811      	ldrh	r1, [r2, #0]
  4010de:	b289      	uxth	r1, r1
  4010e0:	4a1e      	ldr	r2, [pc, #120]	; (40115c <udi_cdc_rx_start+0xac>)
  4010e2:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
  4010e6:	b292      	uxth	r2, r2
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
  4010e8:	4291      	cmp	r1, r2
  4010ea:	d208      	bcs.n	4010fe <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4010ec:	b353      	cbz	r3, 401144 <udi_cdc_rx_start+0x94>
		cpu_irq_enable();
  4010ee:	2201      	movs	r2, #1
  4010f0:	4b16      	ldr	r3, [pc, #88]	; (40114c <udi_cdc_rx_start+0x9c>)
  4010f2:	701a      	strb	r2, [r3, #0]
  4010f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4010f8:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  4010fa:	2000      	movs	r0, #0
  4010fc:	e023      	b.n	401146 <udi_cdc_rx_start+0x96>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
  4010fe:	2100      	movs	r1, #0
  401100:	4a15      	ldr	r2, [pc, #84]	; (401158 <udi_cdc_rx_start+0xa8>)
  401102:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
  401104:	fab4 f284 	clz	r2, r4
  401108:	0952      	lsrs	r2, r2, #5
  40110a:	4911      	ldr	r1, [pc, #68]	; (401150 <udi_cdc_rx_start+0xa0>)
  40110c:	700a      	strb	r2, [r1, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
  40110e:	2101      	movs	r1, #1
  401110:	4a10      	ldr	r2, [pc, #64]	; (401154 <udi_cdc_rx_start+0xa4>)
  401112:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401114:	b123      	cbz	r3, 401120 <udi_cdc_rx_start+0x70>
		cpu_irq_enable();
  401116:	4b0d      	ldr	r3, [pc, #52]	; (40114c <udi_cdc_rx_start+0x9c>)
  401118:	7019      	strb	r1, [r3, #0]
  40111a:	f3bf 8f5f 	dmb	sy
  40111e:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
  401120:	2000      	movs	r0, #0
  401122:	4b0f      	ldr	r3, [pc, #60]	; (401160 <udi_cdc_rx_start+0xb0>)
  401124:	4798      	blx	r3
  401126:	b110      	cbz	r0, 40112e <udi_cdc_rx_start+0x7e>
		UDI_CDC_RX_NOTIFY(port);
  401128:	2000      	movs	r0, #0
  40112a:	4b0e      	ldr	r3, [pc, #56]	; (401164 <udi_cdc_rx_start+0xb4>)
  40112c:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
  40112e:	4b0e      	ldr	r3, [pc, #56]	; (401168 <udi_cdc_rx_start+0xb8>)
  401130:	9300      	str	r3, [sp, #0]
  401132:	2002      	movs	r0, #2
  401134:	2101      	movs	r1, #1
  401136:	4a0d      	ldr	r2, [pc, #52]	; (40116c <udi_cdc_rx_start+0xbc>)
  401138:	eb02 1284 	add.w	r2, r2, r4, lsl #6
  40113c:	2340      	movs	r3, #64	; 0x40
  40113e:	4c0c      	ldr	r4, [pc, #48]	; (401170 <udi_cdc_rx_start+0xc0>)
  401140:	47a0      	blx	r4
  401142:	e000      	b.n	401146 <udi_cdc_rx_start+0x96>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
  401144:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
  401146:	b002      	add	sp, #8
  401148:	bd10      	pop	{r4, pc}
  40114a:	bf00      	nop
  40114c:	200000a3 	.word	0x200000a3
  401150:	200013a8 	.word	0x200013a8
  401154:	200014d8 	.word	0x200014d8
  401158:	2000143c 	.word	0x2000143c
  40115c:	20001434 	.word	0x20001434
  401160:	0040109d 	.word	0x0040109d
  401164:	00400d7d 	.word	0x00400d7d
  401168:	00401205 	.word	0x00401205
  40116c:	20001458 	.word	0x20001458
  401170:	00403385 	.word	0x00403385

00401174 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
  401174:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
  401176:	2400      	movs	r4, #0
  401178:	4b15      	ldr	r3, [pc, #84]	; (4011d0 <udi_cdc_data_enable+0x5c>)
  40117a:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
  40117c:	4b15      	ldr	r3, [pc, #84]	; (4011d4 <udi_cdc_data_enable+0x60>)
  40117e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
  401180:	4b15      	ldr	r3, [pc, #84]	; (4011d8 <udi_cdc_data_enable+0x64>)
  401182:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
  401184:	4b15      	ldr	r3, [pc, #84]	; (4011dc <udi_cdc_data_enable+0x68>)
  401186:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
  401188:	4b15      	ldr	r3, [pc, #84]	; (4011e0 <udi_cdc_data_enable+0x6c>)
  40118a:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
  40118c:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
  40118e:	4b15      	ldr	r3, [pc, #84]	; (4011e4 <udi_cdc_data_enable+0x70>)
  401190:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
  401192:	4620      	mov	r0, r4
  401194:	4b14      	ldr	r3, [pc, #80]	; (4011e8 <udi_cdc_data_enable+0x74>)
  401196:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
  401198:	4b14      	ldr	r3, [pc, #80]	; (4011ec <udi_cdc_data_enable+0x78>)
  40119a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
  40119c:	4b14      	ldr	r3, [pc, #80]	; (4011f0 <udi_cdc_data_enable+0x7c>)
  40119e:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
  4011a0:	4b14      	ldr	r3, [pc, #80]	; (4011f4 <udi_cdc_data_enable+0x80>)
  4011a2:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
  4011a4:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
  4011a6:	4b14      	ldr	r3, [pc, #80]	; (4011f8 <udi_cdc_data_enable+0x84>)
  4011a8:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
  4011aa:	4620      	mov	r0, r4
  4011ac:	4b13      	ldr	r3, [pc, #76]	; (4011fc <udi_cdc_data_enable+0x88>)
  4011ae:	4798      	blx	r3
  4011b0:	4601      	mov	r1, r0
  4011b2:	b158      	cbz	r0, 4011cc <udi_cdc_data_enable+0x58>
		return false;
	}
	udi_cdc_nb_data_enabled++;
  4011b4:	4a06      	ldr	r2, [pc, #24]	; (4011d0 <udi_cdc_data_enable+0x5c>)
  4011b6:	7813      	ldrb	r3, [r2, #0]
  4011b8:	3301      	adds	r3, #1
  4011ba:	b2db      	uxtb	r3, r3
  4011bc:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
  4011be:	7813      	ldrb	r3, [r2, #0]
  4011c0:	b2db      	uxtb	r3, r3
  4011c2:	2b01      	cmp	r3, #1
  4011c4:	d102      	bne.n	4011cc <udi_cdc_data_enable+0x58>
		udi_cdc_data_running = true;
  4011c6:	2201      	movs	r2, #1
  4011c8:	4b0d      	ldr	r3, [pc, #52]	; (401200 <udi_cdc_data_enable+0x8c>)
  4011ca:	701a      	strb	r2, [r3, #0]
	}
	return true;
}
  4011cc:	4608      	mov	r0, r1
  4011ce:	bd10      	pop	{r4, pc}
  4011d0:	200013a9 	.word	0x200013a9
  4011d4:	20001448 	.word	0x20001448
  4011d8:	200014dc 	.word	0x200014dc
  4011dc:	200013ac 	.word	0x200013ac
  4011e0:	200013b0 	.word	0x200013b0
  4011e4:	20001440 	.word	0x20001440
  4011e8:	00400ec9 	.word	0x00400ec9
  4011ec:	200014d8 	.word	0x200014d8
  4011f0:	200013a8 	.word	0x200013a8
  4011f4:	20001434 	.word	0x20001434
  4011f8:	2000143c 	.word	0x2000143c
  4011fc:	004010b1 	.word	0x004010b1
  401200:	20001442 	.word	0x20001442

00401204 <udi_cdc_data_received>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
  401204:	b9f8      	cbnz	r0, 401246 <udi_cdc_data_received+0x42>
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
  401206:	b510      	push	{r4, lr}
  401208:	b082      	sub	sp, #8

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
  40120a:	4b0f      	ldr	r3, [pc, #60]	; (401248 <udi_cdc_data_received+0x44>)
  40120c:	781b      	ldrb	r3, [r3, #0]
  40120e:	f013 0fff 	tst.w	r3, #255	; 0xff
  401212:	bf0c      	ite	eq
  401214:	2301      	moveq	r3, #1
  401216:	2300      	movne	r3, #0
	if (!n) {
  401218:	b951      	cbnz	r1, 401230 <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
  40121a:	490c      	ldr	r1, [pc, #48]	; (40124c <udi_cdc_data_received+0x48>)
  40121c:	9100      	str	r1, [sp, #0]
  40121e:	4610      	mov	r0, r2
  401220:	2101      	movs	r1, #1
  401222:	4a0b      	ldr	r2, [pc, #44]	; (401250 <udi_cdc_data_received+0x4c>)
  401224:	eb02 1283 	add.w	r2, r2, r3, lsl #6
  401228:	2340      	movs	r3, #64	; 0x40
  40122a:	4c0a      	ldr	r4, [pc, #40]	; (401254 <udi_cdc_data_received+0x50>)
  40122c:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
  40122e:	e008      	b.n	401242 <udi_cdc_data_received+0x3e>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
  401230:	b289      	uxth	r1, r1
  401232:	4a09      	ldr	r2, [pc, #36]	; (401258 <udi_cdc_data_received+0x54>)
  401234:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
  401238:	2000      	movs	r0, #0
  40123a:	4b08      	ldr	r3, [pc, #32]	; (40125c <udi_cdc_data_received+0x58>)
  40123c:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
  40123e:	4b08      	ldr	r3, [pc, #32]	; (401260 <udi_cdc_data_received+0x5c>)
  401240:	4798      	blx	r3
}
  401242:	b002      	add	sp, #8
  401244:	bd10      	pop	{r4, pc}
  401246:	4770      	bx	lr
  401248:	200013a8 	.word	0x200013a8
  40124c:	00401205 	.word	0x00401205
  401250:	20001458 	.word	0x20001458
  401254:	00403385 	.word	0x00403385
  401258:	20001434 	.word	0x20001434
  40125c:	200014d8 	.word	0x200014d8
  401260:	004010b1 	.word	0x004010b1

00401264 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
  401264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  401268:	4b22      	ldr	r3, [pc, #136]	; (4012f4 <udi_cdc_multi_getc+0x90>)
  40126a:	f893 8006 	ldrb.w	r8, [r3, #6]
  40126e:	f1b8 0f09 	cmp.w	r8, #9
  401272:	bf14      	ite	ne
  401274:	f04f 0800 	movne.w	r8, #0
  401278:	f04f 0801 	moveq.w	r8, #1
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
  40127c:	f04f 0a00 	mov.w	sl, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  401280:	4c1d      	ldr	r4, [pc, #116]	; (4012f8 <udi_cdc_multi_getc+0x94>)
  401282:	46d1      	mov	r9, sl
  401284:	4657      	mov	r7, sl
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  401286:	4d1d      	ldr	r5, [pc, #116]	; (4012fc <udi_cdc_multi_getc+0x98>)
	buf_sel = udi_cdc_rx_buf_sel[port];
  401288:	4e1d      	ldr	r6, [pc, #116]	; (401300 <udi_cdc_multi_getc+0x9c>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40128a:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40128e:	b672      	cpsid	i
  401290:	f3bf 8f5f 	dmb	sy
  401294:	7027      	strb	r7, [r4, #0]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
  401296:	882b      	ldrh	r3, [r5, #0]
  401298:	b29b      	uxth	r3, r3
	buf_sel = udi_cdc_rx_buf_sel[port];
  40129a:	7832      	ldrb	r2, [r6, #0]
  40129c:	b2d2      	uxtb	r2, r2
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
  40129e:	4919      	ldr	r1, [pc, #100]	; (401304 <udi_cdc_multi_getc+0xa0>)
  4012a0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
  4012a4:	b289      	uxth	r1, r1
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4012a6:	b920      	cbnz	r0, 4012b2 <udi_cdc_multi_getc+0x4e>
		cpu_irq_enable();
  4012a8:	2001      	movs	r0, #1
  4012aa:	7020      	strb	r0, [r4, #0]
  4012ac:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4012b0:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (again) {
  4012b2:	428b      	cmp	r3, r1
  4012b4:	d307      	bcc.n	4012c6 <udi_cdc_multi_getc+0x62>
		if (!udi_cdc_data_running) {
  4012b6:	4b14      	ldr	r3, [pc, #80]	; (401308 <udi_cdc_multi_getc+0xa4>)
  4012b8:	781b      	ldrb	r3, [r3, #0]
  4012ba:	f013 0fff 	tst.w	r3, #255	; 0xff
  4012be:	d1e4      	bne.n	40128a <udi_cdc_multi_getc+0x26>
			return 0;
  4012c0:	2000      	movs	r0, #0
  4012c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  4012c6:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  4012ca:	4910      	ldr	r1, [pc, #64]	; (40130c <udi_cdc_multi_getc+0xa8>)
  4012cc:	5c88      	ldrb	r0, [r1, r2]
  4012ce:	ea4a 0a00 	orr.w	sl, sl, r0
	udi_cdc_rx_pos[port] = pos+1;
  4012d2:	3301      	adds	r3, #1
  4012d4:	b29b      	uxth	r3, r3
  4012d6:	802b      	strh	r3, [r5, #0]

	udi_cdc_rx_start(port);
  4012d8:	4648      	mov	r0, r9
  4012da:	4b0d      	ldr	r3, [pc, #52]	; (401310 <udi_cdc_multi_getc+0xac>)
  4012dc:	4798      	blx	r3

	if (b_databit_9) {
  4012de:	f1b8 0f00 	cmp.w	r8, #0
  4012e2:	d003      	beq.n	4012ec <udi_cdc_multi_getc+0x88>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
  4012e4:	ea4f 2a0a 	mov.w	sl, sl, lsl #8

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
  4012e8:	46c8      	mov	r8, r9
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
  4012ea:	e7ce      	b.n	40128a <udi_cdc_multi_getc+0x26>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
  4012ec:	4650      	mov	r0, sl
		b_databit_9 = false;
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
	}
	return rx_data;
}
  4012ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4012f2:	bf00      	nop
  4012f4:	200013a0 	.word	0x200013a0
  4012f8:	200000a3 	.word	0x200000a3
  4012fc:	2000143c 	.word	0x2000143c
  401300:	200013a8 	.word	0x200013a8
  401304:	20001434 	.word	0x20001434
  401308:	20001442 	.word	0x20001442
  40130c:	20001458 	.word	0x20001458
  401310:	004010b1 	.word	0x004010b1

00401314 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
  401314:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
  401316:	2000      	movs	r0, #0
  401318:	4b01      	ldr	r3, [pc, #4]	; (401320 <udi_cdc_getc+0xc>)
  40131a:	4798      	blx	r3
}
  40131c:	bd08      	pop	{r3, pc}
  40131e:	bf00      	nop
  401320:	00401265 	.word	0x00401265

00401324 <udi_cdc_multi_get_free_tx_buffer>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401324:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401328:	b672      	cpsid	i
  40132a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40132e:	2100      	movs	r1, #0
  401330:	4b13      	ldr	r3, [pc, #76]	; (401380 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
  401332:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  401334:	4b13      	ldr	r3, [pc, #76]	; (401384 <udi_cdc_multi_get_free_tx_buffer+0x60>)
  401336:	781b      	ldrb	r3, [r3, #0]
  401338:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
  40133a:	4913      	ldr	r1, [pc, #76]	; (401388 <udi_cdc_multi_get_free_tx_buffer+0x64>)
  40133c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
  401340:	2840      	cmp	r0, #64	; 0x40
  401342:	d112      	bne.n	40136a <udi_cdc_multi_get_free_tx_buffer+0x46>
		if ((!udi_cdc_tx_trans_ongoing[port])
  401344:	4911      	ldr	r1, [pc, #68]	; (40138c <udi_cdc_multi_get_free_tx_buffer+0x68>)
  401346:	7809      	ldrb	r1, [r1, #0]
  401348:	f011 0fff 	tst.w	r1, #255	; 0xff
  40134c:	d10d      	bne.n	40136a <udi_cdc_multi_get_free_tx_buffer+0x46>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
  40134e:	4910      	ldr	r1, [pc, #64]	; (401390 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  401350:	7809      	ldrb	r1, [r1, #0]
  401352:	f011 0fff 	tst.w	r1, #255	; 0xff
  401356:	d108      	bne.n	40136a <udi_cdc_multi_get_free_tx_buffer+0x46>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
  401358:	2001      	movs	r0, #1
  40135a:	490d      	ldr	r1, [pc, #52]	; (401390 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
  40135c:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
  40135e:	fab3 f383 	clz	r3, r3
  401362:	095b      	lsrs	r3, r3, #5
  401364:	4907      	ldr	r1, [pc, #28]	; (401384 <udi_cdc_multi_get_free_tx_buffer+0x60>)
  401366:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
  401368:	2000      	movs	r0, #0
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
  40136a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40136e:	b92a      	cbnz	r2, 40137c <udi_cdc_multi_get_free_tx_buffer+0x58>
		cpu_irq_enable();
  401370:	2201      	movs	r2, #1
  401372:	4b03      	ldr	r3, [pc, #12]	; (401380 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
  401374:	701a      	strb	r2, [r3, #0]
  401376:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40137a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
  40137c:	4770      	bx	lr
  40137e:	bf00      	nop
  401380:	200000a3 	.word	0x200000a3
  401384:	200013ac 	.word	0x200013ac
  401388:	200013b0 	.word	0x200013b0
  40138c:	20001448 	.word	0x20001448
  401390:	200014dc 	.word	0x200014dc

00401394 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
  401394:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
  401396:	4b03      	ldr	r3, [pc, #12]	; (4013a4 <udi_cdc_multi_is_tx_ready+0x10>)
  401398:	4798      	blx	r3
}
  40139a:	3000      	adds	r0, #0
  40139c:	bf18      	it	ne
  40139e:	2001      	movne	r0, #1
  4013a0:	bd08      	pop	{r3, pc}
  4013a2:	bf00      	nop
  4013a4:	00401325 	.word	0x00401325

004013a8 <udi_cdc_is_tx_ready>:

bool udi_cdc_is_tx_ready(void)
{
  4013a8:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_tx_ready(0);
  4013aa:	2000      	movs	r0, #0
  4013ac:	4b01      	ldr	r3, [pc, #4]	; (4013b4 <udi_cdc_is_tx_ready+0xc>)
  4013ae:	4798      	blx	r3
}
  4013b0:	bd08      	pop	{r3, pc}
  4013b2:	bf00      	nop
  4013b4:	00401395 	.word	0x00401395

004013b8 <udi_cdc_multi_putc>:

int udi_cdc_multi_putc(uint8_t port, int value)
{
  4013b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4013bc:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
  4013be:	4b1b      	ldr	r3, [pc, #108]	; (40142c <udi_cdc_multi_putc+0x74>)
  4013c0:	799d      	ldrb	r5, [r3, #6]
  4013c2:	2d09      	cmp	r5, #9
  4013c4:	bf14      	ite	ne
  4013c6:	2500      	movne	r5, #0
  4013c8:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  4013ca:	4e19      	ldr	r6, [pc, #100]	; (401430 <udi_cdc_multi_putc+0x78>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4013cc:	4f19      	ldr	r7, [pc, #100]	; (401434 <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  4013ce:	f8df 8074 	ldr.w	r8, [pc, #116]	; 401444 <udi_cdc_multi_putc+0x8c>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
  4013d2:	2000      	movs	r0, #0
  4013d4:	47b0      	blx	r6
  4013d6:	b930      	cbnz	r0, 4013e6 <udi_cdc_multi_putc+0x2e>
		if (!udi_cdc_data_running) {
  4013d8:	4b17      	ldr	r3, [pc, #92]	; (401438 <udi_cdc_multi_putc+0x80>)
  4013da:	781b      	ldrb	r3, [r3, #0]
  4013dc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4013e0:	d1f7      	bne.n	4013d2 <udi_cdc_multi_putc+0x1a>
  4013e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4013e6:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4013ea:	b672      	cpsid	i
  4013ec:	f3bf 8f5f 	dmb	sy
  4013f0:	2300      	movs	r3, #0
  4013f2:	703b      	strb	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
  4013f4:	f898 3000 	ldrb.w	r3, [r8]
  4013f8:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
  4013fa:	4810      	ldr	r0, [pc, #64]	; (40143c <udi_cdc_multi_putc+0x84>)
  4013fc:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
  401400:	f102 0e01 	add.w	lr, r2, #1
  401404:	f820 e013 	strh.w	lr, [r0, r3, lsl #1]
  401408:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  40140c:	4a0c      	ldr	r2, [pc, #48]	; (401440 <udi_cdc_multi_putc+0x88>)
  40140e:	54d4      	strb	r4, [r2, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401410:	b921      	cbnz	r1, 40141c <udi_cdc_multi_putc+0x64>
		cpu_irq_enable();
  401412:	2301      	movs	r3, #1
  401414:	703b      	strb	r3, [r7, #0]
  401416:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40141a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
  40141c:	b115      	cbz	r5, 401424 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
  40141e:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
  401420:	2500      	movs	r5, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
  401422:	e7d6      	b.n	4013d2 <udi_cdc_multi_putc+0x1a>
	}
	return true;
  401424:	2001      	movs	r0, #1
}
  401426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40142a:	bf00      	nop
  40142c:	200013a0 	.word	0x200013a0
  401430:	00401395 	.word	0x00401395
  401434:	200000a3 	.word	0x200000a3
  401438:	20001442 	.word	0x20001442
  40143c:	200013b0 	.word	0x200013b0
  401440:	200013b4 	.word	0x200013b4
  401444:	200013ac 	.word	0x200013ac

00401448 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
  401448:	b508      	push	{r3, lr}
  40144a:	4601      	mov	r1, r0
	return udi_cdc_multi_putc(0, value);
  40144c:	2000      	movs	r0, #0
  40144e:	4b01      	ldr	r3, [pc, #4]	; (401454 <udi_cdc_putc+0xc>)
  401450:	4798      	blx	r3
}
  401452:	bd08      	pop	{r3, pc}
  401454:	004013b9 	.word	0x004013b9

00401458 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  401458:	4b0f      	ldr	r3, [pc, #60]	; (401498 <udc_next_desc_in_iface+0x40>)
  40145a:	681b      	ldr	r3, [r3, #0]
  40145c:	681a      	ldr	r2, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  40145e:	8853      	ldrh	r3, [r2, #2]
  401460:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401462:	7803      	ldrb	r3, [r0, #0]
  401464:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  401466:	4290      	cmp	r0, r2
  401468:	d210      	bcs.n	40148c <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  40146a:	7843      	ldrb	r3, [r0, #1]
  40146c:	2b04      	cmp	r3, #4
  40146e:	d00f      	beq.n	401490 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  401470:	428b      	cmp	r3, r1
  401472:	d105      	bne.n	401480 <udc_next_desc_in_iface+0x28>
  401474:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  401476:	7843      	ldrb	r3, [r0, #1]
  401478:	2b04      	cmp	r3, #4
  40147a:	d00b      	beq.n	401494 <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  40147c:	428b      	cmp	r3, r1
  40147e:	d00a      	beq.n	401496 <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401480:	7803      	ldrb	r3, [r0, #0]
  401482:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  401484:	4290      	cmp	r0, r2
  401486:	d3f6      	bcc.n	401476 <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
  401488:	2000      	movs	r0, #0
  40148a:	4770      	bx	lr
  40148c:	2000      	movs	r0, #0
  40148e:	4770      	bx	lr
  401490:	2000      	movs	r0, #0
  401492:	4770      	bx	lr
  401494:	2000      	movs	r0, #0
}
  401496:	4770      	bx	lr
  401498:	200014e4 	.word	0x200014e4

0040149c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  40149c:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  40149e:	4b03      	ldr	r3, [pc, #12]	; (4014ac <udc_valid_address+0x10>)
  4014a0:	7898      	ldrb	r0, [r3, #2]
  4014a2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4014a6:	4b02      	ldr	r3, [pc, #8]	; (4014b0 <udc_valid_address+0x14>)
  4014a8:	4798      	blx	r3
  4014aa:	bd08      	pop	{r3, pc}
  4014ac:	20001600 	.word	0x20001600
  4014b0:	00402f85 	.word	0x00402f85

004014b4 <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  4014b4:	4b16      	ldr	r3, [pc, #88]	; (401510 <udc_update_iface_desc+0x5c>)
  4014b6:	781b      	ldrb	r3, [r3, #0]
  4014b8:	b30b      	cbz	r3, 4014fe <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4014ba:	4b16      	ldr	r3, [pc, #88]	; (401514 <udc_update_iface_desc+0x60>)
  4014bc:	681b      	ldr	r3, [r3, #0]
  4014be:	681b      	ldr	r3, [r3, #0]
  4014c0:	791a      	ldrb	r2, [r3, #4]
  4014c2:	4282      	cmp	r2, r0
  4014c4:	d91d      	bls.n	401502 <udc_update_iface_desc+0x4e>
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  4014c6:	b410      	push	{r4}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  4014c8:	4a13      	ldr	r2, [pc, #76]	; (401518 <udc_update_iface_desc+0x64>)
  4014ca:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  4014cc:	885c      	ldrh	r4, [r3, #2]
  4014ce:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  4014d0:	42a3      	cmp	r3, r4
  4014d2:	d218      	bcs.n	401506 <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4014d4:	785a      	ldrb	r2, [r3, #1]
  4014d6:	2a04      	cmp	r2, #4
  4014d8:	d109      	bne.n	4014ee <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4014da:	789a      	ldrb	r2, [r3, #2]
  4014dc:	4282      	cmp	r2, r0
  4014de:	d106      	bne.n	4014ee <udc_update_iface_desc+0x3a>
  4014e0:	78da      	ldrb	r2, [r3, #3]
  4014e2:	428a      	cmp	r2, r1
  4014e4:	d103      	bne.n	4014ee <udc_update_iface_desc+0x3a>
  4014e6:	4a0c      	ldr	r2, [pc, #48]	; (401518 <udc_update_iface_desc+0x64>)
  4014e8:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
  4014ea:	2001      	movs	r0, #1
  4014ec:	e00c      	b.n	401508 <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4014ee:	781a      	ldrb	r2, [r3, #0]
  4014f0:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
  4014f2:	42a3      	cmp	r3, r4
  4014f4:	d3ee      	bcc.n	4014d4 <udc_update_iface_desc+0x20>
  4014f6:	4a08      	ldr	r2, [pc, #32]	; (401518 <udc_update_iface_desc+0x64>)
  4014f8:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  4014fa:	2000      	movs	r0, #0
  4014fc:	e004      	b.n	401508 <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
  4014fe:	2000      	movs	r0, #0
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
}
  401500:	4770      	bx	lr
	if (0 == udc_num_configuration) {
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
  401502:	2000      	movs	r0, #0
  401504:	4770      	bx	lr
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
  401506:	2000      	movs	r0, #0
}
  401508:	f85d 4b04 	ldr.w	r4, [sp], #4
  40150c:	4770      	bx	lr
  40150e:	bf00      	nop
  401510:	200014f0 	.word	0x200014f0
  401514:	200014e4 	.word	0x200014e4
  401518:	200014f4 	.word	0x200014f4

0040151c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  40151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401520:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401522:	2100      	movs	r1, #0
  401524:	4b12      	ldr	r3, [pc, #72]	; (401570 <udc_iface_disable+0x54>)
  401526:	4798      	blx	r3
  401528:	4680      	mov	r8, r0
  40152a:	b1e8      	cbz	r0, 401568 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  40152c:	4b11      	ldr	r3, [pc, #68]	; (401574 <udc_iface_disable+0x58>)
  40152e:	681b      	ldr	r3, [r3, #0]
  401530:	685b      	ldr	r3, [r3, #4]
  401532:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401536:	f8d9 300c 	ldr.w	r3, [r9, #12]
  40153a:	4798      	blx	r3
  40153c:	4601      	mov	r1, r0
  40153e:	4620      	mov	r0, r4
  401540:	4b0b      	ldr	r3, [pc, #44]	; (401570 <udc_iface_disable+0x54>)
  401542:	4798      	blx	r3
  401544:	4680      	mov	r8, r0
  401546:	b178      	cbz	r0, 401568 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401548:	4b0b      	ldr	r3, [pc, #44]	; (401578 <udc_iface_disable+0x5c>)
  40154a:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40154c:	2605      	movs	r6, #5
  40154e:	4d0b      	ldr	r5, [pc, #44]	; (40157c <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  401550:	4f0b      	ldr	r7, [pc, #44]	; (401580 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401552:	4620      	mov	r0, r4
  401554:	4631      	mov	r1, r6
  401556:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  401558:	4604      	mov	r4, r0
  40155a:	b110      	cbz	r0, 401562 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  40155c:	7880      	ldrb	r0, [r0, #2]
  40155e:	47b8      	blx	r7
		}
  401560:	e7f7      	b.n	401552 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
  401562:	f8d9 3004 	ldr.w	r3, [r9, #4]
  401566:	4798      	blx	r3
	return true;
}
  401568:	4640      	mov	r0, r8
  40156a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40156e:	bf00      	nop
  401570:	004014b5 	.word	0x004014b5
  401574:	200014e4 	.word	0x200014e4
  401578:	200014f4 	.word	0x200014f4
  40157c:	00401459 	.word	0x00401459
  401580:	00403101 	.word	0x00403101

00401584 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  401584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401588:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  40158a:	4b10      	ldr	r3, [pc, #64]	; (4015cc <udc_iface_enable+0x48>)
  40158c:	4798      	blx	r3
  40158e:	4603      	mov	r3, r0
  401590:	b1c8      	cbz	r0, 4015c6 <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401592:	4b0f      	ldr	r3, [pc, #60]	; (4015d0 <udc_iface_enable+0x4c>)
  401594:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401596:	2605      	movs	r6, #5
  401598:	4d0e      	ldr	r5, [pc, #56]	; (4015d4 <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  40159a:	4f0f      	ldr	r7, [pc, #60]	; (4015d8 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40159c:	4620      	mov	r0, r4
  40159e:	4631      	mov	r1, r6
  4015a0:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  4015a2:	4604      	mov	r4, r0
  4015a4:	b138      	cbz	r0, 4015b6 <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  4015a6:	7880      	ldrb	r0, [r0, #2]
  4015a8:	78e1      	ldrb	r1, [r4, #3]
  4015aa:	88a2      	ldrh	r2, [r4, #4]
  4015ac:	47b8      	blx	r7
  4015ae:	4603      	mov	r3, r0
  4015b0:	2800      	cmp	r0, #0
  4015b2:	d1f3      	bne.n	40159c <udc_iface_enable+0x18>
  4015b4:	e007      	b.n	4015c6 <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  4015b6:	4b09      	ldr	r3, [pc, #36]	; (4015dc <udc_iface_enable+0x58>)
  4015b8:	681b      	ldr	r3, [r3, #0]
  4015ba:	685b      	ldr	r3, [r3, #4]
  4015bc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
  4015c0:	681b      	ldr	r3, [r3, #0]
  4015c2:	4798      	blx	r3
  4015c4:	4603      	mov	r3, r0
}
  4015c6:	4618      	mov	r0, r3
  4015c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4015cc:	004014b5 	.word	0x004014b5
  4015d0:	200014f4 	.word	0x200014f4
  4015d4:	00401459 	.word	0x00401459
  4015d8:	00402ff9 	.word	0x00402ff9
  4015dc:	200014e4 	.word	0x200014e4

004015e0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  4015e0:	b508      	push	{r3, lr}
	udd_enable();
  4015e2:	4b01      	ldr	r3, [pc, #4]	; (4015e8 <udc_start+0x8>)
  4015e4:	4798      	blx	r3
  4015e6:	bd08      	pop	{r3, pc}
  4015e8:	00402ebd 	.word	0x00402ebd

004015ec <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  4015ec:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  4015ee:	4b0d      	ldr	r3, [pc, #52]	; (401624 <udc_reset+0x38>)
  4015f0:	781b      	ldrb	r3, [r3, #0]
  4015f2:	b183      	cbz	r3, 401616 <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4015f4:	4b0c      	ldr	r3, [pc, #48]	; (401628 <udc_reset+0x3c>)
  4015f6:	681b      	ldr	r3, [r3, #0]
  4015f8:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  4015fa:	791b      	ldrb	r3, [r3, #4]
  4015fc:	b15b      	cbz	r3, 401616 <udc_reset+0x2a>
  4015fe:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  401600:	4e0a      	ldr	r6, [pc, #40]	; (40162c <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401602:	4d09      	ldr	r5, [pc, #36]	; (401628 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
  401604:	4620      	mov	r0, r4
  401606:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  401608:	3401      	adds	r4, #1
  40160a:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40160c:	682b      	ldr	r3, [r5, #0]
  40160e:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401610:	791b      	ldrb	r3, [r3, #4]
  401612:	42a3      	cmp	r3, r4
  401614:	d8f6      	bhi.n	401604 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
  401616:	2200      	movs	r2, #0
  401618:	4b02      	ldr	r3, [pc, #8]	; (401624 <udc_reset+0x38>)
  40161a:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  40161c:	2201      	movs	r2, #1
  40161e:	4b04      	ldr	r3, [pc, #16]	; (401630 <udc_reset+0x44>)
  401620:	801a      	strh	r2, [r3, #0]
  401622:	bd70      	pop	{r4, r5, r6, pc}
  401624:	200014f0 	.word	0x200014f0
  401628:	200014e4 	.word	0x200014e4
  40162c:	0040151d 	.word	0x0040151d
  401630:	200014ee 	.word	0x200014ee

00401634 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
  401634:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
  401636:	4b0c      	ldr	r3, [pc, #48]	; (401668 <udc_sof_notify+0x34>)
  401638:	781b      	ldrb	r3, [r3, #0]
  40163a:	b19b      	cbz	r3, 401664 <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40163c:	4b0b      	ldr	r3, [pc, #44]	; (40166c <udc_sof_notify+0x38>)
  40163e:	681b      	ldr	r3, [r3, #0]
  401640:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  401642:	7912      	ldrb	r2, [r2, #4]
  401644:	b172      	cbz	r2, 401664 <udc_sof_notify+0x30>
  401646:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401648:	4d08      	ldr	r5, [pc, #32]	; (40166c <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  40164a:	685b      	ldr	r3, [r3, #4]
  40164c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  401650:	691b      	ldr	r3, [r3, #16]
  401652:	b103      	cbz	r3, 401656 <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  401654:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
  401656:	3401      	adds	r4, #1
  401658:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  40165a:	682b      	ldr	r3, [r5, #0]
  40165c:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
  40165e:	7912      	ldrb	r2, [r2, #4]
  401660:	42a2      	cmp	r2, r4
  401662:	d8f2      	bhi.n	40164a <udc_sof_notify+0x16>
  401664:	bd38      	pop	{r3, r4, r5, pc}
  401666:	bf00      	nop
  401668:	200014f0 	.word	0x200014f0
  40166c:	200014e4 	.word	0x200014e4

00401670 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  401670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  401672:	4b90      	ldr	r3, [pc, #576]	; (4018b4 <udc_process_setup+0x244>)
  401674:	2200      	movs	r2, #0
  401676:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  401678:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  40167a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  40167c:	781b      	ldrb	r3, [r3, #0]
  40167e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401682:	f000 81d2 	beq.w	401a2a <udc_process_setup+0x3ba>
		if (udd_g_ctrlreq.req.wLength == 0) {
  401686:	4a8b      	ldr	r2, [pc, #556]	; (4018b4 <udc_process_setup+0x244>)
  401688:	88d2      	ldrh	r2, [r2, #6]
  40168a:	2a00      	cmp	r2, #0
  40168c:	f040 81d1 	bne.w	401a32 <udc_process_setup+0x3c2>
  401690:	e1c7      	b.n	401a22 <udc_process_setup+0x3b2>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  401692:	f013 031f 	ands.w	r3, r3, #31
  401696:	d165      	bne.n	401764 <udc_process_setup+0xf4>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  401698:	4986      	ldr	r1, [pc, #536]	; (4018b4 <udc_process_setup+0x244>)
  40169a:	7849      	ldrb	r1, [r1, #1]
  40169c:	2906      	cmp	r1, #6
  40169e:	d00b      	beq.n	4016b8 <udc_process_setup+0x48>
  4016a0:	2908      	cmp	r1, #8
  4016a2:	d057      	beq.n	401754 <udc_process_setup+0xe4>
  4016a4:	2900      	cmp	r1, #0
  4016a6:	d15d      	bne.n	401764 <udc_process_setup+0xf4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  4016a8:	2a02      	cmp	r2, #2
  4016aa:	f040 816a 	bne.w	401982 <udc_process_setup+0x312>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  4016ae:	4882      	ldr	r0, [pc, #520]	; (4018b8 <udc_process_setup+0x248>)
  4016b0:	2102      	movs	r1, #2
  4016b2:	4b82      	ldr	r3, [pc, #520]	; (4018bc <udc_process_setup+0x24c>)
  4016b4:	4798      	blx	r3
  4016b6:	e1c0      	b.n	401a3a <udc_process_setup+0x3ca>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4016b8:	4b7e      	ldr	r3, [pc, #504]	; (4018b4 <udc_process_setup+0x244>)
  4016ba:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  4016bc:	0a13      	lsrs	r3, r2, #8
  4016be:	3b01      	subs	r3, #1
  4016c0:	2b0e      	cmp	r3, #14
  4016c2:	f200 8155 	bhi.w	401970 <udc_process_setup+0x300>
  4016c6:	e8df f013 	tbh	[pc, r3, lsl #1]
  4016ca:	000f      	.short	0x000f
  4016cc:	00340016 	.word	0x00340016
  4016d0:	01530153 	.word	0x01530153
  4016d4:	01530153 	.word	0x01530153
  4016d8:	01530153 	.word	0x01530153
  4016dc:	01530153 	.word	0x01530153
  4016e0:	01530153 	.word	0x01530153
  4016e4:	002a0153 	.word	0x002a0153
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
  4016e8:	4b75      	ldr	r3, [pc, #468]	; (4018c0 <udc_process_setup+0x250>)
  4016ea:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
  4016ec:	4618      	mov	r0, r3
  4016ee:	7819      	ldrb	r1, [r3, #0]
  4016f0:	4b72      	ldr	r3, [pc, #456]	; (4018bc <udc_process_setup+0x24c>)
  4016f2:	4798      	blx	r3
  4016f4:	e025      	b.n	401742 <udc_process_setup+0xd2>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  4016f6:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  4016f8:	4b71      	ldr	r3, [pc, #452]	; (4018c0 <udc_process_setup+0x250>)
  4016fa:	681b      	ldr	r3, [r3, #0]
  4016fc:	7c5b      	ldrb	r3, [r3, #17]
  4016fe:	4293      	cmp	r3, r2
  401700:	f240 813f 	bls.w	401982 <udc_process_setup+0x312>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  401704:	4b6e      	ldr	r3, [pc, #440]	; (4018c0 <udc_process_setup+0x250>)
  401706:	685b      	ldr	r3, [r3, #4]
  401708:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
  40170c:	4618      	mov	r0, r3
  40170e:	8859      	ldrh	r1, [r3, #2]
  401710:	4b6a      	ldr	r3, [pc, #424]	; (4018bc <udc_process_setup+0x24c>)
  401712:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401714:	4b67      	ldr	r3, [pc, #412]	; (4018b4 <udc_process_setup+0x244>)
  401716:	689b      	ldr	r3, [r3, #8]
  401718:	2202      	movs	r2, #2
  40171a:	705a      	strb	r2, [r3, #1]
  40171c:	e011      	b.n	401742 <udc_process_setup+0xd2>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  40171e:	4b68      	ldr	r3, [pc, #416]	; (4018c0 <udc_process_setup+0x250>)
  401720:	689b      	ldr	r3, [r3, #8]
  401722:	2b00      	cmp	r3, #0
  401724:	f000 812d 	beq.w	401982 <udc_process_setup+0x312>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401728:	4618      	mov	r0, r3
  40172a:	8859      	ldrh	r1, [r3, #2]
  40172c:	4b63      	ldr	r3, [pc, #396]	; (4018bc <udc_process_setup+0x24c>)
  40172e:	4798      	blx	r3
  401730:	e007      	b.n	401742 <udc_process_setup+0xd2>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  401732:	f012 0fff 	tst.w	r2, #255	; 0xff
  401736:	f040 8124 	bne.w	401982 <udc_process_setup+0x312>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  40173a:	4862      	ldr	r0, [pc, #392]	; (4018c4 <udc_process_setup+0x254>)
  40173c:	2104      	movs	r1, #4
  40173e:	4b5f      	ldr	r3, [pc, #380]	; (4018bc <udc_process_setup+0x24c>)
  401740:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  401742:	4b5c      	ldr	r3, [pc, #368]	; (4018b4 <udc_process_setup+0x244>)
  401744:	88da      	ldrh	r2, [r3, #6]
  401746:	899b      	ldrh	r3, [r3, #12]
  401748:	4293      	cmp	r3, r2
  40174a:	f240 8176 	bls.w	401a3a <udc_process_setup+0x3ca>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  40174e:	4b59      	ldr	r3, [pc, #356]	; (4018b4 <udc_process_setup+0x244>)
  401750:	819a      	strh	r2, [r3, #12]
  401752:	e172      	b.n	401a3a <udc_process_setup+0x3ca>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
  401754:	2a01      	cmp	r2, #1
  401756:	f040 8114 	bne.w	401982 <udc_process_setup+0x312>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  40175a:	485b      	ldr	r0, [pc, #364]	; (4018c8 <udc_process_setup+0x258>)
  40175c:	2101      	movs	r1, #1
  40175e:	4b57      	ldr	r3, [pc, #348]	; (4018bc <udc_process_setup+0x24c>)
  401760:	4798      	blx	r3
  401762:	e16a      	b.n	401a3a <udc_process_setup+0x3ca>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  401764:	2b01      	cmp	r3, #1
  401766:	d127      	bne.n	4017b8 <udc_process_setup+0x148>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  401768:	4952      	ldr	r1, [pc, #328]	; (4018b4 <udc_process_setup+0x244>)
  40176a:	7849      	ldrb	r1, [r1, #1]
  40176c:	290a      	cmp	r1, #10
  40176e:	d123      	bne.n	4017b8 <udc_process_setup+0x148>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  401770:	2a01      	cmp	r2, #1
  401772:	f040 8106 	bne.w	401982 <udc_process_setup+0x312>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  401776:	4b54      	ldr	r3, [pc, #336]	; (4018c8 <udc_process_setup+0x258>)
  401778:	781b      	ldrb	r3, [r3, #0]
  40177a:	2b00      	cmp	r3, #0
  40177c:	f000 8101 	beq.w	401982 <udc_process_setup+0x312>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401780:	4b4c      	ldr	r3, [pc, #304]	; (4018b4 <udc_process_setup+0x244>)
  401782:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401784:	4b51      	ldr	r3, [pc, #324]	; (4018cc <udc_process_setup+0x25c>)
  401786:	681d      	ldr	r5, [r3, #0]
  401788:	682b      	ldr	r3, [r5, #0]
  40178a:	791b      	ldrb	r3, [r3, #4]
  40178c:	42a3      	cmp	r3, r4
  40178e:	f240 80f8 	bls.w	401982 <udc_process_setup+0x312>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401792:	4620      	mov	r0, r4
  401794:	2100      	movs	r1, #0
  401796:	4b4e      	ldr	r3, [pc, #312]	; (4018d0 <udc_process_setup+0x260>)
  401798:	4798      	blx	r3
  40179a:	2800      	cmp	r0, #0
  40179c:	f000 80f1 	beq.w	401982 <udc_process_setup+0x312>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4017a0:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
  4017a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  4017a6:	68db      	ldr	r3, [r3, #12]
  4017a8:	4798      	blx	r3
  4017aa:	4b4a      	ldr	r3, [pc, #296]	; (4018d4 <udc_process_setup+0x264>)
  4017ac:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  4017ae:	4618      	mov	r0, r3
  4017b0:	2101      	movs	r1, #1
  4017b2:	4b42      	ldr	r3, [pc, #264]	; (4018bc <udc_process_setup+0x24c>)
  4017b4:	4798      	blx	r3
  4017b6:	e140      	b.n	401a3a <udc_process_setup+0x3ca>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4017b8:	2b02      	cmp	r3, #2
  4017ba:	f040 80e2 	bne.w	401982 <udc_process_setup+0x312>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  4017be:	4b3d      	ldr	r3, [pc, #244]	; (4018b4 <udc_process_setup+0x244>)
  4017c0:	785b      	ldrb	r3, [r3, #1]
  4017c2:	2b00      	cmp	r3, #0
  4017c4:	f040 80d6 	bne.w	401974 <udc_process_setup+0x304>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  4017c8:	2a02      	cmp	r2, #2
  4017ca:	f040 80da 	bne.w	401982 <udc_process_setup+0x312>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  4017ce:	4b39      	ldr	r3, [pc, #228]	; (4018b4 <udc_process_setup+0x244>)
  4017d0:	7918      	ldrb	r0, [r3, #4]
  4017d2:	4b41      	ldr	r3, [pc, #260]	; (4018d8 <udc_process_setup+0x268>)
  4017d4:	4798      	blx	r3
  4017d6:	4b41      	ldr	r3, [pc, #260]	; (4018dc <udc_process_setup+0x26c>)
  4017d8:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  4017da:	4618      	mov	r0, r3
  4017dc:	2102      	movs	r1, #2
  4017de:	4b37      	ldr	r3, [pc, #220]	; (4018bc <udc_process_setup+0x24c>)
  4017e0:	4798      	blx	r3
  4017e2:	e12a      	b.n	401a3a <udc_process_setup+0x3ca>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4017e4:	f013 031f 	ands.w	r3, r3, #31
  4017e8:	f040 8082 	bne.w	4018f0 <udc_process_setup+0x280>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4017ec:	4a31      	ldr	r2, [pc, #196]	; (4018b4 <udc_process_setup+0x244>)
  4017ee:	7852      	ldrb	r2, [r2, #1]
  4017f0:	3a01      	subs	r2, #1
  4017f2:	2a08      	cmp	r2, #8
  4017f4:	d87c      	bhi.n	4018f0 <udc_process_setup+0x280>
  4017f6:	e8df f012 	tbh	[pc, r2, lsl #1]
  4017fa:	0012      	.short	0x0012
  4017fc:	00bf007b 	.word	0x00bf007b
  401800:	0009007b 	.word	0x0009007b
  401804:	007b007b 	.word	0x007b007b
  401808:	0022007b 	.word	0x0022007b
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  40180c:	4b29      	ldr	r3, [pc, #164]	; (4018b4 <udc_process_setup+0x244>)
  40180e:	88db      	ldrh	r3, [r3, #6]
  401810:	2b00      	cmp	r3, #0
  401812:	f040 80b6 	bne.w	401982 <udc_process_setup+0x312>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  401816:	4a32      	ldr	r2, [pc, #200]	; (4018e0 <udc_process_setup+0x270>)
  401818:	4b26      	ldr	r3, [pc, #152]	; (4018b4 <udc_process_setup+0x244>)
  40181a:	611a      	str	r2, [r3, #16]
  40181c:	e10d      	b.n	401a3a <udc_process_setup+0x3ca>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  40181e:	4b25      	ldr	r3, [pc, #148]	; (4018b4 <udc_process_setup+0x244>)
  401820:	88db      	ldrh	r3, [r3, #6]
  401822:	2b00      	cmp	r3, #0
  401824:	f040 80ad 	bne.w	401982 <udc_process_setup+0x312>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  401828:	4b22      	ldr	r3, [pc, #136]	; (4018b4 <udc_process_setup+0x244>)
  40182a:	885b      	ldrh	r3, [r3, #2]
  40182c:	2b01      	cmp	r3, #1
  40182e:	f040 80a8 	bne.w	401982 <udc_process_setup+0x312>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  401832:	4a21      	ldr	r2, [pc, #132]	; (4018b8 <udc_process_setup+0x248>)
  401834:	8813      	ldrh	r3, [r2, #0]
  401836:	f023 0302 	bic.w	r3, r3, #2
  40183a:	8013      	strh	r3, [r2, #0]
  40183c:	e0fd      	b.n	401a3a <udc_process_setup+0x3ca>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  40183e:	4b1d      	ldr	r3, [pc, #116]	; (4018b4 <udc_process_setup+0x244>)
  401840:	88db      	ldrh	r3, [r3, #6]
  401842:	2b00      	cmp	r3, #0
  401844:	f040 809d 	bne.w	401982 <udc_process_setup+0x312>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  401848:	4b26      	ldr	r3, [pc, #152]	; (4018e4 <udc_process_setup+0x274>)
  40184a:	4798      	blx	r3
  40184c:	2800      	cmp	r0, #0
  40184e:	f000 8098 	beq.w	401982 <udc_process_setup+0x312>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401852:	4b18      	ldr	r3, [pc, #96]	; (4018b4 <udc_process_setup+0x244>)
  401854:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
  401856:	4b1a      	ldr	r3, [pc, #104]	; (4018c0 <udc_process_setup+0x250>)
  401858:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  40185a:	7c5b      	ldrb	r3, [r3, #17]
  40185c:	429a      	cmp	r2, r3
  40185e:	f300 8090 	bgt.w	401982 <udc_process_setup+0x312>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
  401862:	4b21      	ldr	r3, [pc, #132]	; (4018e8 <udc_process_setup+0x278>)
  401864:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  401866:	4b13      	ldr	r3, [pc, #76]	; (4018b4 <udc_process_setup+0x244>)
  401868:	789b      	ldrb	r3, [r3, #2]
  40186a:	4a17      	ldr	r2, [pc, #92]	; (4018c8 <udc_process_setup+0x258>)
  40186c:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
  40186e:	2b00      	cmp	r3, #0
  401870:	f000 80e3 	beq.w	401a3a <udc_process_setup+0x3ca>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401874:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  401878:	3b01      	subs	r3, #1
  40187a:	4a11      	ldr	r2, [pc, #68]	; (4018c0 <udc_process_setup+0x250>)
  40187c:	6852      	ldr	r2, [r2, #4]
  40187e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  401882:	4912      	ldr	r1, [pc, #72]	; (4018cc <udc_process_setup+0x25c>)
  401884:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401886:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
  40188a:	791b      	ldrb	r3, [r3, #4]
  40188c:	2b00      	cmp	r3, #0
  40188e:	f000 80d4 	beq.w	401a3a <udc_process_setup+0x3ca>
  401892:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  401894:	4626      	mov	r6, r4
  401896:	4d15      	ldr	r5, [pc, #84]	; (4018ec <udc_process_setup+0x27c>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401898:	460f      	mov	r7, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  40189a:	4620      	mov	r0, r4
  40189c:	4631      	mov	r1, r6
  40189e:	47a8      	blx	r5
  4018a0:	2800      	cmp	r0, #0
  4018a2:	d06e      	beq.n	401982 <udc_process_setup+0x312>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  4018a4:	3401      	adds	r4, #1
  4018a6:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4018a8:	683b      	ldr	r3, [r7, #0]
  4018aa:	681b      	ldr	r3, [r3, #0]
  4018ac:	791b      	ldrb	r3, [r3, #4]
  4018ae:	42a3      	cmp	r3, r4
  4018b0:	d8f3      	bhi.n	40189a <udc_process_setup+0x22a>
  4018b2:	e0c2      	b.n	401a3a <udc_process_setup+0x3ca>
  4018b4:	20001600 	.word	0x20001600
  4018b8:	200014ee 	.word	0x200014ee
  4018bc:	00402fed 	.word	0x00402fed
  4018c0:	20000030 	.word	0x20000030
  4018c4:	2000002c 	.word	0x2000002c
  4018c8:	200014f0 	.word	0x200014f0
  4018cc:	200014e4 	.word	0x200014e4
  4018d0:	004014b5 	.word	0x004014b5
  4018d4:	200014ec 	.word	0x200014ec
  4018d8:	00403169 	.word	0x00403169
  4018dc:	200014e8 	.word	0x200014e8
  4018e0:	0040149d 	.word	0x0040149d
  4018e4:	00402fbd 	.word	0x00402fbd
  4018e8:	004015ed 	.word	0x004015ed
  4018ec:	00401585 	.word	0x00401585
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4018f0:	2b01      	cmp	r3, #1
  4018f2:	d119      	bne.n	401928 <udc_process_setup+0x2b8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  4018f4:	4a52      	ldr	r2, [pc, #328]	; (401a40 <udc_process_setup+0x3d0>)
  4018f6:	7852      	ldrb	r2, [r2, #1]
  4018f8:	2a0b      	cmp	r2, #11
  4018fa:	d115      	bne.n	401928 <udc_process_setup+0x2b8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  4018fc:	4b50      	ldr	r3, [pc, #320]	; (401a40 <udc_process_setup+0x3d0>)
  4018fe:	88db      	ldrh	r3, [r3, #6]
  401900:	2b00      	cmp	r3, #0
  401902:	d13e      	bne.n	401982 <udc_process_setup+0x312>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
  401904:	4b4f      	ldr	r3, [pc, #316]	; (401a44 <udc_process_setup+0x3d4>)
  401906:	781b      	ldrb	r3, [r3, #0]
  401908:	2b00      	cmp	r3, #0
  40190a:	d03a      	beq.n	401982 <udc_process_setup+0x312>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  40190c:	4b4c      	ldr	r3, [pc, #304]	; (401a40 <udc_process_setup+0x3d0>)
  40190e:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  401910:	885d      	ldrh	r5, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  401912:	4620      	mov	r0, r4
  401914:	4b4c      	ldr	r3, [pc, #304]	; (401a48 <udc_process_setup+0x3d8>)
  401916:	4798      	blx	r3
  401918:	2800      	cmp	r0, #0
  40191a:	d032      	beq.n	401982 <udc_process_setup+0x312>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  40191c:	4620      	mov	r0, r4
  40191e:	b2e9      	uxtb	r1, r5
  401920:	4b4a      	ldr	r3, [pc, #296]	; (401a4c <udc_process_setup+0x3dc>)
  401922:	4798      	blx	r3
  401924:	4603      	mov	r3, r0
  401926:	e02a      	b.n	40197e <udc_process_setup+0x30e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  401928:	2b02      	cmp	r3, #2
  40192a:	d12a      	bne.n	401982 <udc_process_setup+0x312>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  40192c:	4b44      	ldr	r3, [pc, #272]	; (401a40 <udc_process_setup+0x3d0>)
  40192e:	785b      	ldrb	r3, [r3, #1]
  401930:	2b01      	cmp	r3, #1
  401932:	d002      	beq.n	40193a <udc_process_setup+0x2ca>
  401934:	2b03      	cmp	r3, #3
  401936:	d00c      	beq.n	401952 <udc_process_setup+0x2e2>
  401938:	e020      	b.n	40197c <udc_process_setup+0x30c>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  40193a:	4b41      	ldr	r3, [pc, #260]	; (401a40 <udc_process_setup+0x3d0>)
  40193c:	88db      	ldrh	r3, [r3, #6]
  40193e:	bb03      	cbnz	r3, 401982 <udc_process_setup+0x312>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401940:	4b3f      	ldr	r3, [pc, #252]	; (401a40 <udc_process_setup+0x3d0>)
  401942:	885b      	ldrh	r3, [r3, #2]
  401944:	b9eb      	cbnz	r3, 401982 <udc_process_setup+0x312>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401946:	4b3e      	ldr	r3, [pc, #248]	; (401a40 <udc_process_setup+0x3d0>)
  401948:	7918      	ldrb	r0, [r3, #4]
  40194a:	4b41      	ldr	r3, [pc, #260]	; (401a50 <udc_process_setup+0x3e0>)
  40194c:	4798      	blx	r3
  40194e:	4603      	mov	r3, r0
  401950:	e015      	b.n	40197e <udc_process_setup+0x30e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
  401952:	4b3b      	ldr	r3, [pc, #236]	; (401a40 <udc_process_setup+0x3d0>)
  401954:	88db      	ldrh	r3, [r3, #6]
  401956:	b9a3      	cbnz	r3, 401982 <udc_process_setup+0x312>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401958:	4b39      	ldr	r3, [pc, #228]	; (401a40 <udc_process_setup+0x3d0>)
  40195a:	885b      	ldrh	r3, [r3, #2]
  40195c:	b98b      	cbnz	r3, 401982 <udc_process_setup+0x312>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  40195e:	4c38      	ldr	r4, [pc, #224]	; (401a40 <udc_process_setup+0x3d0>)
  401960:	7920      	ldrb	r0, [r4, #4]
  401962:	4b3c      	ldr	r3, [pc, #240]	; (401a54 <udc_process_setup+0x3e4>)
  401964:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401966:	7920      	ldrb	r0, [r4, #4]
  401968:	4b3b      	ldr	r3, [pc, #236]	; (401a58 <udc_process_setup+0x3e8>)
  40196a:	4798      	blx	r3
  40196c:	4603      	mov	r3, r0
  40196e:	e006      	b.n	40197e <udc_process_setup+0x30e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  401970:	2300      	movs	r3, #0
  401972:	e004      	b.n	40197e <udc_process_setup+0x30e>
				break;
			}
		}
#endif
	}
	return false;
  401974:	2300      	movs	r3, #0
  401976:	e002      	b.n	40197e <udc_process_setup+0x30e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  401978:	2300      	movs	r3, #0
  40197a:	e000      	b.n	40197e <udc_process_setup+0x30e>
				break;
			}
		}
#endif
	}
	return false;
  40197c:	2300      	movs	r3, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
  40197e:	2b00      	cmp	r3, #0
  401980:	d15c      	bne.n	401a3c <udc_process_setup+0x3cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  401982:	4b2f      	ldr	r3, [pc, #188]	; (401a40 <udc_process_setup+0x3d0>)
  401984:	781b      	ldrb	r3, [r3, #0]
  401986:	f003 031f 	and.w	r3, r3, #31
  40198a:	2b01      	cmp	r3, #1
  40198c:	d11e      	bne.n	4019cc <udc_process_setup+0x35c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  40198e:	4b2d      	ldr	r3, [pc, #180]	; (401a44 <udc_process_setup+0x3d4>)
  401990:	781b      	ldrb	r3, [r3, #0]
  401992:	b1db      	cbz	r3, 4019cc <udc_process_setup+0x35c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401994:	4b2a      	ldr	r3, [pc, #168]	; (401a40 <udc_process_setup+0x3d0>)
  401996:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401998:	4b30      	ldr	r3, [pc, #192]	; (401a5c <udc_process_setup+0x3ec>)
  40199a:	681d      	ldr	r5, [r3, #0]
  40199c:	682b      	ldr	r3, [r5, #0]
  40199e:	791b      	ldrb	r3, [r3, #4]
  4019a0:	42a3      	cmp	r3, r4
  4019a2:	d913      	bls.n	4019cc <udc_process_setup+0x35c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  4019a4:	4620      	mov	r0, r4
  4019a6:	2100      	movs	r1, #0
  4019a8:	4b2d      	ldr	r3, [pc, #180]	; (401a60 <udc_process_setup+0x3f0>)
  4019aa:	4798      	blx	r3
  4019ac:	b170      	cbz	r0, 4019cc <udc_process_setup+0x35c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  4019ae:	686b      	ldr	r3, [r5, #4]
  4019b0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4019b4:	68eb      	ldr	r3, [r5, #12]
  4019b6:	4798      	blx	r3
  4019b8:	4601      	mov	r1, r0
  4019ba:	4620      	mov	r0, r4
  4019bc:	4b28      	ldr	r3, [pc, #160]	; (401a60 <udc_process_setup+0x3f0>)
  4019be:	4798      	blx	r3
  4019c0:	b120      	cbz	r0, 4019cc <udc_process_setup+0x35c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  4019c2:	68ab      	ldr	r3, [r5, #8]
  4019c4:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
  4019c6:	4603      	mov	r3, r0
  4019c8:	2800      	cmp	r0, #0
  4019ca:	d137      	bne.n	401a3c <udc_process_setup+0x3cc>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  4019cc:	4b1c      	ldr	r3, [pc, #112]	; (401a40 <udc_process_setup+0x3d0>)
  4019ce:	781b      	ldrb	r3, [r3, #0]
  4019d0:	f003 031f 	and.w	r3, r3, #31
  4019d4:	2b02      	cmp	r3, #2
  4019d6:	d126      	bne.n	401a26 <udc_process_setup+0x3b6>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4019d8:	4b1a      	ldr	r3, [pc, #104]	; (401a44 <udc_process_setup+0x3d4>)
  4019da:	781b      	ldrb	r3, [r3, #0]
  4019dc:	b1eb      	cbz	r3, 401a1a <udc_process_setup+0x3aa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4019de:	4b1f      	ldr	r3, [pc, #124]	; (401a5c <udc_process_setup+0x3ec>)
  4019e0:	681a      	ldr	r2, [r3, #0]
  4019e2:	6813      	ldr	r3, [r2, #0]
  4019e4:	791b      	ldrb	r3, [r3, #4]
  4019e6:	b1d3      	cbz	r3, 401a1e <udc_process_setup+0x3ae>
  4019e8:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4019ea:	4e1d      	ldr	r6, [pc, #116]	; (401a60 <udc_process_setup+0x3f0>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4019ec:	4f1b      	ldr	r7, [pc, #108]	; (401a5c <udc_process_setup+0x3ec>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  4019ee:	6853      	ldr	r3, [r2, #4]
  4019f0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4019f4:	68eb      	ldr	r3, [r5, #12]
  4019f6:	4798      	blx	r3
  4019f8:	4601      	mov	r1, r0
  4019fa:	4620      	mov	r0, r4
  4019fc:	47b0      	blx	r6
  4019fe:	4603      	mov	r3, r0
  401a00:	b1e0      	cbz	r0, 401a3c <udc_process_setup+0x3cc>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  401a02:	68ab      	ldr	r3, [r5, #8]
  401a04:	4798      	blx	r3
  401a06:	4603      	mov	r3, r0
  401a08:	b9c0      	cbnz	r0, 401a3c <udc_process_setup+0x3cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
  401a0a:	3401      	adds	r4, #1
  401a0c:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401a0e:	683a      	ldr	r2, [r7, #0]
  401a10:	6811      	ldr	r1, [r2, #0]
  401a12:	7909      	ldrb	r1, [r1, #4]
  401a14:	42a1      	cmp	r1, r4
  401a16:	d8ea      	bhi.n	4019ee <udc_process_setup+0x37e>
  401a18:	e010      	b.n	401a3c <udc_process_setup+0x3cc>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
  401a1a:	2300      	movs	r3, #0
  401a1c:	e00e      	b.n	401a3c <udc_process_setup+0x3cc>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
  401a1e:	2300      	movs	r3, #0
  401a20:	e00c      	b.n	401a3c <udc_process_setup+0x3cc>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
  401a22:	2300      	movs	r3, #0
  401a24:	e00a      	b.n	401a3c <udc_process_setup+0x3cc>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  401a26:	2300      	movs	r3, #0
  401a28:	e008      	b.n	401a3c <udc_process_setup+0x3cc>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  401a2a:	f013 0f60 	tst.w	r3, #96	; 0x60
  401a2e:	d1a8      	bne.n	401982 <udc_process_setup+0x312>
  401a30:	e6d8      	b.n	4017e4 <udc_process_setup+0x174>
  401a32:	f013 0f60 	tst.w	r3, #96	; 0x60
  401a36:	d1a4      	bne.n	401982 <udc_process_setup+0x312>
  401a38:	e62b      	b.n	401692 <udc_process_setup+0x22>
		if (udc_reqstd()) {
			return true;
  401a3a:	2301      	movs	r3, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
  401a3c:	4618      	mov	r0, r3
  401a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a40:	20001600 	.word	0x20001600
  401a44:	200014f0 	.word	0x200014f0
  401a48:	0040151d 	.word	0x0040151d
  401a4c:	00401585 	.word	0x00401585
  401a50:	00403295 	.word	0x00403295
  401a54:	004034f9 	.word	0x004034f9
  401a58:	004031a9 	.word	0x004031a9
  401a5c:	200014e4 	.word	0x200014e4
  401a60:	004014b5 	.word	0x004014b5

00401a64 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  401a64:	b9a8      	cbnz	r0, 401a92 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  401a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a6a:	460c      	mov	r4, r1
  401a6c:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  401a6e:	2a00      	cmp	r2, #0
  401a70:	dd0a      	ble.n	401a88 <_read+0x24>
  401a72:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  401a74:	4e08      	ldr	r6, [pc, #32]	; (401a98 <_read+0x34>)
  401a76:	4d09      	ldr	r5, [pc, #36]	; (401a9c <_read+0x38>)
  401a78:	6830      	ldr	r0, [r6, #0]
  401a7a:	4621      	mov	r1, r4
  401a7c:	682b      	ldr	r3, [r5, #0]
  401a7e:	4798      	blx	r3
		ptr++;
  401a80:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  401a82:	42bc      	cmp	r4, r7
  401a84:	d1f8      	bne.n	401a78 <_read+0x14>
  401a86:	e001      	b.n	401a8c <_read+0x28>
  401a88:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
  401a8c:	4640      	mov	r0, r8
  401a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  401a92:	f04f 30ff 	mov.w	r0, #4294967295
  401a96:	4770      	bx	lr
  401a98:	2000161c 	.word	0x2000161c
  401a9c:	200015fc 	.word	0x200015fc

00401aa0 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * unused, char data)
{
  401aa0:	b508      	push	{r3, lr}
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
  401aa2:	4b06      	ldr	r3, [pc, #24]	; (401abc <stdio_usb_putchar+0x1c>)
  401aa4:	781b      	ldrb	r3, [r3, #0]
  401aa6:	b13b      	cbz	r3, 401ab8 <stdio_usb_putchar+0x18>
  401aa8:	4608      	mov	r0, r1
		return 0;  // -1
	}

	return udi_cdc_putc(data) ? 0 : -1;
  401aaa:	4b05      	ldr	r3, [pc, #20]	; (401ac0 <stdio_usb_putchar+0x20>)
  401aac:	4798      	blx	r3
  401aae:	fab0 f080 	clz	r0, r0
  401ab2:	0940      	lsrs	r0, r0, #5
  401ab4:	4240      	negs	r0, r0
  401ab6:	bd08      	pop	{r3, pc}
{
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
		return 0;  // -1
  401ab8:	2000      	movs	r0, #0
	}

	return udi_cdc_putc(data) ? 0 : -1;
}
  401aba:	bd08      	pop	{r3, pc}
  401abc:	200014f8 	.word	0x200014f8
  401ac0:	00401449 	.word	0x00401449

00401ac4 <stdio_usb_getchar>:
void stdio_usb_getchar (void volatile * unused, char *data)
{
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
  401ac4:	4b05      	ldr	r3, [pc, #20]	; (401adc <stdio_usb_getchar+0x18>)
  401ac6:	781b      	ldrb	r3, [r3, #0]
  401ac8:	b90b      	cbnz	r3, 401ace <stdio_usb_getchar+0xa>
		*data = 0;  // -1
  401aca:	700b      	strb	r3, [r1, #0]
  401acc:	4770      	bx	lr

	return udi_cdc_putc(data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * unused, char *data)
{
  401ace:	b510      	push	{r4, lr}
  401ad0:	460c      	mov	r4, r1
	if (!stdio_usb_interface_enable) {
		*data = 0;  // -1
		return;
	}

	*data = (char)udi_cdc_getc();
  401ad2:	4b03      	ldr	r3, [pc, #12]	; (401ae0 <stdio_usb_getchar+0x1c>)
  401ad4:	4798      	blx	r3
  401ad6:	7020      	strb	r0, [r4, #0]
  401ad8:	bd10      	pop	{r4, pc}
  401ada:	bf00      	nop
  401adc:	200014f8 	.word	0x200014f8
  401ae0:	00401315 	.word	0x00401315

00401ae4 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
  401ae4:	b570      	push	{r4, r5, r6, lr}
	stdio_base = NULL;
  401ae6:	2400      	movs	r4, #0
  401ae8:	4b0a      	ldr	r3, [pc, #40]	; (401b14 <stdio_usb_init+0x30>)
  401aea:	601c      	str	r4, [r3, #0]
	ptr_put = stdio_usb_putchar;
  401aec:	4a0a      	ldr	r2, [pc, #40]	; (401b18 <stdio_usb_init+0x34>)
  401aee:	4b0b      	ldr	r3, [pc, #44]	; (401b1c <stdio_usb_init+0x38>)
  401af0:	601a      	str	r2, [r3, #0]
	ptr_get = stdio_usb_getchar;
  401af2:	4a0b      	ldr	r2, [pc, #44]	; (401b20 <stdio_usb_init+0x3c>)
  401af4:	4b0b      	ldr	r3, [pc, #44]	; (401b24 <stdio_usb_init+0x40>)
  401af6:	601a      	str	r2, [r3, #0]
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
  401af8:	4b0b      	ldr	r3, [pc, #44]	; (401b28 <stdio_usb_init+0x44>)
  401afa:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  401afc:	4e0b      	ldr	r6, [pc, #44]	; (401b2c <stdio_usb_init+0x48>)
  401afe:	6833      	ldr	r3, [r6, #0]
  401b00:	6898      	ldr	r0, [r3, #8]
  401b02:	4621      	mov	r1, r4
  401b04:	4d0a      	ldr	r5, [pc, #40]	; (401b30 <stdio_usb_init+0x4c>)
  401b06:	47a8      	blx	r5
	setbuf(stdin, NULL);
  401b08:	6833      	ldr	r3, [r6, #0]
  401b0a:	6858      	ldr	r0, [r3, #4]
  401b0c:	4621      	mov	r1, r4
  401b0e:	47a8      	blx	r5
  401b10:	bd70      	pop	{r4, r5, r6, pc}
  401b12:	bf00      	nop
  401b14:	2000161c 	.word	0x2000161c
  401b18:	00401aa1 	.word	0x00401aa1
  401b1c:	20001618 	.word	0x20001618
  401b20:	00401ac5 	.word	0x00401ac5
  401b24:	200015fc 	.word	0x200015fc
  401b28:	004015e1 	.word	0x004015e1
  401b2c:	200004d0 	.word	0x200004d0
  401b30:	004045ad 	.word	0x004045ad

00401b34 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  401b34:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  401b36:	2401      	movs	r4, #1
  401b38:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  401b3a:	2400      	movs	r4, #0
  401b3c:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  401b3e:	f240 2502 	movw	r5, #514	; 0x202
  401b42:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  401b46:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  401b4a:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  401b4e:	6845      	ldr	r5, [r0, #4]
  401b50:	432b      	orrs	r3, r5
	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
	p_adc->ADC_RCR = 0;
	p_adc->ADC_RNCR = 0;

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  401b52:	0052      	lsls	r2, r2, #1
  401b54:	fbb1 f1f2 	udiv	r1, r1, r2
  401b58:	1e4a      	subs	r2, r1, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  401b5a:	0212      	lsls	r2, r2, #8
  401b5c:	b292      	uxth	r2, r2
  401b5e:	4313      	orrs	r3, r2
  401b60:	6043      	str	r3, [r0, #4]
	return 0;
}
  401b62:	4620      	mov	r0, r4
  401b64:	bc30      	pop	{r4, r5}
  401b66:	4770      	bx	lr

00401b68 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
  401b68:	6843      	ldr	r3, [r0, #4]
  401b6a:	f023 0310 	bic.w	r3, r3, #16
  401b6e:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
  401b70:	6843      	ldr	r3, [r0, #4]
  401b72:	4319      	orrs	r1, r3
  401b74:	6041      	str	r1, [r0, #4]
  401b76:	4770      	bx	lr

00401b78 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  401b78:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  401b7a:	6844      	ldr	r4, [r0, #4]
  401b7c:	4322      	orrs	r2, r4
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  401b7e:	0609      	lsls	r1, r1, #24
  401b80:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
  401b84:	430a      	orrs	r2, r1
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  401b86:	071b      	lsls	r3, r3, #28
  401b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
  401b8c:	4313      	orrs	r3, r2
  401b8e:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
  401b90:	f85d 4b04 	ldr.w	r4, [sp], #4
  401b94:	4770      	bx	lr
  401b96:	bf00      	nop

00401b98 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  401b98:	2302      	movs	r3, #2
  401b9a:	6003      	str	r3, [r0, #0]
  401b9c:	4770      	bx	lr
  401b9e:	bf00      	nop

00401ba0 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  401ba0:	2301      	movs	r3, #1
  401ba2:	408b      	lsls	r3, r1
  401ba4:	6103      	str	r3, [r0, #16]
  401ba6:	4770      	bx	lr

00401ba8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  401ba8:	b410      	push	{r4}
  401baa:	0189      	lsls	r1, r1, #6
  401bac:	1843      	adds	r3, r0, r1
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  401bae:	2402      	movs	r4, #2
  401bb0:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401bb2:	f04f 31ff 	mov.w	r1, #4294967295
  401bb6:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  401bb8:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  401bba:	605a      	str	r2, [r3, #4]
}
  401bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
  401bc0:	4770      	bx	lr
  401bc2:	bf00      	nop

00401bc4 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  401bc4:	0189      	lsls	r1, r1, #6
  401bc6:	2305      	movs	r3, #5
  401bc8:	5043      	str	r3, [r0, r1]
  401bca:	4770      	bx	lr

00401bcc <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  401bcc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401bd0:	61ca      	str	r2, [r1, #28]
  401bd2:	4770      	bx	lr

00401bd4 <tc_enable_interrupt>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	tc_channel->TC_IER = ul_sources;
  401bd4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401bd8:	624a      	str	r2, [r1, #36]	; 0x24
  401bda:	4770      	bx	lr

00401bdc <tc_get_status>:
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	return tc_channel->TC_SR;
  401bdc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  401be0:	6a08      	ldr	r0, [r1, #32]
}
  401be2:	4770      	bx	lr

00401be4 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  401be4:	b4f0      	push	{r4, r5, r6, r7}
  401be6:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401be8:	2402      	movs	r4, #2
  401bea:	9401      	str	r4, [sp, #4]
  401bec:	2408      	movs	r4, #8
  401bee:	9402      	str	r4, [sp, #8]
  401bf0:	2420      	movs	r4, #32
  401bf2:	9403      	str	r4, [sp, #12]
  401bf4:	2480      	movs	r4, #128	; 0x80
  401bf6:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  401bf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  401bfa:	0be4      	lsrs	r4, r4, #15
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401bfc:	9405      	str	r4, [sp, #20]
	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
  401bfe:	0c4c      	lsrs	r4, r1, #17
		if (ul_freq > ul_high) {
  401c00:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  401c04:	d81b      	bhi.n	401c3e <tc_find_mck_divisor+0x5a>
			return 0;
		} else if (ul_freq >= ul_low) {
  401c06:	42a0      	cmp	r0, r4
  401c08:	d21f      	bcs.n	401c4a <tc_find_mck_divisor+0x66>
  401c0a:	ae01      	add	r6, sp, #4
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  401c0c:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  401c0e:	f856 4f04 	ldr.w	r4, [r6, #4]!
  401c12:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  401c16:	0c27      	lsrs	r7, r4, #16
		if (ul_freq > ul_high) {
  401c18:	4284      	cmp	r4, r0
  401c1a:	d312      	bcc.n	401c42 <tc_find_mck_divisor+0x5e>
			return 0;
		} else if (ul_freq >= ul_low) {
  401c1c:	4287      	cmp	r7, r0
  401c1e:	d915      	bls.n	401c4c <tc_find_mck_divisor+0x68>
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
  401c20:	3501      	adds	r5, #1
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  401c22:	2d05      	cmp	r5, #5
  401c24:	d1f3      	bne.n	401c0e <tc_find_mck_divisor+0x2a>
		} else if (ul_freq >= ul_low) {
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  401c26:	2000      	movs	r0, #0
  401c28:	e013      	b.n	401c52 <tc_find_mck_divisor+0x6e>
	}

	/*  Store results. */
	if (p_uldiv) {
		*p_uldiv = divisors[ul_index];
  401c2a:	a906      	add	r1, sp, #24
  401c2c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  401c30:	f851 1c14 	ldr.w	r1, [r1, #-20]
  401c34:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  401c36:	b133      	cbz	r3, 401c46 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  401c38:	601d      	str	r5, [r3, #0]
	}

	return 1;
  401c3a:	2001      	movs	r0, #1
  401c3c:	e009      	b.n	401c52 <tc_find_mck_divisor+0x6e>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
			return 0;
  401c3e:	2000      	movs	r0, #0
  401c40:	e007      	b.n	401c52 <tc_find_mck_divisor+0x6e>
  401c42:	2000      	movs	r0, #0
  401c44:	e005      	b.n	401c52 <tc_find_mck_divisor+0x6e>

	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
  401c46:	2001      	movs	r0, #1
  401c48:	e003      	b.n	401c52 <tc_find_mck_divisor+0x6e>
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  401c4a:	2500      	movs	r5, #0
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  401c4c:	2a00      	cmp	r2, #0
  401c4e:	d1ec      	bne.n	401c2a <tc_find_mck_divisor+0x46>
  401c50:	e7f1      	b.n	401c36 <tc_find_mck_divisor+0x52>
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  401c52:	b006      	add	sp, #24
  401c54:	bcf0      	pop	{r4, r5, r6, r7}
  401c56:	4770      	bx	lr

00401c58 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401c5c:	4681      	mov	r9, r0
  401c5e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401c60:	4b12      	ldr	r3, [pc, #72]	; (401cac <pio_handler_process+0x54>)
  401c62:	4798      	blx	r3
  401c64:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401c66:	4648      	mov	r0, r9
  401c68:	4b11      	ldr	r3, [pc, #68]	; (401cb0 <pio_handler_process+0x58>)
  401c6a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401c6c:	4005      	ands	r5, r0
  401c6e:	d013      	beq.n	401c98 <pio_handler_process+0x40>
  401c70:	4c10      	ldr	r4, [pc, #64]	; (401cb4 <pio_handler_process+0x5c>)
  401c72:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401c76:	6823      	ldr	r3, [r4, #0]
  401c78:	4543      	cmp	r3, r8
  401c7a:	d108      	bne.n	401c8e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401c7c:	6861      	ldr	r1, [r4, #4]
  401c7e:	4229      	tst	r1, r5
  401c80:	d005      	beq.n	401c8e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401c82:	68e3      	ldr	r3, [r4, #12]
  401c84:	4640      	mov	r0, r8
  401c86:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401c88:	6863      	ldr	r3, [r4, #4]
  401c8a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401c8e:	42b4      	cmp	r4, r6
  401c90:	d002      	beq.n	401c98 <pio_handler_process+0x40>
  401c92:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  401c94:	2d00      	cmp	r5, #0
  401c96:	d1ee      	bne.n	401c76 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  401c98:	4b07      	ldr	r3, [pc, #28]	; (401cb8 <pio_handler_process+0x60>)
  401c9a:	681b      	ldr	r3, [r3, #0]
  401c9c:	b123      	cbz	r3, 401ca8 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  401c9e:	4b07      	ldr	r3, [pc, #28]	; (401cbc <pio_handler_process+0x64>)
  401ca0:	681b      	ldr	r3, [r3, #0]
  401ca2:	b10b      	cbz	r3, 401ca8 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  401ca4:	4648      	mov	r0, r9
  401ca6:	4798      	blx	r3
  401ca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401cac:	0040391d 	.word	0x0040391d
  401cb0:	00403921 	.word	0x00403921
  401cb4:	20001500 	.word	0x20001500
  401cb8:	20001620 	.word	0x20001620
  401cbc:	200014fc 	.word	0x200014fc

00401cc0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401cc0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401cc2:	4802      	ldr	r0, [pc, #8]	; (401ccc <PIOA_Handler+0xc>)
  401cc4:	210b      	movs	r1, #11
  401cc6:	4b02      	ldr	r3, [pc, #8]	; (401cd0 <PIOA_Handler+0x10>)
  401cc8:	4798      	blx	r3
  401cca:	bd08      	pop	{r3, pc}
  401ccc:	400e0e00 	.word	0x400e0e00
  401cd0:	00401c59 	.word	0x00401c59

00401cd4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401cd4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401cd6:	4802      	ldr	r0, [pc, #8]	; (401ce0 <PIOB_Handler+0xc>)
  401cd8:	210c      	movs	r1, #12
  401cda:	4b02      	ldr	r3, [pc, #8]	; (401ce4 <PIOB_Handler+0x10>)
  401cdc:	4798      	blx	r3
  401cde:	bd08      	pop	{r3, pc}
  401ce0:	400e1000 	.word	0x400e1000
  401ce4:	00401c59 	.word	0x00401c59

00401ce8 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  401ce8:	6081      	str	r1, [r0, #8]
  401cea:	4770      	bx	lr

00401cec <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
  401cec:	60c1      	str	r1, [r0, #12]
  401cee:	4770      	bx	lr

00401cf0 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
  401cf0:	6940      	ldr	r0, [r0, #20]
}
  401cf2:	4770      	bx	lr

00401cf4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  401cf4:	6943      	ldr	r3, [r0, #20]
  401cf6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401cfa:	bf1a      	itte	ne
  401cfc:	61c1      	strne	r1, [r0, #28]
	return 0;
  401cfe:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  401d00:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  401d02:	4770      	bx	lr

00401d04 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  401d04:	6943      	ldr	r3, [r0, #20]
  401d06:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401d0a:	bf1d      	ittte	ne
  401d0c:	6983      	ldrne	r3, [r0, #24]
  401d0e:	700b      	strbne	r3, [r1, #0]
	return 0;
  401d10:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  401d12:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  401d14:	4770      	bx	lr
  401d16:	bf00      	nop

00401d18 <udd_ctrl_init>:
	cpu_irq_restore(flags);
}

static void udd_ctrl_init(void)
{
	udd_g_ctrlreq.callback = NULL;
  401d18:	4a03      	ldr	r2, [pc, #12]	; (401d28 <udd_ctrl_init+0x10>)
  401d1a:	2300      	movs	r3, #0
  401d1c:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  401d1e:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
  401d20:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  401d22:	4a02      	ldr	r2, [pc, #8]	; (401d2c <udd_ctrl_init+0x14>)
  401d24:	7013      	strb	r3, [r2, #0]
  401d26:	4770      	bx	lr
  401d28:	20001600 	.word	0x20001600
  401d2c:	200015b4 	.word	0x200015b4

00401d30 <udd_ctrl_stall_data>:
	udd_ack_bank0_received(0);
}


static void udd_ctrl_stall_data(void)
{
  401d30:	b082      	sub	sp, #8
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  401d32:	2205      	movs	r2, #5
  401d34:	4b0e      	ldr	r3, [pc, #56]	; (401d70 <udd_ctrl_stall_data+0x40>)
  401d36:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  401d38:	4a0e      	ldr	r2, [pc, #56]	; (401d74 <udd_ctrl_stall_data+0x44>)
  401d3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d3c:	9300      	str	r3, [sp, #0]
  401d3e:	9b00      	ldr	r3, [sp, #0]
  401d40:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401d44:	9300      	str	r3, [sp, #0]
  401d46:	9b00      	ldr	r3, [sp, #0]
  401d48:	f043 0320 	orr.w	r3, r3, #32
  401d4c:	9300      	str	r3, [sp, #0]
  401d4e:	9b00      	ldr	r3, [sp, #0]
  401d50:	6313      	str	r3, [r2, #48]	; 0x30
  401d52:	2300      	movs	r3, #0
  401d54:	9301      	str	r3, [sp, #4]
  401d56:	9b01      	ldr	r3, [sp, #4]
  401d58:	2b13      	cmp	r3, #19
  401d5a:	d806      	bhi.n	401d6a <udd_ctrl_stall_data+0x3a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401d5c:	bf00      	nop
  401d5e:	9b01      	ldr	r3, [sp, #4]
  401d60:	3301      	adds	r3, #1
  401d62:	9301      	str	r3, [sp, #4]
  401d64:	9b01      	ldr	r3, [sp, #4]
  401d66:	2b13      	cmp	r3, #19
  401d68:	d9f8      	bls.n	401d5c <udd_ctrl_stall_data+0x2c>
}
  401d6a:	b002      	add	sp, #8
  401d6c:	4770      	bx	lr
  401d6e:	bf00      	nop
  401d70:	200015b4 	.word	0x200015b4
  401d74:	40034000 	.word	0x40034000

00401d78 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  401d78:	b082      	sub	sp, #8
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  401d7a:	2203      	movs	r2, #3
  401d7c:	4b0e      	ldr	r3, [pc, #56]	; (401db8 <udd_ctrl_send_zlp_in+0x40>)
  401d7e:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  401d80:	4a0e      	ldr	r2, [pc, #56]	; (401dbc <udd_ctrl_send_zlp_in+0x44>)
  401d82:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401d84:	9300      	str	r3, [sp, #0]
  401d86:	9b00      	ldr	r3, [sp, #0]
  401d88:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401d8c:	9300      	str	r3, [sp, #0]
  401d8e:	9b00      	ldr	r3, [sp, #0]
  401d90:	f043 0310 	orr.w	r3, r3, #16
  401d94:	9300      	str	r3, [sp, #0]
  401d96:	9b00      	ldr	r3, [sp, #0]
  401d98:	6313      	str	r3, [r2, #48]	; 0x30
  401d9a:	2300      	movs	r3, #0
  401d9c:	9301      	str	r3, [sp, #4]
  401d9e:	9b01      	ldr	r3, [sp, #4]
  401da0:	2b13      	cmp	r3, #19
  401da2:	d806      	bhi.n	401db2 <udd_ctrl_send_zlp_in+0x3a>
  401da4:	bf00      	nop
  401da6:	9b01      	ldr	r3, [sp, #4]
  401da8:	3301      	adds	r3, #1
  401daa:	9301      	str	r3, [sp, #4]
  401dac:	9b01      	ldr	r3, [sp, #4]
  401dae:	2b13      	cmp	r3, #19
  401db0:	d9f8      	bls.n	401da4 <udd_ctrl_send_zlp_in+0x2c>
}
  401db2:	b002      	add	sp, #8
  401db4:	4770      	bx	lr
  401db6:	bf00      	nop
  401db8:	200015b4 	.word	0x200015b4
  401dbc:	40034000 	.word	0x40034000

00401dc0 <udd_ctrl_endofrequest>:
	// because the buffer of control endpoint is already free
}


static void udd_ctrl_endofrequest(void)
{
  401dc0:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  401dc2:	4b02      	ldr	r3, [pc, #8]	; (401dcc <udd_ctrl_endofrequest+0xc>)
  401dc4:	691b      	ldr	r3, [r3, #16]
  401dc6:	b103      	cbz	r3, 401dca <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
  401dc8:	4798      	blx	r3
  401dca:	bd08      	pop	{r3, pc}
  401dcc:	20001600 	.word	0x20001600

00401dd0 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
  401dd0:	b530      	push	{r4, r5, lr}
  401dd2:	b08b      	sub	sp, #44	; 0x2c
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  401dd4:	4b75      	ldr	r3, [pc, #468]	; (401fac <udd_ctrl_in_sent+0x1dc>)
  401dd6:	781b      	ldrb	r3, [r3, #0]
  401dd8:	2b03      	cmp	r3, #3
  401dda:	d11d      	bne.n	401e18 <udd_ctrl_in_sent+0x48>
		// Ack
		udd_ack_in_sent(0);
  401ddc:	4a74      	ldr	r2, [pc, #464]	; (401fb0 <udd_ctrl_in_sent+0x1e0>)
  401dde:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401de0:	9300      	str	r3, [sp, #0]
  401de2:	9b00      	ldr	r3, [sp, #0]
  401de4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401de8:	9300      	str	r3, [sp, #0]
  401dea:	9b00      	ldr	r3, [sp, #0]
  401dec:	f023 0301 	bic.w	r3, r3, #1
  401df0:	9300      	str	r3, [sp, #0]
  401df2:	9b00      	ldr	r3, [sp, #0]
  401df4:	6313      	str	r3, [r2, #48]	; 0x30
  401df6:	2300      	movs	r3, #0
  401df8:	9301      	str	r3, [sp, #4]
  401dfa:	9b01      	ldr	r3, [sp, #4]
  401dfc:	2b13      	cmp	r3, #19
  401dfe:	d806      	bhi.n	401e0e <udd_ctrl_in_sent+0x3e>
  401e00:	bf00      	nop
  401e02:	9b01      	ldr	r3, [sp, #4]
  401e04:	3301      	adds	r3, #1
  401e06:	9301      	str	r3, [sp, #4]
  401e08:	9b01      	ldr	r3, [sp, #4]
  401e0a:	2b13      	cmp	r3, #19
  401e0c:	d9f8      	bls.n	401e00 <udd_ctrl_in_sent+0x30>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  401e0e:	4b69      	ldr	r3, [pc, #420]	; (401fb4 <udd_ctrl_in_sent+0x1e4>)
  401e10:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  401e12:	4b69      	ldr	r3, [pc, #420]	; (401fb8 <udd_ctrl_in_sent+0x1e8>)
  401e14:	4798      	blx	r3
		return;
  401e16:	e0c6      	b.n	401fa6 <udd_ctrl_in_sent+0x1d6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  401e18:	4b68      	ldr	r3, [pc, #416]	; (401fbc <udd_ctrl_in_sent+0x1ec>)
  401e1a:	881a      	ldrh	r2, [r3, #0]
  401e1c:	4b68      	ldr	r3, [pc, #416]	; (401fc0 <udd_ctrl_in_sent+0x1f0>)
  401e1e:	899c      	ldrh	r4, [r3, #12]
  401e20:	1aa4      	subs	r4, r4, r2
  401e22:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
  401e24:	2c00      	cmp	r4, #0
  401e26:	d133      	bne.n	401e90 <udd_ctrl_in_sent+0xc0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  401e28:	4966      	ldr	r1, [pc, #408]	; (401fc4 <udd_ctrl_in_sent+0x1f4>)
  401e2a:	880b      	ldrh	r3, [r1, #0]
  401e2c:	4413      	add	r3, r2
  401e2e:	b29b      	uxth	r3, r3
  401e30:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  401e32:	4a63      	ldr	r2, [pc, #396]	; (401fc0 <udd_ctrl_in_sent+0x1f0>)
  401e34:	88d2      	ldrh	r2, [r2, #6]
  401e36:	429a      	cmp	r2, r3
  401e38:	d002      	beq.n	401e40 <udd_ctrl_in_sent+0x70>
				|| b_shortpacket) {
  401e3a:	4b63      	ldr	r3, [pc, #396]	; (401fc8 <udd_ctrl_in_sent+0x1f8>)
  401e3c:	781b      	ldrb	r3, [r3, #0]
  401e3e:	b1eb      	cbz	r3, 401e7c <udd_ctrl_in_sent+0xac>
}


static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401e40:	2204      	movs	r2, #4
  401e42:	4b5a      	ldr	r3, [pc, #360]	; (401fac <udd_ctrl_in_sent+0x1dc>)
  401e44:	701a      	strb	r2, [r3, #0]
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			udd_ack_in_sent(0);
  401e46:	4a5a      	ldr	r2, [pc, #360]	; (401fb0 <udd_ctrl_in_sent+0x1e0>)
  401e48:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e4a:	9302      	str	r3, [sp, #8]
  401e4c:	9b02      	ldr	r3, [sp, #8]
  401e4e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401e52:	9302      	str	r3, [sp, #8]
  401e54:	9b02      	ldr	r3, [sp, #8]
  401e56:	f023 0301 	bic.w	r3, r3, #1
  401e5a:	9302      	str	r3, [sp, #8]
  401e5c:	9b02      	ldr	r3, [sp, #8]
  401e5e:	6313      	str	r3, [r2, #48]	; 0x30
  401e60:	2300      	movs	r3, #0
  401e62:	9303      	str	r3, [sp, #12]
  401e64:	9b03      	ldr	r3, [sp, #12]
  401e66:	2b13      	cmp	r3, #19
  401e68:	f200 809d 	bhi.w	401fa6 <udd_ctrl_in_sent+0x1d6>
  401e6c:	bf00      	nop
  401e6e:	9b03      	ldr	r3, [sp, #12]
  401e70:	3301      	adds	r3, #1
  401e72:	9303      	str	r3, [sp, #12]
  401e74:	9b03      	ldr	r3, [sp, #12]
  401e76:	2b13      	cmp	r3, #19
  401e78:	d9f8      	bls.n	401e6c <udd_ctrl_in_sent+0x9c>
  401e7a:	e094      	b.n	401fa6 <udd_ctrl_in_sent+0x1d6>
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  401e7c:	4b50      	ldr	r3, [pc, #320]	; (401fc0 <udd_ctrl_in_sent+0x1f0>)
  401e7e:	695b      	ldr	r3, [r3, #20]
  401e80:	b16b      	cbz	r3, 401e9e <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  401e82:	4798      	blx	r3
  401e84:	b158      	cbz	r0, 401e9e <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  401e86:	2200      	movs	r2, #0
  401e88:	4b4c      	ldr	r3, [pc, #304]	; (401fbc <udd_ctrl_in_sent+0x1ec>)
  401e8a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  401e8c:	4b4c      	ldr	r3, [pc, #304]	; (401fc0 <udd_ctrl_in_sent+0x1f0>)
  401e8e:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  401e90:	2c3f      	cmp	r4, #63	; 0x3f
  401e92:	d904      	bls.n	401e9e <udd_ctrl_in_sent+0xce>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
  401e94:	2200      	movs	r2, #0
  401e96:	4b4c      	ldr	r3, [pc, #304]	; (401fc8 <udd_ctrl_in_sent+0x1f8>)
  401e98:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  401e9a:	2440      	movs	r4, #64	; 0x40
  401e9c:	e002      	b.n	401ea4 <udd_ctrl_in_sent+0xd4>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
  401e9e:	2201      	movs	r2, #1
  401ea0:	4b49      	ldr	r3, [pc, #292]	; (401fc8 <udd_ctrl_in_sent+0x1f8>)
  401ea2:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401ea4:	4b46      	ldr	r3, [pc, #280]	; (401fc0 <udd_ctrl_in_sent+0x1f0>)
  401ea6:	6899      	ldr	r1, [r3, #8]
  401ea8:	4b44      	ldr	r3, [pc, #272]	; (401fbc <udd_ctrl_in_sent+0x1ec>)
  401eaa:	881b      	ldrh	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401eac:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  401eb0:	fab0 f080 	clz	r0, r0
  401eb4:	0940      	lsrs	r0, r0, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401eb6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401eb8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ebc:	2500      	movs	r5, #0
  401ebe:	4a43      	ldr	r2, [pc, #268]	; (401fcc <udd_ctrl_in_sent+0x1fc>)
  401ec0:	7015      	strb	r5, [r2, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
  401ec2:	4a3b      	ldr	r2, [pc, #236]	; (401fb0 <udd_ctrl_in_sent+0x1e0>)
  401ec4:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401ec6:	f012 0f02 	tst.w	r2, #2
  401eca:	d101      	bne.n	401ed0 <udd_ctrl_in_sent+0x100>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401ecc:	bb24      	cbnz	r4, 401f18 <udd_ctrl_in_sent+0x148>
  401ece:	e02d      	b.n	401f2c <udd_ctrl_in_sent+0x15c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401ed0:	b128      	cbz	r0, 401ede <udd_ctrl_in_sent+0x10e>
		cpu_irq_enable();
  401ed2:	2201      	movs	r2, #1
  401ed4:	4b3d      	ldr	r3, [pc, #244]	; (401fcc <udd_ctrl_in_sent+0x1fc>)
  401ed6:	701a      	strb	r2, [r3, #0]
  401ed8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401edc:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_bank0_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  401ede:	2204      	movs	r2, #4
  401ee0:	4b32      	ldr	r3, [pc, #200]	; (401fac <udd_ctrl_in_sent+0x1dc>)
  401ee2:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  401ee4:	4a32      	ldr	r2, [pc, #200]	; (401fb0 <udd_ctrl_in_sent+0x1e0>)
  401ee6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401ee8:	9304      	str	r3, [sp, #16]
  401eea:	9b04      	ldr	r3, [sp, #16]
  401eec:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401ef0:	9304      	str	r3, [sp, #16]
  401ef2:	9b04      	ldr	r3, [sp, #16]
  401ef4:	f023 0301 	bic.w	r3, r3, #1
  401ef8:	9304      	str	r3, [sp, #16]
  401efa:	9b04      	ldr	r3, [sp, #16]
  401efc:	6313      	str	r3, [r2, #48]	; 0x30
  401efe:	2300      	movs	r3, #0
  401f00:	9305      	str	r3, [sp, #20]
  401f02:	9b05      	ldr	r3, [sp, #20]
  401f04:	2b13      	cmp	r3, #19
  401f06:	d84e      	bhi.n	401fa6 <udd_ctrl_in_sent+0x1d6>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  401f08:	bf00      	nop
  401f0a:	9b05      	ldr	r3, [sp, #20]
  401f0c:	3301      	adds	r3, #1
  401f0e:	9305      	str	r3, [sp, #20]
  401f10:	9b05      	ldr	r3, [sp, #20]
  401f12:	2b13      	cmp	r3, #19
  401f14:	d9f8      	bls.n	401f08 <udd_ctrl_in_sent+0x138>
  401f16:	e046      	b.n	401fa6 <udd_ctrl_in_sent+0x1d6>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  401f18:	4419      	add	r1, r3
  401f1a:	460a      	mov	r2, r1
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		udd_endpoint_fifo_write(0, *ptr_src++);
  401f1c:	4d24      	ldr	r5, [pc, #144]	; (401fb0 <udd_ctrl_in_sent+0x1e0>)
  401f1e:	f812 3b01 	ldrb.w	r3, [r2], #1
  401f22:	652b      	str	r3, [r5, #80]	; 0x50
  401f24:	1a53      	subs	r3, r2, r1
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		udd_ack_in_sent(0);
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  401f26:	b2db      	uxtb	r3, r3
  401f28:	42a3      	cmp	r3, r4
  401f2a:	d3f8      	bcc.n	401f1e <udd_ctrl_in_sent+0x14e>
		udd_endpoint_fifo_write(0, *ptr_src++);
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  401f2c:	4a23      	ldr	r2, [pc, #140]	; (401fbc <udd_ctrl_in_sent+0x1ec>)
  401f2e:	8813      	ldrh	r3, [r2, #0]
  401f30:	441c      	add	r4, r3
  401f32:	8014      	strh	r4, [r2, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  401f34:	4a1e      	ldr	r2, [pc, #120]	; (401fb0 <udd_ctrl_in_sent+0x1e0>)
  401f36:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f38:	9306      	str	r3, [sp, #24]
  401f3a:	9b06      	ldr	r3, [sp, #24]
  401f3c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f40:	9306      	str	r3, [sp, #24]
  401f42:	9b06      	ldr	r3, [sp, #24]
  401f44:	f043 0310 	orr.w	r3, r3, #16
  401f48:	9306      	str	r3, [sp, #24]
  401f4a:	9b06      	ldr	r3, [sp, #24]
  401f4c:	6313      	str	r3, [r2, #48]	; 0x30
  401f4e:	2300      	movs	r3, #0
  401f50:	9307      	str	r3, [sp, #28]
  401f52:	9b07      	ldr	r3, [sp, #28]
  401f54:	2b13      	cmp	r3, #19
  401f56:	d806      	bhi.n	401f66 <udd_ctrl_in_sent+0x196>
  401f58:	bf00      	nop
  401f5a:	9b07      	ldr	r3, [sp, #28]
  401f5c:	3301      	adds	r3, #1
  401f5e:	9307      	str	r3, [sp, #28]
  401f60:	9b07      	ldr	r3, [sp, #28]
  401f62:	2b13      	cmp	r3, #19
  401f64:	d9f8      	bls.n	401f58 <udd_ctrl_in_sent+0x188>
	udd_ack_in_sent(0);
  401f66:	4a12      	ldr	r2, [pc, #72]	; (401fb0 <udd_ctrl_in_sent+0x1e0>)
  401f68:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401f6a:	9308      	str	r3, [sp, #32]
  401f6c:	9b08      	ldr	r3, [sp, #32]
  401f6e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  401f72:	9308      	str	r3, [sp, #32]
  401f74:	9b08      	ldr	r3, [sp, #32]
  401f76:	f023 0301 	bic.w	r3, r3, #1
  401f7a:	9308      	str	r3, [sp, #32]
  401f7c:	9b08      	ldr	r3, [sp, #32]
  401f7e:	6313      	str	r3, [r2, #48]	; 0x30
  401f80:	2300      	movs	r3, #0
  401f82:	9309      	str	r3, [sp, #36]	; 0x24
  401f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f86:	2b13      	cmp	r3, #19
  401f88:	d806      	bhi.n	401f98 <udd_ctrl_in_sent+0x1c8>
  401f8a:	bf00      	nop
  401f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f8e:	3301      	adds	r3, #1
  401f90:	9309      	str	r3, [sp, #36]	; 0x24
  401f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401f94:	2b13      	cmp	r3, #19
  401f96:	d9f8      	bls.n	401f8a <udd_ctrl_in_sent+0x1ba>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401f98:	b128      	cbz	r0, 401fa6 <udd_ctrl_in_sent+0x1d6>
		cpu_irq_enable();
  401f9a:	2201      	movs	r2, #1
  401f9c:	4b0b      	ldr	r3, [pc, #44]	; (401fcc <udd_ctrl_in_sent+0x1fc>)
  401f9e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401fa0:	f3bf 8f5f 	dmb	sy
  401fa4:	b662      	cpsie	i

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
  401fa6:	b00b      	add	sp, #44	; 0x2c
  401fa8:	bd30      	pop	{r4, r5, pc}
  401faa:	bf00      	nop
  401fac:	200015b4 	.word	0x200015b4
  401fb0:	40034000 	.word	0x40034000
  401fb4:	00401dc1 	.word	0x00401dc1
  401fb8:	00401d19 	.word	0x00401d19
  401fbc:	200015b2 	.word	0x200015b2
  401fc0:	20001600 	.word	0x20001600
  401fc4:	20001570 	.word	0x20001570
  401fc8:	200015b5 	.word	0x200015b5
  401fcc:	200000a3 	.word	0x200000a3

00401fd0 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  401fd0:	b538      	push	{r3, r4, r5, lr}
  401fd2:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
  401fd4:	7c44      	ldrb	r4, [r0, #17]
  401fd6:	f014 0f10 	tst.w	r4, #16
  401fda:	d015      	beq.n	402008 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
  401fdc:	7c44      	ldrb	r4, [r0, #17]
  401fde:	f36f 1404 	bfc	r4, #4, #1
  401fe2:	7444      	strb	r4, [r0, #17]
	if (NULL == ptr_job->call_trans) {
  401fe4:	6805      	ldr	r5, [r0, #0]
  401fe6:	b17d      	cbz	r5, 402008 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  401fe8:	f102 040c 	add.w	r4, r2, #12
  401fec:	4807      	ldr	r0, [pc, #28]	; (40200c <udd_ep_finish_job+0x3c>)
  401fee:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  401ff2:	f410 6f80 	tst.w	r0, #1024	; 0x400
		ep_num |= USB_EP_DIR_IN;
  401ff6:	bf18      	it	ne
  401ff8:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}	
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  401ffc:	2901      	cmp	r1, #1
  401ffe:	bf14      	ite	ne
  402000:	2000      	movne	r0, #0
  402002:	2001      	moveq	r0, #1
  402004:	6899      	ldr	r1, [r3, #8]
  402006:	47a8      	blx	r5
  402008:	bd38      	pop	{r3, r4, r5, pc}
  40200a:	bf00      	nop
  40200c:	40034000 	.word	0x40034000

00402010 <udd_ep_ack_out_received>:
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  402010:	b430      	push	{r4, r5}
  402012:	b084      	sub	sp, #16
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  402014:	1e42      	subs	r2, r0, #1
  402016:	0083      	lsls	r3, r0, #2
  402018:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40201c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000

	bank0_received = Is_udd_bank0_received(ep);
  402020:	6b19      	ldr	r1, [r3, #48]	; 0x30
	bank1_received = Is_udd_bank1_received(ep);
  402022:	6b1c      	ldr	r4, [r3, #48]	; 0x30

	if (bank0_received && bank1_received) {
  402024:	f011 0f02 	tst.w	r1, #2
  402028:	d00c      	beq.n	402044 <udd_ep_ack_out_received+0x34>
  40202a:	f014 0f40 	tst.w	r4, #64	; 0x40
  40202e:	d113      	bne.n	402058 <udd_ep_ack_out_received+0x48>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
		// Must be bank0
		ptr_job->bank = 0;
  402030:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  402034:	4c32      	ldr	r4, [pc, #200]	; (402100 <udd_ep_ack_out_received+0xf0>)
  402036:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  40203a:	7c4c      	ldrb	r4, [r1, #17]
  40203c:	f36f 0483 	bfc	r4, #2, #2
  402040:	744c      	strb	r4, [r1, #17]
  402042:	e009      	b.n	402058 <udd_ep_ack_out_received+0x48>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  402044:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  402048:	4c2d      	ldr	r4, [pc, #180]	; (402100 <udd_ep_ack_out_received+0xf0>)
  40204a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  40204e:	7c4c      	ldrb	r4, [r1, #17]
  402050:	2501      	movs	r5, #1
  402052:	f365 0483 	bfi	r4, r5, #2, #2
  402056:	744c      	strb	r4, [r1, #17]
	}
	if (ptr_job->bank == 0) {
  402058:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40205c:	4c28      	ldr	r4, [pc, #160]	; (402100 <udd_ep_ack_out_received+0xf0>)
  40205e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  402062:	7c49      	ldrb	r1, [r1, #17]
  402064:	f011 0f0c 	tst.w	r1, #12
  402068:	d125      	bne.n	4020b6 <udd_ep_ack_out_received+0xa6>
		udd_ack_bank0_received(ep);
  40206a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  40206c:	9100      	str	r1, [sp, #0]
  40206e:	9900      	ldr	r1, [sp, #0]
  402070:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  402074:	9100      	str	r1, [sp, #0]
  402076:	9900      	ldr	r1, [sp, #0]
  402078:	f021 0102 	bic.w	r1, r1, #2
  40207c:	9100      	str	r1, [sp, #0]
  40207e:	9900      	ldr	r1, [sp, #0]
  402080:	6319      	str	r1, [r3, #48]	; 0x30
  402082:	2300      	movs	r3, #0
  402084:	9301      	str	r3, [sp, #4]
  402086:	9b01      	ldr	r3, [sp, #4]
  402088:	2b13      	cmp	r3, #19
  40208a:	d806      	bhi.n	40209a <udd_ep_ack_out_received+0x8a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40208c:	bf00      	nop
  40208e:	9b01      	ldr	r3, [sp, #4]
  402090:	3301      	adds	r3, #1
  402092:	9301      	str	r3, [sp, #4]
  402094:	9b01      	ldr	r3, [sp, #4]
  402096:	2b13      	cmp	r3, #19
  402098:	d9f8      	bls.n	40208c <udd_ep_ack_out_received+0x7c>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  40209a:	b368      	cbz	r0, 4020f8 <udd_ep_ack_out_received+0xe8>
  40209c:	2803      	cmp	r0, #3
  40209e:	d02b      	beq.n	4020f8 <udd_ep_ack_out_received+0xe8>
			ptr_job->bank = 1;
  4020a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4020a4:	4b16      	ldr	r3, [pc, #88]	; (402100 <udd_ep_ack_out_received+0xf0>)
  4020a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4020aa:	7c5a      	ldrb	r2, [r3, #17]
  4020ac:	2101      	movs	r1, #1
  4020ae:	f361 0283 	bfi	r2, r1, #2, #2
  4020b2:	745a      	strb	r2, [r3, #17]
  4020b4:	e020      	b.n	4020f8 <udd_ep_ack_out_received+0xe8>
		}
	} else {
		udd_ack_bank1_received(ep);
  4020b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4020b8:	9102      	str	r1, [sp, #8]
  4020ba:	9902      	ldr	r1, [sp, #8]
  4020bc:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  4020c0:	9102      	str	r1, [sp, #8]
  4020c2:	9902      	ldr	r1, [sp, #8]
  4020c4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  4020c8:	9102      	str	r1, [sp, #8]
  4020ca:	9902      	ldr	r1, [sp, #8]
  4020cc:	6319      	str	r1, [r3, #48]	; 0x30
  4020ce:	2300      	movs	r3, #0
  4020d0:	9303      	str	r3, [sp, #12]
  4020d2:	9b03      	ldr	r3, [sp, #12]
  4020d4:	2b13      	cmp	r3, #19
  4020d6:	d806      	bhi.n	4020e6 <udd_ep_ack_out_received+0xd6>
  4020d8:	bf00      	nop
  4020da:	9b03      	ldr	r3, [sp, #12]
  4020dc:	3301      	adds	r3, #1
  4020de:	9303      	str	r3, [sp, #12]
  4020e0:	9b03      	ldr	r3, [sp, #12]
  4020e2:	2b13      	cmp	r3, #19
  4020e4:	d9f8      	bls.n	4020d8 <udd_ep_ack_out_received+0xc8>
		ptr_job->bank = 0;
  4020e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4020ea:	4b05      	ldr	r3, [pc, #20]	; (402100 <udd_ep_ack_out_received+0xf0>)
  4020ec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4020f0:	7c53      	ldrb	r3, [r2, #17]
  4020f2:	f36f 0383 	bfc	r3, #2, #2
  4020f6:	7453      	strb	r3, [r2, #17]
	}
}
  4020f8:	b004      	add	sp, #16
  4020fa:	bc30      	pop	{r4, r5}
  4020fc:	4770      	bx	lr
  4020fe:	bf00      	nop
  402100:	20001574 	.word	0x20001574

00402104 <udd_ep_in_sent>:
	return is_short_pkt;
}


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  402104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402108:	b083      	sub	sp, #12
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  40210a:	4686      	mov	lr, r0
  40210c:	1e46      	subs	r6, r0, #1

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  40210e:	eb06 0286 	add.w	r2, r6, r6, lsl #2
  402112:	4b6c      	ldr	r3, [pc, #432]	; (4022c4 <udd_ep_in_sent+0x1c0>)
  402114:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402118:	f893 8011 	ldrb.w	r8, [r3, #17]
  40211c:	f3c8 0881 	ubfx	r8, r8, #2, #2
  402120:	b120      	cbz	r0, 40212c <udd_ep_in_sent+0x28>
  402122:	2803      	cmp	r0, #3
  402124:	bf0c      	ite	eq
  402126:	2301      	moveq	r3, #1
  402128:	2302      	movne	r3, #2
  40212a:	e000      	b.n	40212e <udd_ep_in_sent+0x2a>
  40212c:	2301      	movs	r3, #1
  40212e:	4543      	cmp	r3, r8
  402130:	f340 80be 	ble.w	4022b0 <udd_ep_in_sent+0x1ac>
		return true; // Data pending
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  402134:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  402138:	4a62      	ldr	r2, [pc, #392]	; (4022c4 <udd_ep_in_sent+0x1c0>)
  40213a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40213e:	68da      	ldr	r2, [r3, #12]
  402140:	689b      	ldr	r3, [r3, #8]
  402142:	429a      	cmp	r2, r3
  402144:	d309      	bcc.n	40215a <udd_ep_in_sent+0x56>
  402146:	eb06 0486 	add.w	r4, r6, r6, lsl #2
  40214a:	4d5e      	ldr	r5, [pc, #376]	; (4022c4 <udd_ep_in_sent+0x1c0>)
  40214c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  402150:	7c64      	ldrb	r4, [r4, #17]
  402152:	f014 0f40 	tst.w	r4, #64	; 0x40
  402156:	f000 80ad 	beq.w	4022b4 <udd_ep_in_sent+0x1b0>


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  40215a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  40215e:	4c59      	ldr	r4, [pc, #356]	; (4022c4 <udd_ep_in_sent+0x1c0>)
  402160:	eb04 0787 	add.w	r7, r4, r7, lsl #2
  402164:	687c      	ldr	r4, [r7, #4]
  402166:	4414      	add	r4, r2
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  402168:	1a9d      	subs	r5, r3, r2
	uint32_t pkt_size = ptr_job->size;
  40216a:	8a3b      	ldrh	r3, [r7, #16]
  40216c:	f3c3 0709 	ubfx	r7, r3, #0, #10
	bool is_short_pkt = false;

	// Packet size
	if (nb_remain < pkt_size) {
  402170:	42bd      	cmp	r5, r7
		pkt_size = nb_remain;
  402172:	bf3a      	itte	cc
  402174:	462f      	movcc	r7, r5
		is_short_pkt = true;
  402176:	f04f 0c01 	movcc.w	ip, #1
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	bool is_short_pkt = false;
  40217a:	f04f 0c00 	movcs.w	ip, #0
		pkt_size = nb_remain;
		is_short_pkt = true;
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  40217e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  402182:	4d50      	ldr	r5, [pc, #320]	; (4022c4 <udd_ep_in_sent+0x1c0>)
  402184:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402188:	443a      	add	r2, r7
  40218a:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  40218c:	2f07      	cmp	r7, #7
  40218e:	d933      	bls.n	4021f8 <udd_ep_in_sent+0xf4>
  402190:	f104 0308 	add.w	r3, r4, #8
  402194:	463d      	mov	r5, r7
  402196:	0082      	lsls	r2, r0, #2
  402198:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40219c:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4021a0:	f813 9c08 	ldrb.w	r9, [r3, #-8]
  4021a4:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4021a8:	f813 9c07 	ldrb.w	r9, [r3, #-7]
  4021ac:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4021b0:	f813 9c06 	ldrb.w	r9, [r3, #-6]
  4021b4:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4021b8:	f813 9c05 	ldrb.w	r9, [r3, #-5]
  4021bc:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4021c0:	f813 9c04 	ldrb.w	r9, [r3, #-4]
  4021c4:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4021c8:	f813 9c03 	ldrb.w	r9, [r3, #-3]
  4021cc:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4021d0:	f813 9c02 	ldrb.w	r9, [r3, #-2]
  4021d4:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4021d8:	f813 9c01 	ldrb.w	r9, [r3, #-1]
  4021dc:	f8c2 9050 	str.w	r9, [r2, #80]	; 0x50

	// Modify job information
	ptr_job->buf_cnt += pkt_size;

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  4021e0:	3d08      	subs	r5, #8
  4021e2:	3308      	adds	r3, #8
  4021e4:	2d07      	cmp	r5, #7
  4021e6:	d8db      	bhi.n	4021a0 <udd_ep_in_sent+0x9c>
  4021e8:	f1a7 0308 	sub.w	r3, r7, #8
  4021ec:	f023 0307 	bic.w	r3, r3, #7
  4021f0:	3308      	adds	r3, #8
  4021f2:	441c      	add	r4, r3
  4021f4:	f007 0707 	and.w	r7, r7, #7
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  4021f8:	b14f      	cbz	r7, 40220e <udd_ep_in_sent+0x10a>
  4021fa:	19e3      	adds	r3, r4, r7
		udd_endpoint_fifo_write(ep, *ptr_src++);
  4021fc:	4f32      	ldr	r7, [pc, #200]	; (4022c8 <udd_ep_in_sent+0x1c4>)
  4021fe:	f814 5b01 	ldrb.w	r5, [r4], #1
  402202:	f10e 0214 	add.w	r2, lr, #20
  402206:	f847 5022 	str.w	r5, [r7, r2, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  40220a:	429c      	cmp	r4, r3
  40220c:	d1f7      	bne.n	4021fe <udd_ep_in_sent+0xfa>
		udd_endpoint_fifo_write(ep, *ptr_src++);
	}

	// Add to buffered banks
	ptr_job->bank++;
  40220e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  402212:	4a2c      	ldr	r2, [pc, #176]	; (4022c4 <udd_ep_in_sent+0x1c0>)
  402214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402218:	f108 0801 	add.w	r8, r8, #1
  40221c:	7c5a      	ldrb	r2, [r3, #17]
  40221e:	f368 0283 	bfi	r2, r8, #2, #2
  402222:	745a      	strb	r2, [r3, #17]

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);

	// Data is ready to send
	if (b_tx) {
  402224:	b1e1      	cbz	r1, 402260 <udd_ep_in_sent+0x15c>
  402226:	0080      	lsls	r0, r0, #2
  402228:	f100 2040 	add.w	r0, r0, #1073758208	; 0x40004000
  40222c:	f500 3040 	add.w	r0, r0, #196608	; 0x30000
		udd_set_transmit_ready(ep);
  402230:	6b03      	ldr	r3, [r0, #48]	; 0x30
  402232:	9300      	str	r3, [sp, #0]
  402234:	9b00      	ldr	r3, [sp, #0]
  402236:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40223a:	9300      	str	r3, [sp, #0]
  40223c:	9b00      	ldr	r3, [sp, #0]
  40223e:	f043 0310 	orr.w	r3, r3, #16
  402242:	9300      	str	r3, [sp, #0]
  402244:	9b00      	ldr	r3, [sp, #0]
  402246:	6303      	str	r3, [r0, #48]	; 0x30
  402248:	2300      	movs	r3, #0
  40224a:	9301      	str	r3, [sp, #4]
  40224c:	9b01      	ldr	r3, [sp, #4]
  40224e:	2b13      	cmp	r3, #19
  402250:	d806      	bhi.n	402260 <udd_ep_in_sent+0x15c>
  402252:	bf00      	nop
  402254:	9b01      	ldr	r3, [sp, #4]
  402256:	3301      	adds	r3, #1
  402258:	9301      	str	r3, [sp, #4]
  40225a:	9b01      	ldr	r3, [sp, #4]
  40225c:	2b13      	cmp	r3, #19
  40225e:	d9f8      	bls.n	402252 <udd_ep_in_sent+0x14e>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  402260:	f1bc 0f00 	cmp.w	ip, #0
  402264:	d008      	beq.n	402278 <udd_ep_in_sent+0x174>
		ptr_job->b_shortpacket = false;
  402266:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40226a:	4a16      	ldr	r2, [pc, #88]	; (4022c4 <udd_ep_in_sent+0x1c0>)
  40226c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402270:	7c5a      	ldrb	r2, [r3, #17]
  402272:	f36f 1286 	bfc	r2, #6, #1
  402276:	745a      	strb	r2, [r3, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  402278:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40227c:	4a11      	ldr	r2, [pc, #68]	; (4022c4 <udd_ep_in_sent+0x1c0>)
  40227e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402282:	68da      	ldr	r2, [r3, #12]
  402284:	689b      	ldr	r3, [r3, #8]
  402286:	429a      	cmp	r2, r3
  402288:	d316      	bcc.n	4022b8 <udd_ep_in_sent+0x1b4>
			&& (!ptr_job->b_shortpacket)) {
  40228a:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  40228e:	4a0d      	ldr	r2, [pc, #52]	; (4022c4 <udd_ep_in_sent+0x1c0>)
  402290:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402294:	7c5b      	ldrb	r3, [r3, #17]
  402296:	f013 0f40 	tst.w	r3, #64	; 0x40
  40229a:	d10f      	bne.n	4022bc <udd_ep_in_sent+0x1b8>
		ptr_job->b_buf_end = true;
  40229c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4022a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  4022a4:	7c73      	ldrb	r3, [r6, #17]
  4022a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4022aa:	7473      	strb	r3, [r6, #17]
		return false;
  4022ac:	2000      	movs	r0, #0
  4022ae:	e006      	b.n	4022be <udd_ep_in_sent+0x1ba>
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
		return true; // Data pending
  4022b0:	2001      	movs	r0, #1
  4022b2:	e004      	b.n	4022be <udd_ep_in_sent+0x1ba>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
		return false;
  4022b4:	2000      	movs	r0, #0
  4022b6:	e002      	b.n	4022be <udd_ep_in_sent+0x1ba>
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
			&& (!ptr_job->b_shortpacket)) {
		ptr_job->b_buf_end = true;
		return false;
	}
	return true; // Pending
  4022b8:	2001      	movs	r0, #1
  4022ba:	e000      	b.n	4022be <udd_ep_in_sent+0x1ba>
  4022bc:	2001      	movs	r0, #1
}
  4022be:	b003      	add	sp, #12
  4022c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4022c4:	20001574 	.word	0x20001574
  4022c8:	40034000 	.word	0x40034000

004022cc <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  4022cc:	b410      	push	{r4}
	if (!b_idle && udd_b_idle) {
  4022ce:	4604      	mov	r4, r0
  4022d0:	2800      	cmp	r0, #0
  4022d2:	d135      	bne.n	402340 <udd_sleep_mode+0x74>
  4022d4:	4b1e      	ldr	r3, [pc, #120]	; (402350 <udd_sleep_mode+0x84>)
  4022d6:	781b      	ldrb	r3, [r3, #0]
  4022d8:	b37b      	cbz	r3, 40233a <udd_sleep_mode+0x6e>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  4022da:	4b1e      	ldr	r3, [pc, #120]	; (402354 <udd_sleep_mode+0x88>)
  4022dc:	789b      	ldrb	r3, [r3, #2]
  4022de:	b903      	cbnz	r3, 4022e2 <udd_sleep_mode+0x16>
  4022e0:	e7fe      	b.n	4022e0 <udd_sleep_mode+0x14>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4022e2:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4022e6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4022e8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4022ec:	2100      	movs	r1, #0
  4022ee:	4a1a      	ldr	r2, [pc, #104]	; (402358 <udd_sleep_mode+0x8c>)
  4022f0:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
  4022f2:	4918      	ldr	r1, [pc, #96]	; (402354 <udd_sleep_mode+0x88>)
  4022f4:	788a      	ldrb	r2, [r1, #2]
  4022f6:	3a01      	subs	r2, #1
  4022f8:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4022fa:	b9f3      	cbnz	r3, 40233a <udd_sleep_mode+0x6e>
		cpu_irq_enable();
  4022fc:	2201      	movs	r2, #1
  4022fe:	4b16      	ldr	r3, [pc, #88]	; (402358 <udd_sleep_mode+0x8c>)
  402300:	701a      	strb	r2, [r3, #0]
  402302:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402306:	b662      	cpsie	i
  402308:	e017      	b.n	40233a <udd_sleep_mode+0x6e>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40230a:	4b12      	ldr	r3, [pc, #72]	; (402354 <udd_sleep_mode+0x88>)
  40230c:	789b      	ldrb	r3, [r3, #2]
  40230e:	2bff      	cmp	r3, #255	; 0xff
  402310:	d100      	bne.n	402314 <udd_sleep_mode+0x48>
  402312:	e7fe      	b.n	402312 <udd_sleep_mode+0x46>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402314:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402318:	b672      	cpsid	i
  40231a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  40231e:	2100      	movs	r1, #0
  402320:	4a0d      	ldr	r2, [pc, #52]	; (402358 <udd_sleep_mode+0x8c>)
  402322:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  402324:	490b      	ldr	r1, [pc, #44]	; (402354 <udd_sleep_mode+0x88>)
  402326:	788a      	ldrb	r2, [r1, #2]
  402328:	3201      	adds	r2, #1
  40232a:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40232c:	b92b      	cbnz	r3, 40233a <udd_sleep_mode+0x6e>
		cpu_irq_enable();
  40232e:	2201      	movs	r2, #1
  402330:	4b09      	ldr	r3, [pc, #36]	; (402358 <udd_sleep_mode+0x8c>)
  402332:	701a      	strb	r2, [r3, #0]
  402334:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402338:	b662      	cpsie	i
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
  40233a:	4b05      	ldr	r3, [pc, #20]	; (402350 <udd_sleep_mode+0x84>)
  40233c:	701c      	strb	r4, [r3, #0]
  40233e:	e004      	b.n	40234a <udd_sleep_mode+0x7e>
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
  402340:	4b03      	ldr	r3, [pc, #12]	; (402350 <udd_sleep_mode+0x84>)
  402342:	781b      	ldrb	r3, [r3, #0]
  402344:	2b00      	cmp	r3, #0
  402346:	d1f8      	bne.n	40233a <udd_sleep_mode+0x6e>
  402348:	e7df      	b.n	40230a <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
}
  40234a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40234e:	4770      	bx	lr
  402350:	200015b0 	.word	0x200015b0
  402354:	200015f4 	.word	0x200015f4
  402358:	200000a3 	.word	0x200000a3

0040235c <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  40235c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402360:	b0b1      	sub	sp, #196	; 0xc4
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  402362:	4b95      	ldr	r3, [pc, #596]	; (4025b8 <UDP_Handler+0x25c>)
  402364:	4798      	blx	r3
  402366:	b960      	cbnz	r0, 402382 <UDP_Handler+0x26>
  402368:	4b94      	ldr	r3, [pc, #592]	; (4025bc <UDP_Handler+0x260>)
  40236a:	69db      	ldr	r3, [r3, #28]
  40236c:	f413 7f80 	tst.w	r3, #256	; 0x100
  402370:	d107      	bne.n	402382 <UDP_Handler+0x26>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402372:	b672      	cpsid	i
  402374:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  402378:	2200      	movs	r2, #0
  40237a:	4b91      	ldr	r3, [pc, #580]	; (4025c0 <UDP_Handler+0x264>)
  40237c:	701a      	strb	r2, [r3, #0]
		return;
  40237e:	f000 bd54 	b.w	402e2a <UDP_Handler+0xace>
	}

	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  402382:	2022      	movs	r0, #34	; 0x22
  402384:	4b8f      	ldr	r3, [pc, #572]	; (4025c4 <UDP_Handler+0x268>)
  402386:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  402388:	4b8c      	ldr	r3, [pc, #560]	; (4025bc <UDP_Handler+0x260>)
  40238a:	699b      	ldr	r3, [r3, #24]
  40238c:	f413 6f00 	tst.w	r3, #2048	; 0x800
  402390:	d00c      	beq.n	4023ac <UDP_Handler+0x50>
  402392:	4b8a      	ldr	r3, [pc, #552]	; (4025bc <UDP_Handler+0x260>)
  402394:	69db      	ldr	r3, [r3, #28]
  402396:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40239a:	d007      	beq.n	4023ac <UDP_Handler+0x50>
		udd_ack_sof();
  40239c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4023a0:	4b86      	ldr	r3, [pc, #536]	; (4025bc <UDP_Handler+0x260>)
  4023a2:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  4023a4:	4b88      	ldr	r3, [pc, #544]	; (4025c8 <UDP_Handler+0x26c>)
  4023a6:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
  4023a8:	f000 bd3f 	b.w	402e2a <UDP_Handler+0xace>
}


static bool udd_ctrl_interrupt(void)
{
	if (!Is_udd_endpoint_interrupt(0))
  4023ac:	4b83      	ldr	r3, [pc, #524]	; (4025bc <UDP_Handler+0x260>)
  4023ae:	69db      	ldr	r3, [r3, #28]
  4023b0:	f013 0f01 	tst.w	r3, #1
  4023b4:	f000 81f2 	beq.w	40279c <UDP_Handler+0x440>
		return false; // No interrupt events on control endpoint

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  4023b8:	4b80      	ldr	r3, [pc, #512]	; (4025bc <UDP_Handler+0x260>)
  4023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023bc:	f013 0f04 	tst.w	r3, #4
  4023c0:	f000 80c0 	beq.w	402544 <UDP_Handler+0x1e8>

static void udd_ctrl_setup_received(void)
{
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  4023c4:	4b81      	ldr	r3, [pc, #516]	; (4025cc <UDP_Handler+0x270>)
  4023c6:	781b      	ldrb	r3, [r3, #0]
  4023c8:	b11b      	cbz	r3, 4023d2 <UDP_Handler+0x76>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  4023ca:	4b81      	ldr	r3, [pc, #516]	; (4025d0 <UDP_Handler+0x274>)
  4023cc:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  4023ce:	4b81      	ldr	r3, [pc, #516]	; (4025d4 <UDP_Handler+0x278>)
  4023d0:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  4023d2:	4b7a      	ldr	r3, [pc, #488]	; (4025bc <UDP_Handler+0x260>)
  4023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023d6:	f3c3 430a 	ubfx	r3, r3, #16, #11
  4023da:	2b08      	cmp	r3, #8
  4023dc:	d01c      	beq.n	402418 <UDP_Handler+0xbc>
		udd_ack_setup_received(0);
  4023de:	4a77      	ldr	r2, [pc, #476]	; (4025bc <UDP_Handler+0x260>)
  4023e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023e2:	9302      	str	r3, [sp, #8]
  4023e4:	9b02      	ldr	r3, [sp, #8]
  4023e6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4023ea:	9302      	str	r3, [sp, #8]
  4023ec:	9b02      	ldr	r3, [sp, #8]
  4023ee:	f023 0304 	bic.w	r3, r3, #4
  4023f2:	9302      	str	r3, [sp, #8]
  4023f4:	9b02      	ldr	r3, [sp, #8]
  4023f6:	6313      	str	r3, [r2, #48]	; 0x30
  4023f8:	2300      	movs	r3, #0
  4023fa:	9303      	str	r3, [sp, #12]
  4023fc:	9b03      	ldr	r3, [sp, #12]
  4023fe:	2b13      	cmp	r3, #19
  402400:	d806      	bhi.n	402410 <UDP_Handler+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402402:	bf00      	nop
  402404:	9b03      	ldr	r3, [sp, #12]
  402406:	3301      	adds	r3, #1
  402408:	9303      	str	r3, [sp, #12]
  40240a:	9b03      	ldr	r3, [sp, #12]
  40240c:	2b13      	cmp	r3, #19
  40240e:	d9f8      	bls.n	402402 <UDP_Handler+0xa6>
		udd_ctrl_stall_data();
  402410:	4b71      	ldr	r3, [pc, #452]	; (4025d8 <UDP_Handler+0x27c>)
  402412:	4798      	blx	r3
  402414:	f000 bd09 	b.w	402e2a <UDP_Handler+0xace>
  402418:	4b70      	ldr	r3, [pc, #448]	; (4025dc <UDP_Handler+0x280>)
  40241a:	f103 0008 	add.w	r0, r3, #8
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
			udd_endpoint_fifo_read(0);
  40241e:	4967      	ldr	r1, [pc, #412]	; (4025bc <UDP_Handler+0x260>)
  402420:	6d0a      	ldr	r2, [r1, #80]	; 0x50
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  402422:	f803 2f01 	strb.w	r2, [r3, #1]!
	if (8 != udd_byte_count(0)) {
		udd_ack_setup_received(0);
		udd_ctrl_stall_data();
		return; // Error data number doesn't correspond to SETUP packet
	}
	for (i = 0; i < 8; i++) {
  402426:	4283      	cmp	r3, r0
  402428:	d1fa      	bne.n	402420 <UDP_Handler+0xc4>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
  40242a:	4b6d      	ldr	r3, [pc, #436]	; (4025e0 <UDP_Handler+0x284>)
  40242c:	4798      	blx	r3
  40242e:	b9e0      	cbnz	r0, 40246a <UDP_Handler+0x10e>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  402430:	4a62      	ldr	r2, [pc, #392]	; (4025bc <UDP_Handler+0x260>)
  402432:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402434:	9304      	str	r3, [sp, #16]
  402436:	9b04      	ldr	r3, [sp, #16]
  402438:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40243c:	9304      	str	r3, [sp, #16]
  40243e:	9b04      	ldr	r3, [sp, #16]
  402440:	f023 0304 	bic.w	r3, r3, #4
  402444:	9304      	str	r3, [sp, #16]
  402446:	9b04      	ldr	r3, [sp, #16]
  402448:	6313      	str	r3, [r2, #48]	; 0x30
  40244a:	2300      	movs	r3, #0
  40244c:	9305      	str	r3, [sp, #20]
  40244e:	9b05      	ldr	r3, [sp, #20]
  402450:	2b13      	cmp	r3, #19
  402452:	d806      	bhi.n	402462 <UDP_Handler+0x106>
  402454:	bf00      	nop
  402456:	9b05      	ldr	r3, [sp, #20]
  402458:	3301      	adds	r3, #1
  40245a:	9305      	str	r3, [sp, #20]
  40245c:	9b05      	ldr	r3, [sp, #20]
  40245e:	2b13      	cmp	r3, #19
  402460:	d9f8      	bls.n	402454 <UDP_Handler+0xf8>
		udd_ctrl_stall_data();
  402462:	4b5d      	ldr	r3, [pc, #372]	; (4025d8 <UDP_Handler+0x27c>)
  402464:	4798      	blx	r3
  402466:	f000 bce0 	b.w	402e2a <UDP_Handler+0xace>
		return;
	}

	if (Udd_setup_is_in()) {
  40246a:	4b5e      	ldr	r3, [pc, #376]	; (4025e4 <UDP_Handler+0x288>)
  40246c:	f993 3000 	ldrsb.w	r3, [r3]
  402470:	2b00      	cmp	r3, #0
  402472:	da3d      	bge.n	4024f0 <UDP_Handler+0x194>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  402474:	4a51      	ldr	r2, [pc, #324]	; (4025bc <UDP_Handler+0x260>)
  402476:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402478:	9306      	str	r3, [sp, #24]
  40247a:	9b06      	ldr	r3, [sp, #24]
  40247c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402480:	9306      	str	r3, [sp, #24]
  402482:	9b06      	ldr	r3, [sp, #24]
  402484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402488:	9306      	str	r3, [sp, #24]
  40248a:	9b06      	ldr	r3, [sp, #24]
  40248c:	6313      	str	r3, [r2, #48]	; 0x30
  40248e:	2300      	movs	r3, #0
  402490:	9307      	str	r3, [sp, #28]
  402492:	9b07      	ldr	r3, [sp, #28]
  402494:	2b13      	cmp	r3, #19
  402496:	d806      	bhi.n	4024a6 <UDP_Handler+0x14a>
  402498:	bf00      	nop
  40249a:	9b07      	ldr	r3, [sp, #28]
  40249c:	3301      	adds	r3, #1
  40249e:	9307      	str	r3, [sp, #28]
  4024a0:	9b07      	ldr	r3, [sp, #28]
  4024a2:	2b13      	cmp	r3, #19
  4024a4:	d9f8      	bls.n	402498 <UDP_Handler+0x13c>
		udd_ack_setup_received(0);
  4024a6:	4a45      	ldr	r2, [pc, #276]	; (4025bc <UDP_Handler+0x260>)
  4024a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024aa:	9308      	str	r3, [sp, #32]
  4024ac:	9b08      	ldr	r3, [sp, #32]
  4024ae:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4024b2:	9308      	str	r3, [sp, #32]
  4024b4:	9b08      	ldr	r3, [sp, #32]
  4024b6:	f023 0304 	bic.w	r3, r3, #4
  4024ba:	9308      	str	r3, [sp, #32]
  4024bc:	9b08      	ldr	r3, [sp, #32]
  4024be:	6313      	str	r3, [r2, #48]	; 0x30
  4024c0:	2300      	movs	r3, #0
  4024c2:	9309      	str	r3, [sp, #36]	; 0x24
  4024c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4024c6:	2b13      	cmp	r3, #19
  4024c8:	d806      	bhi.n	4024d8 <UDP_Handler+0x17c>
  4024ca:	bf00      	nop
  4024cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4024ce:	3301      	adds	r3, #1
  4024d0:	9309      	str	r3, [sp, #36]	; 0x24
  4024d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4024d4:	2b13      	cmp	r3, #19
  4024d6:	d9f8      	bls.n	4024ca <UDP_Handler+0x16e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  4024d8:	2300      	movs	r3, #0
  4024da:	4a43      	ldr	r2, [pc, #268]	; (4025e8 <UDP_Handler+0x28c>)
  4024dc:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  4024de:	4a43      	ldr	r2, [pc, #268]	; (4025ec <UDP_Handler+0x290>)
  4024e0:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  4024e2:	2202      	movs	r2, #2
  4024e4:	4b39      	ldr	r3, [pc, #228]	; (4025cc <UDP_Handler+0x270>)
  4024e6:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  4024e8:	4b41      	ldr	r3, [pc, #260]	; (4025f0 <UDP_Handler+0x294>)
  4024ea:	4798      	blx	r3
  4024ec:	f000 bc9d 	b.w	402e2a <UDP_Handler+0xace>
	} else {
		udd_ack_setup_received(0);
  4024f0:	4a32      	ldr	r2, [pc, #200]	; (4025bc <UDP_Handler+0x260>)
  4024f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024f4:	930a      	str	r3, [sp, #40]	; 0x28
  4024f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4024f8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4024fc:	930a      	str	r3, [sp, #40]	; 0x28
  4024fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402500:	f023 0304 	bic.w	r3, r3, #4
  402504:	930a      	str	r3, [sp, #40]	; 0x28
  402506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402508:	6313      	str	r3, [r2, #48]	; 0x30
  40250a:	2300      	movs	r3, #0
  40250c:	930b      	str	r3, [sp, #44]	; 0x2c
  40250e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402510:	2b13      	cmp	r3, #19
  402512:	d806      	bhi.n	402522 <UDP_Handler+0x1c6>
  402514:	bf00      	nop
  402516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  402518:	3301      	adds	r3, #1
  40251a:	930b      	str	r3, [sp, #44]	; 0x2c
  40251c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40251e:	2b13      	cmp	r3, #19
  402520:	d9f8      	bls.n	402514 <UDP_Handler+0x1b8>
		if (0 == udd_g_ctrlreq.req.wLength) {
  402522:	4b30      	ldr	r3, [pc, #192]	; (4025e4 <UDP_Handler+0x288>)
  402524:	88db      	ldrh	r3, [r3, #6]
  402526:	b91b      	cbnz	r3, 402530 <UDP_Handler+0x1d4>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  402528:	4b32      	ldr	r3, [pc, #200]	; (4025f4 <UDP_Handler+0x298>)
  40252a:	4798      	blx	r3
  40252c:	f000 bc7d 	b.w	402e2a <UDP_Handler+0xace>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  402530:	2300      	movs	r3, #0
  402532:	4a2d      	ldr	r2, [pc, #180]	; (4025e8 <UDP_Handler+0x28c>)
  402534:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
  402536:	4a2d      	ldr	r2, [pc, #180]	; (4025ec <UDP_Handler+0x290>)
  402538:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  40253a:	2201      	movs	r2, #1
  40253c:	4b23      	ldr	r3, [pc, #140]	; (4025cc <UDP_Handler+0x270>)
  40253e:	701a      	strb	r2, [r3, #0]
  402540:	f000 bc73 	b.w	402e2a <UDP_Handler+0xace>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_sent(0)) {
  402544:	4b1d      	ldr	r3, [pc, #116]	; (4025bc <UDP_Handler+0x260>)
  402546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402548:	f013 0f01 	tst.w	r3, #1
  40254c:	d003      	beq.n	402556 <UDP_Handler+0x1fa>
		// IN packet sent
		udd_ctrl_in_sent();
  40254e:	4b28      	ldr	r3, [pc, #160]	; (4025f0 <UDP_Handler+0x294>)
  402550:	4798      	blx	r3
  402552:	f000 bc6a 	b.w	402e2a <UDP_Handler+0xace>
		return true;
	}
	if (Is_udd_bank0_received(0)) {
  402556:	4b19      	ldr	r3, [pc, #100]	; (4025bc <UDP_Handler+0x260>)
  402558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40255a:	f013 0f02 	tst.w	r3, #2
  40255e:	f000 8118 	beq.w	402792 <UDP_Handler+0x436>
static void udd_ctrl_out_received(void)
{
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  402562:	4b1a      	ldr	r3, [pc, #104]	; (4025cc <UDP_Handler+0x270>)
  402564:	781b      	ldrb	r3, [r3, #0]
  402566:	2b01      	cmp	r3, #1
  402568:	d046      	beq.n	4025f8 <UDP_Handler+0x29c>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  40256a:	2b02      	cmp	r3, #2
  40256c:	d001      	beq.n	402572 <UDP_Handler+0x216>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  40256e:	2b04      	cmp	r3, #4
  402570:	d102      	bne.n	402578 <UDP_Handler+0x21c>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  402572:	4b17      	ldr	r3, [pc, #92]	; (4025d0 <UDP_Handler+0x274>)
  402574:	4798      	blx	r3
  402576:	e001      	b.n	40257c <UDP_Handler+0x220>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  402578:	4b17      	ldr	r3, [pc, #92]	; (4025d8 <UDP_Handler+0x27c>)
  40257a:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  40257c:	4a0f      	ldr	r2, [pc, #60]	; (4025bc <UDP_Handler+0x260>)
  40257e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402580:	930c      	str	r3, [sp, #48]	; 0x30
  402582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402584:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402588:	930c      	str	r3, [sp, #48]	; 0x30
  40258a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40258c:	f023 0302 	bic.w	r3, r3, #2
  402590:	930c      	str	r3, [sp, #48]	; 0x30
  402592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  402594:	6313      	str	r3, [r2, #48]	; 0x30
  402596:	2300      	movs	r3, #0
  402598:	930d      	str	r3, [sp, #52]	; 0x34
  40259a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40259c:	2b13      	cmp	r3, #19
  40259e:	d806      	bhi.n	4025ae <UDP_Handler+0x252>
  4025a0:	bf00      	nop
  4025a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4025a4:	3301      	adds	r3, #1
  4025a6:	930d      	str	r3, [sp, #52]	; 0x34
  4025a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4025aa:	2b13      	cmp	r3, #19
  4025ac:	d9f8      	bls.n	4025a0 <UDP_Handler+0x244>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  4025ae:	4b09      	ldr	r3, [pc, #36]	; (4025d4 <UDP_Handler+0x278>)
  4025b0:	4798      	blx	r3
  4025b2:	f000 bc3a 	b.w	402e2a <UDP_Handler+0xace>
  4025b6:	bf00      	nop
  4025b8:	00403b09 	.word	0x00403b09
  4025bc:	40034000 	.word	0x40034000
  4025c0:	200000a3 	.word	0x200000a3
  4025c4:	00403a2d 	.word	0x00403a2d
  4025c8:	00401635 	.word	0x00401635
  4025cc:	200015b4 	.word	0x200015b4
  4025d0:	00401dc1 	.word	0x00401dc1
  4025d4:	00401d19 	.word	0x00401d19
  4025d8:	00401d31 	.word	0x00401d31
  4025dc:	200015ff 	.word	0x200015ff
  4025e0:	00401671 	.word	0x00401671
  4025e4:	20001600 	.word	0x20001600
  4025e8:	20001570 	.word	0x20001570
  4025ec:	200015b2 	.word	0x200015b2
  4025f0:	00401dd1 	.word	0x00401dd1
  4025f4:	00401d79 	.word	0x00401d79
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  4025f8:	4b92      	ldr	r3, [pc, #584]	; (402844 <UDP_Handler+0x4e8>)
  4025fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4025fc:	f3c1 410a 	ubfx	r1, r1, #16, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  402600:	4b91      	ldr	r3, [pc, #580]	; (402848 <UDP_Handler+0x4ec>)
  402602:	899b      	ldrh	r3, [r3, #12]
  402604:	4a91      	ldr	r2, [pc, #580]	; (40284c <UDP_Handler+0x4f0>)
  402606:	8815      	ldrh	r5, [r2, #0]
  402608:	186a      	adds	r2, r5, r1
  40260a:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  40260c:	bfae      	itee	ge
  40260e:	b289      	uxthge	r1, r1
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  402610:	1b5b      	sublt	r3, r3, r5
  402612:	b299      	uxthlt	r1, r3
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  402614:	4b8c      	ldr	r3, [pc, #560]	; (402848 <UDP_Handler+0x4ec>)
  402616:	6898      	ldr	r0, [r3, #8]
  402618:	4428      	add	r0, r5
	for (i = 0; i < nb_data; i++) {
  40261a:	b1a9      	cbz	r1, 402648 <UDP_Handler+0x2ec>
  40261c:	4602      	mov	r2, r0
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  40261e:	4c89      	ldr	r4, [pc, #548]	; (402844 <UDP_Handler+0x4e8>)
  402620:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402622:	f802 3b01 	strb.w	r3, [r2], #1
  402626:	1a13      	subs	r3, r2, r0
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  402628:	b2db      	uxtb	r3, r3
  40262a:	428b      	cmp	r3, r1
  40262c:	d3f8      	bcc.n	402620 <UDP_Handler+0x2c4>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;
  40262e:	440d      	add	r5, r1
  402630:	b2ad      	uxth	r5, r5
  402632:	4b86      	ldr	r3, [pc, #536]	; (40284c <UDP_Handler+0x4f0>)
  402634:	801d      	strh	r5, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  402636:	2940      	cmp	r1, #64	; 0x40
  402638:	d106      	bne.n	402648 <UDP_Handler+0x2ec>
			|| (udd_g_ctrlreq.req.wLength <=
  40263a:	4b83      	ldr	r3, [pc, #524]	; (402848 <UDP_Handler+0x4ec>)
  40263c:	88da      	ldrh	r2, [r3, #6]
			(udd_ctrl_prev_payload_nb_trans +
  40263e:	4b84      	ldr	r3, [pc, #528]	; (402850 <UDP_Handler+0x4f4>)
  402640:	881b      	ldrh	r3, [r3, #0]
  402642:	442b      	add	r3, r5
		*ptr_dest++ = udd_endpoint_fifo_read(0);
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
  402644:	429a      	cmp	r2, r3
  402646:	dc3e      	bgt.n	4026c6 <UDP_Handler+0x36a>
			(udd_ctrl_prev_payload_nb_trans +
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  402648:	4b7f      	ldr	r3, [pc, #508]	; (402848 <UDP_Handler+0x4ec>)
  40264a:	819d      	strh	r5, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  40264c:	695b      	ldr	r3, [r3, #20]
  40264e:	b1f3      	cbz	r3, 40268e <UDP_Handler+0x332>
			if (!udd_g_ctrlreq.over_under_run()) {
  402650:	4798      	blx	r3
  402652:	b9e0      	cbnz	r0, 40268e <UDP_Handler+0x332>
				// Stall ZLP
				udd_ctrl_stall_data();
  402654:	4b7f      	ldr	r3, [pc, #508]	; (402854 <UDP_Handler+0x4f8>)
  402656:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  402658:	4a7a      	ldr	r2, [pc, #488]	; (402844 <UDP_Handler+0x4e8>)
  40265a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40265c:	930e      	str	r3, [sp, #56]	; 0x38
  40265e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402660:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402664:	930e      	str	r3, [sp, #56]	; 0x38
  402666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402668:	f023 0302 	bic.w	r3, r3, #2
  40266c:	930e      	str	r3, [sp, #56]	; 0x38
  40266e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402670:	6313      	str	r3, [r2, #48]	; 0x30
  402672:	2300      	movs	r3, #0
  402674:	930f      	str	r3, [sp, #60]	; 0x3c
  402676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402678:	2b13      	cmp	r3, #19
  40267a:	f200 83d6 	bhi.w	402e2a <UDP_Handler+0xace>
  40267e:	bf00      	nop
  402680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402682:	3301      	adds	r3, #1
  402684:	930f      	str	r3, [sp, #60]	; 0x3c
  402686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  402688:	2b13      	cmp	r3, #19
  40268a:	d9f8      	bls.n	40267e <UDP_Handler+0x322>
  40268c:	e3cd      	b.n	402e2a <UDP_Handler+0xace>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  40268e:	4a6d      	ldr	r2, [pc, #436]	; (402844 <UDP_Handler+0x4e8>)
  402690:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402692:	9310      	str	r3, [sp, #64]	; 0x40
  402694:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402696:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40269a:	9310      	str	r3, [sp, #64]	; 0x40
  40269c:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40269e:	f023 0302 	bic.w	r3, r3, #2
  4026a2:	9310      	str	r3, [sp, #64]	; 0x40
  4026a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4026a6:	6313      	str	r3, [r2, #48]	; 0x30
  4026a8:	2300      	movs	r3, #0
  4026aa:	9311      	str	r3, [sp, #68]	; 0x44
  4026ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4026ae:	2b13      	cmp	r3, #19
  4026b0:	d806      	bhi.n	4026c0 <UDP_Handler+0x364>
  4026b2:	bf00      	nop
  4026b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4026b6:	3301      	adds	r3, #1
  4026b8:	9311      	str	r3, [sp, #68]	; 0x44
  4026ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4026bc:	2b13      	cmp	r3, #19
  4026be:	d9f8      	bls.n	4026b2 <UDP_Handler+0x356>
		udd_ctrl_send_zlp_in();
  4026c0:	4b65      	ldr	r3, [pc, #404]	; (402858 <UDP_Handler+0x4fc>)
  4026c2:	4798      	blx	r3
  4026c4:	e3b1      	b.n	402e2a <UDP_Handler+0xace>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  4026c6:	4b60      	ldr	r3, [pc, #384]	; (402848 <UDP_Handler+0x4ec>)
  4026c8:	899b      	ldrh	r3, [r3, #12]
  4026ca:	42ab      	cmp	r3, r5
  4026cc:	d146      	bne.n	40275c <UDP_Handler+0x400>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  4026ce:	4b5e      	ldr	r3, [pc, #376]	; (402848 <UDP_Handler+0x4ec>)
  4026d0:	695b      	ldr	r3, [r3, #20]
  4026d2:	b9e3      	cbnz	r3, 40270e <UDP_Handler+0x3b2>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  4026d4:	4b5f      	ldr	r3, [pc, #380]	; (402854 <UDP_Handler+0x4f8>)
  4026d6:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4026d8:	4a5a      	ldr	r2, [pc, #360]	; (402844 <UDP_Handler+0x4e8>)
  4026da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4026dc:	9312      	str	r3, [sp, #72]	; 0x48
  4026de:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4026e0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4026e4:	9312      	str	r3, [sp, #72]	; 0x48
  4026e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4026e8:	f023 0302 	bic.w	r3, r3, #2
  4026ec:	9312      	str	r3, [sp, #72]	; 0x48
  4026ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4026f0:	6313      	str	r3, [r2, #48]	; 0x30
  4026f2:	2300      	movs	r3, #0
  4026f4:	9313      	str	r3, [sp, #76]	; 0x4c
  4026f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4026f8:	2b13      	cmp	r3, #19
  4026fa:	f200 8396 	bhi.w	402e2a <UDP_Handler+0xace>
  4026fe:	bf00      	nop
  402700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402702:	3301      	adds	r3, #1
  402704:	9313      	str	r3, [sp, #76]	; 0x4c
  402706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402708:	2b13      	cmp	r3, #19
  40270a:	d9f8      	bls.n	4026fe <UDP_Handler+0x3a2>
  40270c:	e38d      	b.n	402e2a <UDP_Handler+0xace>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  40270e:	4798      	blx	r3
  402710:	b9e0      	cbnz	r0, 40274c <UDP_Handler+0x3f0>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  402712:	4b50      	ldr	r3, [pc, #320]	; (402854 <UDP_Handler+0x4f8>)
  402714:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  402716:	4a4b      	ldr	r2, [pc, #300]	; (402844 <UDP_Handler+0x4e8>)
  402718:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40271a:	9314      	str	r3, [sp, #80]	; 0x50
  40271c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40271e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402722:	9314      	str	r3, [sp, #80]	; 0x50
  402724:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402726:	f023 0302 	bic.w	r3, r3, #2
  40272a:	9314      	str	r3, [sp, #80]	; 0x50
  40272c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40272e:	6313      	str	r3, [r2, #48]	; 0x30
  402730:	2300      	movs	r3, #0
  402732:	9315      	str	r3, [sp, #84]	; 0x54
  402734:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402736:	2b13      	cmp	r3, #19
  402738:	f200 8377 	bhi.w	402e2a <UDP_Handler+0xace>
  40273c:	bf00      	nop
  40273e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402740:	3301      	adds	r3, #1
  402742:	9315      	str	r3, [sp, #84]	; 0x54
  402744:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402746:	2b13      	cmp	r3, #19
  402748:	d9f8      	bls.n	40273c <UDP_Handler+0x3e0>
  40274a:	e36e      	b.n	402e2a <UDP_Handler+0xace>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40274c:	4940      	ldr	r1, [pc, #256]	; (402850 <UDP_Handler+0x4f4>)
  40274e:	4a3f      	ldr	r2, [pc, #252]	; (40284c <UDP_Handler+0x4f0>)
  402750:	8810      	ldrh	r0, [r2, #0]
  402752:	880b      	ldrh	r3, [r1, #0]
  402754:	4403      	add	r3, r0
  402756:	800b      	strh	r3, [r1, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  402758:	2300      	movs	r3, #0
  40275a:	8013      	strh	r3, [r2, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  40275c:	4a39      	ldr	r2, [pc, #228]	; (402844 <UDP_Handler+0x4e8>)
  40275e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402760:	9316      	str	r3, [sp, #88]	; 0x58
  402762:	9b16      	ldr	r3, [sp, #88]	; 0x58
  402764:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402768:	9316      	str	r3, [sp, #88]	; 0x58
  40276a:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40276c:	f023 0302 	bic.w	r3, r3, #2
  402770:	9316      	str	r3, [sp, #88]	; 0x58
  402772:	9b16      	ldr	r3, [sp, #88]	; 0x58
  402774:	6313      	str	r3, [r2, #48]	; 0x30
  402776:	2300      	movs	r3, #0
  402778:	9317      	str	r3, [sp, #92]	; 0x5c
  40277a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40277c:	2b13      	cmp	r3, #19
  40277e:	f200 8354 	bhi.w	402e2a <UDP_Handler+0xace>
  402782:	bf00      	nop
  402784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402786:	3301      	adds	r3, #1
  402788:	9317      	str	r3, [sp, #92]	; 0x5c
  40278a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40278c:	2b13      	cmp	r3, #19
  40278e:	d9f8      	bls.n	402782 <UDP_Handler+0x426>
  402790:	e34b      	b.n	402e2a <UDP_Handler+0xace>
	if (Is_udd_bank0_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
  402792:	4b2c      	ldr	r3, [pc, #176]	; (402844 <UDP_Handler+0x4e8>)
  402794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402796:	f013 0f08 	tst.w	r3, #8
  40279a:	d106      	bne.n	4027aa <UDP_Handler+0x44e>
  40279c:	4f2f      	ldr	r7, [pc, #188]	; (40285c <UDP_Handler+0x500>)
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
  40279e:	4639      	mov	r1, r7
  4027a0:	2301      	movs	r3, #1
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4027a2:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 402844 <UDP_Handler+0x4e8>
  4027a6:	4618      	mov	r0, r3
  4027a8:	e01a      	b.n	4027e0 <UDP_Handler+0x484>
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_stall(0)) {
		// STALLed
		udd_ack_stall(0);
  4027aa:	4a26      	ldr	r2, [pc, #152]	; (402844 <UDP_Handler+0x4e8>)
  4027ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4027ae:	9300      	str	r3, [sp, #0]
  4027b0:	9b00      	ldr	r3, [sp, #0]
  4027b2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4027b6:	9300      	str	r3, [sp, #0]
  4027b8:	9b00      	ldr	r3, [sp, #0]
  4027ba:	f023 0308 	bic.w	r3, r3, #8
  4027be:	9300      	str	r3, [sp, #0]
  4027c0:	9b00      	ldr	r3, [sp, #0]
  4027c2:	6313      	str	r3, [r2, #48]	; 0x30
  4027c4:	2300      	movs	r3, #0
  4027c6:	9301      	str	r3, [sp, #4]
  4027c8:	9b01      	ldr	r3, [sp, #4]
  4027ca:	2b13      	cmp	r3, #19
  4027cc:	f200 832d 	bhi.w	402e2a <UDP_Handler+0xace>
  4027d0:	bf00      	nop
  4027d2:	9b01      	ldr	r3, [sp, #4]
  4027d4:	3301      	adds	r3, #1
  4027d6:	9301      	str	r3, [sp, #4]
  4027d8:	9b01      	ldr	r3, [sp, #4]
  4027da:	2b13      	cmp	r3, #19
  4027dc:	d9f8      	bls.n	4027d0 <UDP_Handler+0x474>
  4027de:	e324      	b.n	402e2a <UDP_Handler+0xace>
  4027e0:	b2de      	uxtb	r6, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  4027e2:	f8de 2018 	ldr.w	r2, [lr, #24]
  4027e6:	461d      	mov	r5, r3
  4027e8:	fa00 f403 	lsl.w	r4, r0, r3
  4027ec:	4214      	tst	r4, r2
  4027ee:	f000 8220 	beq.w	402c32 <UDP_Handler+0x8d6>
  4027f2:	f103 38ff 	add.w	r8, r3, #4294967295
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  4027f6:	4689      	mov	r9, r1
  4027f8:	009a      	lsls	r2, r3, #2
  4027fa:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4027fe:	f502 3240 	add.w	r2, r2, #196608	; 0x30000

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  402802:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
  402806:	f01c 0f42 	tst.w	ip, #66	; 0x42
  40280a:	d052      	beq.n	4028b2 <UDP_Handler+0x556>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40280c:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  402810:	4a12      	ldr	r2, [pc, #72]	; (40285c <UDP_Handler+0x500>)
  402812:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402816:	689a      	ldr	r2, [r3, #8]
  402818:	68d9      	ldr	r1, [r3, #12]
	uint32_t pkt_size = ptr_job->size;
  40281a:	f8b3 a010 	ldrh.w	sl, [r3, #16]
  40281e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  402822:	685b      	ldr	r3, [r3, #4]
  402824:	00ad      	lsls	r5, r5, #2
  402826:	f105 2540 	add.w	r5, r5, #1073758208	; 0x40004000
  40282a:	f505 3540 	add.w	r5, r5, #196608	; 0x30000
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  40282e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
  402830:	f3c7 470a 	ubfx	r7, r7, #16, #11
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
  402834:	2f00      	cmp	r7, #0
  402836:	f000 82ed 	beq.w	402e14 <UDP_Handler+0xab8>

static void udd_ep_out_received(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  40283a:	1a50      	subs	r0, r2, r1
	nb_data = udd_byte_count(ep);
	b_short = (nb_data < pkt_size);

	// Copy data if there is
	if (nb_data > 0) {
		if (nb_data >= nb_remain) {
  40283c:	42b8      	cmp	r0, r7
  40283e:	f240 82dd 	bls.w	402dfc <UDP_Handler+0xaa0>
  402842:	e2cc      	b.n	402dde <UDP_Handler+0xa82>
  402844:	40034000 	.word	0x40034000
  402848:	20001600 	.word	0x20001600
  40284c:	200015b2 	.word	0x200015b2
  402850:	20001570 	.word	0x20001570
  402854:	00401d31 	.word	0x00401d31
  402858:	00401d79 	.word	0x00401d79
  40285c:	20001574 	.word	0x20001574
			nb_data = nb_remain;
			b_full = true;
  402860:	f04f 0b01 	mov.w	fp, #1
{
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  402864:	4419      	add	r1, r3
  402866:	460b      	mov	r3, r1
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  402868:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40286a:	f803 2b01 	strb.w	r2, [r3], #1
  40286e:	1a5a      	subs	r2, r3, r1
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  402870:	4290      	cmp	r0, r2
  402872:	d8f9      	bhi.n	402868 <UDP_Handler+0x50c>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402874:	4630      	mov	r0, r6
  402876:	4ba5      	ldr	r3, [pc, #660]	; (402b0c <UDP_Handler+0x7b0>)
  402878:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  40287a:	f1bb 0f00 	cmp.w	fp, #0
  40287e:	d102      	bne.n	402886 <UDP_Handler+0x52a>
  402880:	45ba      	cmp	sl, r7
  402882:	f240 82d2 	bls.w	402e2a <UDP_Handler+0xace>
			!Is_udd_endpoint_stall_requested(ep)) {
  402886:	6b2b      	ldr	r3, [r5, #48]	; 0x30
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  402888:	f013 0f20 	tst.w	r3, #32
  40288c:	f040 82cd 	bne.w	402e2a <UDP_Handler+0xace>
			!Is_udd_endpoint_stall_requested(ep)) {
		udd_disable_endpoint_interrupt(ep);
  402890:	4b9f      	ldr	r3, [pc, #636]	; (402b10 <UDP_Handler+0x7b4>)
  402892:	615c      	str	r4, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402894:	4b9f      	ldr	r3, [pc, #636]	; (402b14 <UDP_Handler+0x7b8>)
  402896:	ea4f 0288 	mov.w	r2, r8, lsl #2
  40289a:	eb02 0108 	add.w	r1, r2, r8
  40289e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
  4028a2:	68cb      	ldr	r3, [r1, #12]
  4028a4:	608b      	str	r3, [r1, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4028a6:	4648      	mov	r0, r9
  4028a8:	2100      	movs	r1, #0
  4028aa:	4632      	mov	r2, r6
  4028ac:	4b9a      	ldr	r3, [pc, #616]	; (402b18 <UDP_Handler+0x7bc>)
  4028ae:	4798      	blx	r3
  4028b0:	e2bb      	b.n	402e2a <UDP_Handler+0xace>
		if (Is_udd_any_bank_received(ep)) {
			udd_ep_out_received(ep);
			return true;
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  4028b2:	f8d2 c030 	ldr.w	ip, [r2, #48]	; 0x30
  4028b6:	f01c 0f01 	tst.w	ip, #1
  4028ba:	f000 8190 	beq.w	402bde <UDP_Handler+0x882>

			ptr_job->bank--;
  4028be:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  4028c2:	4b94      	ldr	r3, [pc, #592]	; (402b14 <UDP_Handler+0x7b8>)
  4028c4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  4028c8:	7c53      	ldrb	r3, [r2, #17]
  4028ca:	f3c3 0181 	ubfx	r1, r3, #2, #2
  4028ce:	3103      	adds	r1, #3
  4028d0:	f361 0383 	bfi	r3, r1, #2, #2
  4028d4:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  4028d6:	7c53      	ldrb	r3, [r2, #17]
  4028d8:	f013 0f20 	tst.w	r3, #32
  4028dc:	d078      	beq.n	4029d0 <UDP_Handler+0x674>
				if (ptr_job->bank) {
  4028de:	f013 0f0c 	tst.w	r3, #12
  4028e2:	d036      	beq.n	402952 <UDP_Handler+0x5f6>
  4028e4:	00aa      	lsls	r2, r5, #2
  4028e6:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4028ea:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
					// Send remaining
					udd_set_transmit_ready(ep);
  4028ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4028f0:	9318      	str	r3, [sp, #96]	; 0x60
  4028f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4028f4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4028f8:	9318      	str	r3, [sp, #96]	; 0x60
  4028fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4028fc:	f043 0310 	orr.w	r3, r3, #16
  402900:	9318      	str	r3, [sp, #96]	; 0x60
  402902:	9b18      	ldr	r3, [sp, #96]	; 0x60
  402904:	6313      	str	r3, [r2, #48]	; 0x30
  402906:	2300      	movs	r3, #0
  402908:	9319      	str	r3, [sp, #100]	; 0x64
  40290a:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40290c:	2b13      	cmp	r3, #19
  40290e:	d806      	bhi.n	40291e <UDP_Handler+0x5c2>
  402910:	bf00      	nop
  402912:	9b19      	ldr	r3, [sp, #100]	; 0x64
  402914:	3301      	adds	r3, #1
  402916:	9319      	str	r3, [sp, #100]	; 0x64
  402918:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40291a:	2b13      	cmp	r3, #19
  40291c:	d9f8      	bls.n	402910 <UDP_Handler+0x5b4>
					udd_ack_in_sent(ep);
  40291e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402920:	931a      	str	r3, [sp, #104]	; 0x68
  402922:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402924:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402928:	931a      	str	r3, [sp, #104]	; 0x68
  40292a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40292c:	f023 0301 	bic.w	r3, r3, #1
  402930:	931a      	str	r3, [sp, #104]	; 0x68
  402932:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402934:	6313      	str	r3, [r2, #48]	; 0x30
  402936:	2300      	movs	r3, #0
  402938:	931b      	str	r3, [sp, #108]	; 0x6c
  40293a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40293c:	2b13      	cmp	r3, #19
  40293e:	f200 8274 	bhi.w	402e2a <UDP_Handler+0xace>
  402942:	bf00      	nop
  402944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  402946:	3301      	adds	r3, #1
  402948:	931b      	str	r3, [sp, #108]	; 0x6c
  40294a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40294c:	2b13      	cmp	r3, #19
  40294e:	d9f8      	bls.n	402942 <UDP_Handler+0x5e6>
  402950:	e26b      	b.n	402e2a <UDP_Handler+0xace>
  402952:	00aa      	lsls	r2, r5, #2
  402954:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402958:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  40295c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40295e:	931c      	str	r3, [sp, #112]	; 0x70
  402960:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  402962:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402966:	931c      	str	r3, [sp, #112]	; 0x70
  402968:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40296a:	f023 0301 	bic.w	r3, r3, #1
  40296e:	931c      	str	r3, [sp, #112]	; 0x70
  402970:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  402972:	6313      	str	r3, [r2, #48]	; 0x30
  402974:	2300      	movs	r3, #0
  402976:	931d      	str	r3, [sp, #116]	; 0x74
  402978:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40297a:	2b13      	cmp	r3, #19
  40297c:	d806      	bhi.n	40298c <UDP_Handler+0x630>
  40297e:	bf00      	nop
  402980:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402982:	3301      	adds	r3, #1
  402984:	931d      	str	r3, [sp, #116]	; 0x74
  402986:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  402988:	2b13      	cmp	r3, #19
  40298a:	d9f8      	bls.n	40297e <UDP_Handler+0x622>
					// Enable stall
					udd_enable_stall_handshake(ep);
  40298c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40298e:	931e      	str	r3, [sp, #120]	; 0x78
  402990:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  402992:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402996:	931e      	str	r3, [sp, #120]	; 0x78
  402998:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40299a:	f043 0320 	orr.w	r3, r3, #32
  40299e:	931e      	str	r3, [sp, #120]	; 0x78
  4029a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  4029a2:	6313      	str	r3, [r2, #48]	; 0x30
  4029a4:	2300      	movs	r3, #0
  4029a6:	931f      	str	r3, [sp, #124]	; 0x7c
  4029a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4029aa:	2b13      	cmp	r3, #19
  4029ac:	d806      	bhi.n	4029bc <UDP_Handler+0x660>
  4029ae:	bf00      	nop
  4029b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4029b2:	3301      	adds	r3, #1
  4029b4:	931f      	str	r3, [sp, #124]	; 0x7c
  4029b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4029b8:	2b13      	cmp	r3, #19
  4029ba:	d9f8      	bls.n	4029ae <UDP_Handler+0x652>
					// Halt executed
					ptr_job->b_stall_requested = false;
  4029bc:	eb08 0888 	add.w	r8, r8, r8, lsl #2
  4029c0:	4b54      	ldr	r3, [pc, #336]	; (402b14 <UDP_Handler+0x7b8>)
  4029c2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
  4029c6:	7c5a      	ldrb	r2, [r3, #17]
  4029c8:	f36f 1245 	bfc	r2, #5, #1
  4029cc:	745a      	strb	r2, [r3, #17]
  4029ce:	e22c      	b.n	402e2a <UDP_Handler+0xace>
				}
				return true;
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  4029d0:	f013 0f80 	tst.w	r3, #128	; 0x80
  4029d4:	d00f      	beq.n	4029f6 <UDP_Handler+0x69a>
				ptr_job->b_buf_end = false;
  4029d6:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  4029da:	4b4e      	ldr	r3, [pc, #312]	; (402b14 <UDP_Handler+0x7b8>)
  4029dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4029e0:	7c59      	ldrb	r1, [r3, #17]
  4029e2:	f36f 11c7 	bfc	r1, #7, #1
  4029e6:	7459      	strb	r1, [r3, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4029e8:	68da      	ldr	r2, [r3, #12]
  4029ea:	609a      	str	r2, [r3, #8]
				udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4029ec:	4648      	mov	r0, r9
  4029ee:	2100      	movs	r1, #0
  4029f0:	4632      	mov	r2, r6
  4029f2:	4b49      	ldr	r3, [pc, #292]	; (402b18 <UDP_Handler+0x7bc>)
  4029f4:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  4029f6:	eb08 0388 	add.w	r3, r8, r8, lsl #2
  4029fa:	4a46      	ldr	r2, [pc, #280]	; (402b14 <UDP_Handler+0x7b8>)
  4029fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402a00:	68da      	ldr	r2, [r3, #12]
  402a02:	689b      	ldr	r3, [r3, #8]
  402a04:	429a      	cmp	r2, r3
  402a06:	d338      	bcc.n	402a7a <UDP_Handler+0x71e>
					!ptr_job->b_shortpacket &&
  402a08:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  402a0c:	4b41      	ldr	r3, [pc, #260]	; (402b14 <UDP_Handler+0x7b8>)
  402a0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402a12:	7c5b      	ldrb	r3, [r3, #17]
  402a14:	f013 0f4c 	tst.w	r3, #76	; 0x4c
  402a18:	d12f      	bne.n	402a7a <UDP_Handler+0x71e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402a1a:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402a1e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402a20:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402a24:	2100      	movs	r1, #0
  402a26:	4a3d      	ldr	r2, [pc, #244]	; (402b1c <UDP_Handler+0x7c0>)
  402a28:	7011      	strb	r1, [r2, #0]
					ptr_job->bank == 0) {
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
				udd_disable_endpoint_interrupt(ep);
  402a2a:	4a39      	ldr	r2, [pc, #228]	; (402b10 <UDP_Handler+0x7b4>)
  402a2c:	6154      	str	r4, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402a2e:	b92b      	cbnz	r3, 402a3c <UDP_Handler+0x6e0>
		cpu_irq_enable();
  402a30:	2201      	movs	r2, #1
  402a32:	4b3a      	ldr	r3, [pc, #232]	; (402b1c <UDP_Handler+0x7c0>)
  402a34:	701a      	strb	r2, [r3, #0]
  402a36:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402a3a:	b662      	cpsie	i
  402a3c:	00ab      	lsls	r3, r5, #2
  402a3e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402a42:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				cpu_irq_restore(flags);
				// Ack last packet
				udd_ack_in_sent(ep);
  402a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402a48:	9220      	str	r2, [sp, #128]	; 0x80
  402a4a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402a4c:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402a50:	9220      	str	r2, [sp, #128]	; 0x80
  402a52:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402a54:	f022 0201 	bic.w	r2, r2, #1
  402a58:	9220      	str	r2, [sp, #128]	; 0x80
  402a5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
  402a5c:	631a      	str	r2, [r3, #48]	; 0x30
  402a5e:	2300      	movs	r3, #0
  402a60:	9321      	str	r3, [sp, #132]	; 0x84
  402a62:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402a64:	2b13      	cmp	r3, #19
  402a66:	f200 81e0 	bhi.w	402e2a <UDP_Handler+0xace>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402a6a:	bf00      	nop
  402a6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402a6e:	3301      	adds	r3, #1
  402a70:	9321      	str	r3, [sp, #132]	; 0x84
  402a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
  402a74:	2b13      	cmp	r3, #19
  402a76:	d9f8      	bls.n	402a6a <UDP_Handler+0x70e>
  402a78:	e1d7      	b.n	402e2a <UDP_Handler+0xace>
				return true;
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  402a7a:	2e00      	cmp	r6, #0
  402a7c:	f000 808c 	beq.w	402b98 <UDP_Handler+0x83c>
  402a80:	2e03      	cmp	r6, #3
  402a82:	f000 8089 	beq.w	402b98 <UDP_Handler+0x83c>
					&& ptr_job->bank > 0) {
  402a86:	eb08 0288 	add.w	r2, r8, r8, lsl #2
  402a8a:	4b22      	ldr	r3, [pc, #136]	; (402b14 <UDP_Handler+0x7b8>)
  402a8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402a90:	7c5b      	ldrb	r3, [r3, #17]
  402a92:	f013 0f0c 	tst.w	r3, #12
  402a96:	d045      	beq.n	402b24 <UDP_Handler+0x7c8>
  402a98:	00aa      	lsls	r2, r5, #2
  402a9a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  402a9e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  402aa2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402aa4:	9322      	str	r3, [sp, #136]	; 0x88
  402aa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402aa8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402aac:	9322      	str	r3, [sp, #136]	; 0x88
  402aae:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402ab0:	f043 0310 	orr.w	r3, r3, #16
  402ab4:	9322      	str	r3, [sp, #136]	; 0x88
  402ab6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  402ab8:	6313      	str	r3, [r2, #48]	; 0x30
  402aba:	2300      	movs	r3, #0
  402abc:	9323      	str	r3, [sp, #140]	; 0x8c
  402abe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402ac0:	2b13      	cmp	r3, #19
  402ac2:	d806      	bhi.n	402ad2 <UDP_Handler+0x776>
  402ac4:	bf00      	nop
  402ac6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402ac8:	3301      	adds	r3, #1
  402aca:	9323      	str	r3, [sp, #140]	; 0x8c
  402acc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402ace:	2b13      	cmp	r3, #19
  402ad0:	d9f8      	bls.n	402ac4 <UDP_Handler+0x768>
				udd_ack_in_sent(ep);
  402ad2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402ad4:	9324      	str	r3, [sp, #144]	; 0x90
  402ad6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402ad8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402adc:	9324      	str	r3, [sp, #144]	; 0x90
  402ade:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402ae0:	f023 0301 	bic.w	r3, r3, #1
  402ae4:	9324      	str	r3, [sp, #144]	; 0x90
  402ae6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  402ae8:	6313      	str	r3, [r2, #48]	; 0x30
  402aea:	2300      	movs	r3, #0
  402aec:	9325      	str	r3, [sp, #148]	; 0x94
  402aee:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402af0:	2b13      	cmp	r3, #19
  402af2:	d806      	bhi.n	402b02 <UDP_Handler+0x7a6>
  402af4:	bf00      	nop
  402af6:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402af8:	3301      	adds	r3, #1
  402afa:	9325      	str	r3, [sp, #148]	; 0x94
  402afc:	9b25      	ldr	r3, [sp, #148]	; 0x94
  402afe:	2b13      	cmp	r3, #19
  402b00:	d9f8      	bls.n	402af4 <UDP_Handler+0x798>
				udd_ep_in_sent(ep, false);
  402b02:	4630      	mov	r0, r6
  402b04:	2100      	movs	r1, #0
  402b06:	4b06      	ldr	r3, [pc, #24]	; (402b20 <UDP_Handler+0x7c4>)
  402b08:	4798      	blx	r3
  402b0a:	e18e      	b.n	402e2a <UDP_Handler+0xace>
  402b0c:	00402011 	.word	0x00402011
  402b10:	40034000 	.word	0x40034000
  402b14:	20001574 	.word	0x20001574
  402b18:	00401fd1 	.word	0x00401fd1
  402b1c:	200000a3 	.word	0x200000a3
  402b20:	00402105 	.word	0x00402105
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  402b24:	4630      	mov	r0, r6
  402b26:	2101      	movs	r1, #1
  402b28:	4b69      	ldr	r3, [pc, #420]	; (402cd0 <UDP_Handler+0x974>)
  402b2a:	4798      	blx	r3
  402b2c:	b990      	cbnz	r0, 402b54 <UDP_Handler+0x7f8>
					ptr_job->b_buf_end = false;
  402b2e:	2314      	movs	r3, #20
  402b30:	4a68      	ldr	r2, [pc, #416]	; (402cd4 <UDP_Handler+0x978>)
  402b32:	fb03 2808 	mla	r8, r3, r8, r2
  402b36:	f898 2011 	ldrb.w	r2, [r8, #17]
  402b3a:	f36f 12c7 	bfc	r2, #7, #1
  402b3e:	f888 2011 	strb.w	r2, [r8, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  402b42:	f8d8 300c 	ldr.w	r3, [r8, #12]
  402b46:	f8c8 3008 	str.w	r3, [r8, #8]
					udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  402b4a:	4648      	mov	r0, r9
  402b4c:	2100      	movs	r1, #0
  402b4e:	4632      	mov	r2, r6
  402b50:	4b61      	ldr	r3, [pc, #388]	; (402cd8 <UDP_Handler+0x97c>)
  402b52:	4798      	blx	r3
  402b54:	00ab      	lsls	r3, r5, #2
  402b56:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402b5a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				}
				udd_ack_in_sent(ep);
  402b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402b60:	9226      	str	r2, [sp, #152]	; 0x98
  402b62:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402b64:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402b68:	9226      	str	r2, [sp, #152]	; 0x98
  402b6a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402b6c:	f022 0201 	bic.w	r2, r2, #1
  402b70:	9226      	str	r2, [sp, #152]	; 0x98
  402b72:	9a26      	ldr	r2, [sp, #152]	; 0x98
  402b74:	631a      	str	r2, [r3, #48]	; 0x30
  402b76:	2300      	movs	r3, #0
  402b78:	9327      	str	r3, [sp, #156]	; 0x9c
  402b7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b7c:	2b13      	cmp	r3, #19
  402b7e:	d806      	bhi.n	402b8e <UDP_Handler+0x832>
  402b80:	bf00      	nop
  402b82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b84:	3301      	adds	r3, #1
  402b86:	9327      	str	r3, [sp, #156]	; 0x9c
  402b88:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  402b8a:	2b13      	cmp	r3, #19
  402b8c:	d9f8      	bls.n	402b80 <UDP_Handler+0x824>
				udd_ep_in_sent(ep, false);
  402b8e:	4630      	mov	r0, r6
  402b90:	2100      	movs	r1, #0
  402b92:	4b4f      	ldr	r3, [pc, #316]	; (402cd0 <UDP_Handler+0x974>)
  402b94:	4798      	blx	r3
  402b96:	e148      	b.n	402e2a <UDP_Handler+0xace>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  402b98:	4630      	mov	r0, r6
  402b9a:	2101      	movs	r1, #1
  402b9c:	4b4c      	ldr	r3, [pc, #304]	; (402cd0 <UDP_Handler+0x974>)
  402b9e:	4798      	blx	r3
  402ba0:	00ab      	lsls	r3, r5, #2
  402ba2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402ba6:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
				udd_ack_in_sent(ep);
  402baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402bac:	9228      	str	r2, [sp, #160]	; 0xa0
  402bae:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402bb0:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402bb4:	9228      	str	r2, [sp, #160]	; 0xa0
  402bb6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402bb8:	f022 0201 	bic.w	r2, r2, #1
  402bbc:	9228      	str	r2, [sp, #160]	; 0xa0
  402bbe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  402bc0:	631a      	str	r2, [r3, #48]	; 0x30
  402bc2:	2300      	movs	r3, #0
  402bc4:	9329      	str	r3, [sp, #164]	; 0xa4
  402bc6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402bc8:	2b13      	cmp	r3, #19
  402bca:	f200 812e 	bhi.w	402e2a <UDP_Handler+0xace>
  402bce:	bf00      	nop
  402bd0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402bd2:	3301      	adds	r3, #1
  402bd4:	9329      	str	r3, [sp, #164]	; 0xa4
  402bd6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
  402bd8:	2b13      	cmp	r3, #19
  402bda:	d9f8      	bls.n	402bce <UDP_Handler+0x872>
  402bdc:	e125      	b.n	402e2a <UDP_Handler+0xace>
			}
			return true;
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  402bde:	6b12      	ldr	r2, [r2, #48]	; 0x30
  402be0:	f012 0f08 	tst.w	r2, #8
  402be4:	d025      	beq.n	402c32 <UDP_Handler+0x8d6>
  402be6:	009b      	lsls	r3, r3, #2
  402be8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  402bec:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
			udd_ack_stall(ep);
  402bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402bf2:	922a      	str	r2, [sp, #168]	; 0xa8
  402bf4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  402bf6:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402bfa:	922a      	str	r2, [sp, #168]	; 0xa8
  402bfc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  402bfe:	f022 0208 	bic.w	r2, r2, #8
  402c02:	922a      	str	r2, [sp, #168]	; 0xa8
  402c04:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
  402c06:	631a      	str	r2, [r3, #48]	; 0x30
  402c08:	2200      	movs	r2, #0
  402c0a:	922b      	str	r2, [sp, #172]	; 0xac
  402c0c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  402c0e:	2a13      	cmp	r2, #19
  402c10:	d806      	bhi.n	402c20 <UDP_Handler+0x8c4>
  402c12:	bf00      	nop
  402c14:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  402c16:	3201      	adds	r2, #1
  402c18:	922b      	str	r2, [sp, #172]	; 0xac
  402c1a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
  402c1c:	2a13      	cmp	r2, #19
  402c1e:	d9f8      	bls.n	402c12 <UDP_Handler+0x8b6>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  402c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402c22:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  402c26:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  402c2a:	f000 80fe 	beq.w	402e2a <UDP_Handler+0xace>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  402c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c30:	e0fb      	b.n	402e2a <UDP_Handler+0xace>
  402c32:	3301      	adds	r3, #1
  402c34:	3114      	adds	r1, #20
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  402c36:	2b04      	cmp	r3, #4
  402c38:	f47f add2 	bne.w	4027e0 <UDP_Handler+0x484>
  402c3c:	e0ee      	b.n	402e1c <UDP_Handler+0xac0>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402c3e:	4b27      	ldr	r3, [pc, #156]	; (402cdc <UDP_Handler+0x980>)
  402c40:	69db      	ldr	r3, [r3, #28]
  402c42:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402c46:	d113      	bne.n	402c70 <UDP_Handler+0x914>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402c48:	4b24      	ldr	r3, [pc, #144]	; (402cdc <UDP_Handler+0x980>)
  402c4a:	699b      	ldr	r3, [r3, #24]
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402c4c:	f413 7f00 	tst.w	r3, #512	; 0x200
  402c50:	d004      	beq.n	402c5c <UDP_Handler+0x900>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402c52:	4b22      	ldr	r3, [pc, #136]	; (402cdc <UDP_Handler+0x980>)
  402c54:	69db      	ldr	r3, [r3, #28]
  402c56:	f413 7f00 	tst.w	r3, #512	; 0x200
  402c5a:	d109      	bne.n	402c70 <UDP_Handler+0x914>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402c5c:	4b1f      	ldr	r3, [pc, #124]	; (402cdc <UDP_Handler+0x980>)
  402c5e:	699b      	ldr	r3, [r3, #24]
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  402c60:	f413 6f80 	tst.w	r3, #1024	; 0x400
  402c64:	d014      	beq.n	402c90 <UDP_Handler+0x934>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  402c66:	4b1d      	ldr	r3, [pc, #116]	; (402cdc <UDP_Handler+0x980>)
  402c68:	69db      	ldr	r3, [r3, #28]
  402c6a:	f413 6f80 	tst.w	r3, #1024	; 0x400
  402c6e:	d00f      	beq.n	402c90 <UDP_Handler+0x934>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  402c70:	4c1a      	ldr	r4, [pc, #104]	; (402cdc <UDP_Handler+0x980>)
  402c72:	f44f 5318 	mov.w	r3, #9728	; 0x2600
  402c76:	6223      	str	r3, [r4, #32]
		// Do resume operations
		udd_disable_wakeups();
  402c78:	6163      	str	r3, [r4, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  402c7a:	2001      	movs	r0, #1
  402c7c:	4b18      	ldr	r3, [pc, #96]	; (402ce0 <UDP_Handler+0x984>)
  402c7e:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		udd_ack_suspend();
  402c80:	f44f 7380 	mov.w	r3, #256	; 0x100
  402c84:	6223      	str	r3, [r4, #32]
		udd_enable_suspend_interrupt();
  402c86:	6123      	str	r3, [r4, #16]
		udd_enable_sof_interrupt();
  402c88:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402c8c:	6123      	str	r3, [r4, #16]
		goto udd_interrupt_end;
  402c8e:	e0cc      	b.n	402e2a <UDP_Handler+0xace>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  402c90:	4b12      	ldr	r3, [pc, #72]	; (402cdc <UDP_Handler+0x980>)
  402c92:	699b      	ldr	r3, [r3, #24]
  402c94:	f413 7f80 	tst.w	r3, #256	; 0x100
  402c98:	d026      	beq.n	402ce8 <UDP_Handler+0x98c>
  402c9a:	4b10      	ldr	r3, [pc, #64]	; (402cdc <UDP_Handler+0x980>)
  402c9c:	69db      	ldr	r3, [r3, #28]
  402c9e:	f413 7f80 	tst.w	r3, #256	; 0x100
  402ca2:	d021      	beq.n	402ce8 <UDP_Handler+0x98c>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  402ca4:	4b0d      	ldr	r3, [pc, #52]	; (402cdc <UDP_Handler+0x980>)
  402ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
  402caa:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  402cac:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  402cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402cb2:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  402cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
  402cb8:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  402cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402cbe:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  402cc0:	2022      	movs	r0, #34	; 0x22
  402cc2:	4b08      	ldr	r3, [pc, #32]	; (402ce4 <UDP_Handler+0x988>)
  402cc4:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  402cc6:	2000      	movs	r0, #0
  402cc8:	4b05      	ldr	r3, [pc, #20]	; (402ce0 <UDP_Handler+0x984>)
  402cca:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
  402ccc:	e0ad      	b.n	402e2a <UDP_Handler+0xace>
  402cce:	bf00      	nop
  402cd0:	00402105 	.word	0x00402105
  402cd4:	20001574 	.word	0x20001574
  402cd8:	00401fd1 	.word	0x00401fd1
  402cdc:	40034000 	.word	0x40034000
  402ce0:	004022cd 	.word	0x004022cd
  402ce4:	00403a81 	.word	0x00403a81
	}
	if (Is_udd_reset()) {
  402ce8:	4b51      	ldr	r3, [pc, #324]	; (402e30 <UDP_Handler+0xad4>)
  402cea:	69db      	ldr	r3, [r3, #28]
  402cec:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  402cf0:	f000 809b 	beq.w	402e2a <UDP_Handler+0xace>
		// USB bus reset detection
		udd_ack_reset();
  402cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402cf8:	4b4d      	ldr	r3, [pc, #308]	; (402e30 <UDP_Handler+0xad4>)
  402cfa:	621a      	str	r2, [r3, #32]
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402cfc:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  402cfe:	2601      	movs	r6, #1
  402d00:	4d4c      	ldr	r5, [pc, #304]	; (402e34 <UDP_Handler+0xad8>)
  402d02:	3401      	adds	r4, #1
  402d04:	b2e4      	uxtb	r4, r4
  402d06:	4638      	mov	r0, r7
  402d08:	4631      	mov	r1, r6
  402d0a:	4622      	mov	r2, r4
  402d0c:	47a8      	blx	r5
  402d0e:	3714      	adds	r7, #20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402d10:	2c03      	cmp	r4, #3
  402d12:	d1f6      	bne.n	402d02 <UDP_Handler+0x9a6>
		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
  402d14:	4b48      	ldr	r3, [pc, #288]	; (402e38 <UDP_Handler+0xadc>)
  402d16:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  402d18:	4b45      	ldr	r3, [pc, #276]	; (402e30 <UDP_Handler+0xad4>)
  402d1a:	685a      	ldr	r2, [r3, #4]
  402d1c:	f022 0201 	bic.w	r2, r2, #1
  402d20:	605a      	str	r2, [r3, #4]
		udd_disable_configured_state();
  402d22:	685a      	ldr	r2, [r3, #4]
  402d24:	f022 0202 	bic.w	r2, r2, #2
  402d28:	605a      	str	r2, [r3, #4]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  402d2a:	689a      	ldr	r2, [r3, #8]
  402d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402d30:	609a      	str	r2, [r3, #8]
	udd_configure_address(0);
  402d32:	689a      	ldr	r2, [r3, #8]
  402d34:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  402d38:	609a      	str	r2, [r3, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  402d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402d3c:	922c      	str	r2, [sp, #176]	; 0xb0
  402d3e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402d40:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  402d44:	922c      	str	r2, [sp, #176]	; 0xb0
  402d46:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402d48:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  402d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  402d50:	922c      	str	r2, [sp, #176]	; 0xb0
  402d52:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  402d58:	922c      	str	r2, [sp, #176]	; 0xb0
  402d5a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
  402d5c:	631a      	str	r2, [r3, #48]	; 0x30
  402d5e:	2300      	movs	r3, #0
  402d60:	932d      	str	r3, [sp, #180]	; 0xb4
  402d62:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402d64:	2b13      	cmp	r3, #19
  402d66:	d806      	bhi.n	402d76 <UDP_Handler+0xa1a>
  402d68:	bf00      	nop
  402d6a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402d6c:	3301      	adds	r3, #1
  402d6e:	932d      	str	r3, [sp, #180]	; 0xb4
  402d70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
  402d72:	2b13      	cmp	r3, #19
  402d74:	d9f8      	bls.n	402d68 <UDP_Handler+0xa0c>
	udd_enable_endpoint(0);
  402d76:	4a2e      	ldr	r2, [pc, #184]	; (402e30 <UDP_Handler+0xad4>)
  402d78:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402d7a:	932e      	str	r3, [sp, #184]	; 0xb8
  402d7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  402d7e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  402d82:	932e      	str	r3, [sp, #184]	; 0xb8
  402d84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  402d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  402d8a:	932e      	str	r3, [sp, #184]	; 0xb8
  402d8c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  402d8e:	6313      	str	r3, [r2, #48]	; 0x30
  402d90:	2300      	movs	r3, #0
  402d92:	932f      	str	r3, [sp, #188]	; 0xbc
  402d94:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  402d96:	2b13      	cmp	r3, #19
  402d98:	d806      	bhi.n	402da8 <UDP_Handler+0xa4c>
  402d9a:	bf00      	nop
  402d9c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  402d9e:	3301      	adds	r3, #1
  402da0:	932f      	str	r3, [sp, #188]	; 0xbc
  402da2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  402da4:	2b13      	cmp	r3, #19
  402da6:	d9f8      	bls.n	402d9a <UDP_Handler+0xa3e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402da8:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402dac:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402dae:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402db2:	2100      	movs	r1, #0
  402db4:	4a21      	ldr	r2, [pc, #132]	; (402e3c <UDP_Handler+0xae0>)
  402db6:	7011      	strb	r1, [r2, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(0);
  402db8:	2101      	movs	r1, #1
  402dba:	4a1d      	ldr	r2, [pc, #116]	; (402e30 <UDP_Handler+0xad4>)
  402dbc:	6111      	str	r1, [r2, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402dbe:	b923      	cbnz	r3, 402dca <UDP_Handler+0xa6e>
		cpu_irq_enable();
  402dc0:	4b1e      	ldr	r3, [pc, #120]	; (402e3c <UDP_Handler+0xae0>)
  402dc2:	7019      	strb	r1, [r3, #0]
  402dc4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402dc8:	b662      	cpsie	i
		udd_disable_address_state();
		udd_disable_configured_state();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
  402dca:	4b1d      	ldr	r3, [pc, #116]	; (402e40 <UDP_Handler+0xae4>)
  402dcc:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  402dce:	4b18      	ldr	r3, [pc, #96]	; (402e30 <UDP_Handler+0xad4>)
  402dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
  402dd4:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  402dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402dda:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  402ddc:	e025      	b.n	402e2a <UDP_Handler+0xace>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  402dde:	eb08 0088 	add.w	r0, r8, r8, lsl #2
  402de2:	4a18      	ldr	r2, [pc, #96]	; (402e44 <UDP_Handler+0xae8>)
  402de4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  402de8:	1878      	adds	r0, r7, r1
  402dea:	60d0      	str	r0, [r2, #12]
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;

	// Read byte count
	nb_data = udd_byte_count(ep);
  402dec:	4638      	mov	r0, r7
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
	uint32_t nb_data = 0, i;
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
	uint32_t pkt_size = ptr_job->size;
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
	bool b_full = false, b_short;
  402dee:	f04f 0b00 	mov.w	fp, #0
  402df2:	e537      	b.n	402864 <UDP_Handler+0x508>
		for (i = 0; i < nb_data; i++) {
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402df4:	4630      	mov	r0, r6
  402df6:	4b14      	ldr	r3, [pc, #80]	; (402e48 <UDP_Handler+0xaec>)
  402df8:	4798      	blx	r3
  402dfa:	e544      	b.n	402886 <UDP_Handler+0x52a>
		if (nb_data >= nb_remain) {
			nb_data = nb_remain;
			b_full = true;
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  402dfc:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
  402e00:	f8df e040 	ldr.w	lr, [pc, #64]	; 402e44 <UDP_Handler+0xae8>
  402e04:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
  402e08:	f8ce 200c 	str.w	r2, [lr, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  402e0c:	2800      	cmp	r0, #0
  402e0e:	f47f ad27 	bne.w	402860 <UDP_Handler+0x504>
  402e12:	e7ef      	b.n	402df4 <UDP_Handler+0xa98>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  402e14:	4630      	mov	r0, r6
  402e16:	4b0c      	ldr	r3, [pc, #48]	; (402e48 <UDP_Handler+0xaec>)
  402e18:	4798      	blx	r3
  402e1a:	e531      	b.n	402880 <UDP_Handler+0x524>
	if (udd_ep_interrupt()) {
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  402e1c:	4b04      	ldr	r3, [pc, #16]	; (402e30 <UDP_Handler+0xad4>)
  402e1e:	699b      	ldr	r3, [r3, #24]
  402e20:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  402e24:	f47f af0b 	bne.w	402c3e <UDP_Handler+0x8e2>
  402e28:	e70e      	b.n	402c48 <UDP_Handler+0x8ec>
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
}
  402e2a:	b031      	add	sp, #196	; 0xc4
  402e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e30:	40034000 	.word	0x40034000
  402e34:	00401fd1 	.word	0x00401fd1
  402e38:	004015ed 	.word	0x004015ed
  402e3c:	200000a3 	.word	0x200000a3
  402e40:	00401d19 	.word	0x00401d19
  402e44:	20001574 	.word	0x20001574
  402e48:	00402011 	.word	0x00402011

00402e4c <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  402e4c:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402e4e:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402e52:	b672      	cpsid	i
  402e54:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402e58:	2200      	movs	r2, #0
  402e5a:	4b14      	ldr	r3, [pc, #80]	; (402eac <udd_attach+0x60>)
  402e5c:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  402e5e:	2001      	movs	r0, #1
  402e60:	4b13      	ldr	r3, [pc, #76]	; (402eb0 <udd_attach+0x64>)
  402e62:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  402e64:	2022      	movs	r0, #34	; 0x22
  402e66:	4b13      	ldr	r3, [pc, #76]	; (402eb4 <udd_attach+0x68>)
  402e68:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  402e6a:	4b13      	ldr	r3, [pc, #76]	; (402eb8 <udd_attach+0x6c>)
  402e6c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402e72:	675a      	str	r2, [r3, #116]	; 0x74
	udd_attach_device();
  402e74:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  402e7a:	675a      	str	r2, [r3, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  402e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
  402e80:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  402e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402e86:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  402e88:	f44f 7200 	mov.w	r2, #512	; 0x200
  402e8c:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  402e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  402e92:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  402e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402e98:	611a      	str	r2, [r3, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402e9a:	b92c      	cbnz	r4, 402ea8 <udd_attach+0x5c>
		cpu_irq_enable();
  402e9c:	2201      	movs	r2, #1
  402e9e:	4b03      	ldr	r3, [pc, #12]	; (402eac <udd_attach+0x60>)
  402ea0:	701a      	strb	r2, [r3, #0]
  402ea2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402ea6:	b662      	cpsie	i
  402ea8:	bd10      	pop	{r4, pc}
  402eaa:	bf00      	nop
  402eac:	200000a3 	.word	0x200000a3
  402eb0:	004022cd 	.word	0x004022cd
  402eb4:	00403a2d 	.word	0x00403a2d
  402eb8:	40034000 	.word	0x40034000

00402ebc <udd_enable>:
#endif
}


void udd_enable(void)
{
  402ebc:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402ebe:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402ec2:	b672      	cpsid	i
  402ec4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  402ec8:	2400      	movs	r4, #0
  402eca:	4b24      	ldr	r3, [pc, #144]	; (402f5c <udd_enable+0xa0>)
  402ecc:	701c      	strb	r4, [r3, #0]
#if SAMG55
	matrix_set_usb_device();
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  402ece:	2022      	movs	r0, #34	; 0x22
  402ed0:	4b23      	ldr	r3, [pc, #140]	; (402f60 <udd_enable+0xa4>)
  402ed2:	4798      	blx	r3
	sysclk_enable_usb();
  402ed4:	4b23      	ldr	r3, [pc, #140]	; (402f64 <udd_enable+0xa8>)
  402ed6:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  402ed8:	4b23      	ldr	r3, [pc, #140]	; (402f68 <udd_enable+0xac>)
  402eda:	2250      	movs	r2, #80	; 0x50
  402edc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402ee0:	2204      	movs	r2, #4
  402ee2:	605a      	str	r2, [r3, #4]
  402ee4:	4623      	mov	r3, r4

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].bank = 0;
  402ee6:	4821      	ldr	r0, [pc, #132]	; (402f6c <udd_enable+0xb0>)
  402ee8:	009a      	lsls	r2, r3, #2
  402eea:	18d1      	adds	r1, r2, r3
  402eec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  402ef0:	7c49      	ldrb	r1, [r1, #17]
		udd_ep_job[i].busy = false;
		udd_ep_job[i].b_stall_requested = false;
		udd_ep_job[i].b_shortpacket = false;
		udd_ep_job[i].b_buf_end = false;
  402ef2:	441a      	add	r2, r3
  402ef4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  402ef8:	f001 0183 	and.w	r1, r1, #131	; 0x83
  402efc:	f36f 11c7 	bfc	r1, #7, #1
  402f00:	7451      	strb	r1, [r2, #17]
  402f02:	3301      	adds	r3, #1
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  402f04:	2b03      	cmp	r3, #3
  402f06:	d1ef      	bne.n	402ee8 <udd_enable+0x2c>
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  402f08:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  402f0c:	4b18      	ldr	r3, [pc, #96]	; (402f70 <udd_enable+0xb4>)
  402f0e:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  402f10:	2200      	movs	r2, #0
  402f12:	4b18      	ldr	r3, [pc, #96]	; (402f74 <udd_enable+0xb8>)
  402f14:	701a      	strb	r2, [r3, #0]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  402f16:	4b18      	ldr	r3, [pc, #96]	; (402f78 <udd_enable+0xbc>)
  402f18:	781b      	ldrb	r3, [r3, #0]
  402f1a:	2bff      	cmp	r3, #255	; 0xff
  402f1c:	d100      	bne.n	402f20 <udd_enable+0x64>
  402f1e:	e7fe      	b.n	402f1e <udd_enable+0x62>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402f20:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402f24:	b672      	cpsid	i
  402f26:	f3bf 8f5f 	dmb	sy
  402f2a:	2100      	movs	r1, #0
  402f2c:	4a0b      	ldr	r2, [pc, #44]	; (402f5c <udd_enable+0xa0>)
  402f2e:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  402f30:	4911      	ldr	r1, [pc, #68]	; (402f78 <udd_enable+0xbc>)
  402f32:	780a      	ldrb	r2, [r1, #0]
  402f34:	3201      	adds	r2, #1
  402f36:	700a      	strb	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f38:	b92b      	cbnz	r3, 402f46 <udd_enable+0x8a>
		cpu_irq_enable();
  402f3a:	2201      	movs	r2, #1
  402f3c:	4b07      	ldr	r3, [pc, #28]	; (402f5c <udd_enable+0xa0>)
  402f3e:	701a      	strb	r2, [r3, #0]
  402f40:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402f44:	b662      	cpsie	i
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  402f46:	4b0d      	ldr	r3, [pc, #52]	; (402f7c <udd_enable+0xc0>)
  402f48:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402f4a:	b92d      	cbnz	r5, 402f58 <udd_enable+0x9c>
		cpu_irq_enable();
  402f4c:	2201      	movs	r2, #1
  402f4e:	4b03      	ldr	r3, [pc, #12]	; (402f5c <udd_enable+0xa0>)
  402f50:	701a      	strb	r2, [r3, #0]
  402f52:	f3bf 8f5f 	dmb	sy
  402f56:	b662      	cpsie	i
  402f58:	bd38      	pop	{r3, r4, r5, pc}
  402f5a:	bf00      	nop
  402f5c:	200000a3 	.word	0x200000a3
  402f60:	00403a2d 	.word	0x00403a2d
  402f64:	004036e5 	.word	0x004036e5
  402f68:	e000e100 	.word	0xe000e100
  402f6c:	20001574 	.word	0x20001574
  402f70:	00403af5 	.word	0x00403af5
  402f74:	200015b0 	.word	0x200015b0
  402f78:	200015f4 	.word	0x200015f4
  402f7c:	00402e4d 	.word	0x00402e4d

00402f80 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
	return false;
}
  402f80:	2000      	movs	r0, #0
  402f82:	4770      	bx	lr

00402f84 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address_state();
  402f84:	4b0c      	ldr	r3, [pc, #48]	; (402fb8 <udd_set_address+0x34>)
  402f86:	685a      	ldr	r2, [r3, #4]
  402f88:	f022 0201 	bic.w	r2, r2, #1
  402f8c:	605a      	str	r2, [r3, #4]
	udd_disable_address();
  402f8e:	689a      	ldr	r2, [r3, #8]
  402f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  402f94:	609a      	str	r2, [r3, #8]
	if (address) {
  402f96:	b170      	cbz	r0, 402fb6 <udd_set_address+0x32>
		udd_configure_address(address);
  402f98:	689a      	ldr	r2, [r3, #8]
  402f9a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  402f9e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  402fa2:	4310      	orrs	r0, r2
  402fa4:	6098      	str	r0, [r3, #8]
		udd_enable_address();
  402fa6:	689a      	ldr	r2, [r3, #8]
  402fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  402fac:	609a      	str	r2, [r3, #8]
		udd_enable_address_state();
  402fae:	685a      	ldr	r2, [r3, #4]
  402fb0:	f042 0201 	orr.w	r2, r2, #1
  402fb4:	605a      	str	r2, [r3, #4]
  402fb6:	4770      	bx	lr
  402fb8:	40034000 	.word	0x40034000

00402fbc <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	if (Is_udd_address_state_enabled())
  402fbc:	4b05      	ldr	r3, [pc, #20]	; (402fd4 <udd_getaddress+0x18>)
  402fbe:	685b      	ldr	r3, [r3, #4]
  402fc0:	f013 0f01 	tst.w	r3, #1
		return udd_get_configured_address();
  402fc4:	bf1d      	ittte	ne
  402fc6:	4b03      	ldrne	r3, [pc, #12]	; (402fd4 <udd_getaddress+0x18>)
  402fc8:	6898      	ldrne	r0, [r3, #8]
  402fca:	f000 007f 	andne.w	r0, r0, #127	; 0x7f
	return 0;
  402fce:	2000      	moveq	r0, #0
}
  402fd0:	4770      	bx	lr
  402fd2:	bf00      	nop
  402fd4:	40034000 	.word	0x40034000

00402fd8 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
  402fd8:	4b02      	ldr	r3, [pc, #8]	; (402fe4 <udd_get_frame_number+0xc>)
  402fda:	6818      	ldr	r0, [r3, #0]
}
  402fdc:	f3c0 000a 	ubfx	r0, r0, #0, #11
  402fe0:	4770      	bx	lr
  402fe2:	bf00      	nop
  402fe4:	40034000 	.word	0x40034000

00402fe8 <udd_get_micro_frame_number>:


uint16_t udd_get_micro_frame_number(void)
{
	return 0;
}
  402fe8:	2000      	movs	r0, #0
  402fea:	4770      	bx	lr

00402fec <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
  402fec:	4b01      	ldr	r3, [pc, #4]	; (402ff4 <udd_set_setup_payload+0x8>)
  402fee:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  402ff0:	8199      	strh	r1, [r3, #12]
  402ff2:	4770      	bx	lr
  402ff4:	20001600 	.word	0x20001600

00402ff8 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  402ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
  402ffa:	b083      	sub	sp, #12
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;
  402ffc:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
  403000:	2c03      	cmp	r4, #3
  403002:	d86c      	bhi.n	4030de <udd_ep_alloc+0xe6>
  403004:	00a3      	lsls	r3, r4, #2
  403006:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  40300a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
  40300e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  403010:	f415 4f00 	tst.w	r5, #32768	; 0x8000
  403014:	d165      	bne.n	4030e2 <udd_ep_alloc+0xea>
		return false;
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  403016:	f001 0503 	and.w	r5, r1, #3
  40301a:	2d01      	cmp	r5, #1
  40301c:	d103      	bne.n	403026 <udd_ep_alloc+0x2e>
  40301e:	2c00      	cmp	r4, #0
  403020:	d061      	beq.n	4030e6 <udd_ep_alloc+0xee>
  403022:	2c03      	cmp	r4, #3
  403024:	d061      	beq.n	4030ea <udd_ep_alloc+0xf2>
		return false;
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  403026:	1f25      	subs	r5, r4, #4
  403028:	b2ed      	uxtb	r5, r5
  40302a:	2d02      	cmp	r5, #2
  40302c:	bf34      	ite	cc
  40302e:	f44f 7500 	movcc.w	r5, #512	; 0x200
  403032:	2540      	movcs	r5, #64	; 0x40
  403034:	4295      	cmp	r5, r2
  403036:	db5a      	blt.n	4030ee <udd_ep_alloc+0xf6>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
  403038:	1e66      	subs	r6, r4, #1

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  40303a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  40303e:	4d2e      	ldr	r5, [pc, #184]	; (4030f8 <udd_ep_alloc+0x100>)
  403040:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  403044:	f105 0710 	add.w	r7, r5, #16
  403048:	f8b5 e010 	ldrh.w	lr, [r5, #16]
  40304c:	f362 0e09 	bfi	lr, r2, #0, #10
  403050:	f8a5 e010 	strh.w	lr, [r5, #16]
	ptr_job->b_buf_end = false;
  403054:	7c6a      	ldrb	r2, [r5, #17]
	ptr_job->b_stall_requested = false;
  403056:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  40305a:	f36f 1245 	bfc	r2, #5, #1
  40305e:	746a      	strb	r2, [r5, #17]
	if (b_dir_in) {
  403060:	09c0      	lsrs	r0, r0, #7
  403062:	d003      	beq.n	40306c <udd_ep_alloc+0x74>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  403064:	787a      	ldrb	r2, [r7, #1]
  403066:	f36f 0283 	bfc	r2, #2, #2
  40306a:	707a      	strb	r2, [r7, #1]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  40306c:	4a23      	ldr	r2, [pc, #140]	; (4030fc <udd_ep_alloc+0x104>)
  40306e:	6a96      	ldr	r6, [r2, #40]	; 0x28
  403070:	2501      	movs	r5, #1
  403072:	fa05 f404 	lsl.w	r4, r5, r4
  403076:	ea44 0506 	orr.w	r5, r4, r6
  40307a:	6295      	str	r5, [r2, #40]	; 0x28
  40307c:	6a95      	ldr	r5, [r2, #40]	; 0x28
  40307e:	ea25 0404 	bic.w	r4, r5, r4
  403082:	6294      	str	r4, [r2, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  403084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  403086:	9200      	str	r2, [sp, #0]
  403088:	9a00      	ldr	r2, [sp, #0]
  40308a:	f042 024f 	orr.w	r2, r2, #79	; 0x4f
  40308e:	9200      	str	r2, [sp, #0]
  403090:	9a00      	ldr	r2, [sp, #0]
  403092:	f422 4207 	bic.w	r2, r2, #34560	; 0x8700
  403096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40309a:	9200      	str	r2, [sp, #0]
  40309c:	b138      	cbz	r0, 4030ae <udd_ep_alloc+0xb6>
  40309e:	f041 0204 	orr.w	r2, r1, #4
  4030a2:	0212      	lsls	r2, r2, #8
  4030a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4030a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4030ac:	e004      	b.n	4030b8 <udd_ep_alloc+0xc0>
  4030ae:	020a      	lsls	r2, r1, #8
  4030b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  4030b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4030b8:	9900      	ldr	r1, [sp, #0]
  4030ba:	430a      	orrs	r2, r1
  4030bc:	9200      	str	r2, [sp, #0]
  4030be:	9a00      	ldr	r2, [sp, #0]
  4030c0:	631a      	str	r2, [r3, #48]	; 0x30
  4030c2:	2300      	movs	r3, #0
  4030c4:	9301      	str	r3, [sp, #4]
  4030c6:	9b01      	ldr	r3, [sp, #4]
  4030c8:	2b13      	cmp	r3, #19
  4030ca:	d812      	bhi.n	4030f2 <udd_ep_alloc+0xfa>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4030cc:	bf00      	nop
  4030ce:	9b01      	ldr	r3, [sp, #4]
  4030d0:	3301      	adds	r3, #1
  4030d2:	9301      	str	r3, [sp, #4]
  4030d4:	9b01      	ldr	r3, [sp, #4]
  4030d6:	2b13      	cmp	r3, #19
  4030d8:	d9f8      	bls.n	4030cc <udd_ep_alloc+0xd4>
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  4030da:	2001      	movs	r0, #1
  4030dc:	e00a      	b.n	4030f4 <udd_ep_alloc+0xfc>
	b_dir_in = ep & USB_EP_DIR_IN;
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
  4030de:	2000      	movs	r0, #0
  4030e0:	e008      	b.n	4030f4 <udd_ep_alloc+0xfc>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
  4030e2:	2000      	movs	r0, #0
  4030e4:	e006      	b.n	4030f4 <udd_ep_alloc+0xfc>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
		return false;
  4030e6:	2000      	movs	r0, #0
  4030e8:	e004      	b.n	4030f4 <udd_ep_alloc+0xfc>
  4030ea:	2000      	movs	r0, #0
  4030ec:	e002      	b.n	4030f4 <udd_ep_alloc+0xfc>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
		return false;
  4030ee:	2000      	movs	r0, #0
  4030f0:	e000      	b.n	4030f4 <udd_ep_alloc+0xfc>
	udd_reset_endpoint(ep);
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
		(b_dir_in ? (bmAttributes | 0x4) : bmAttributes),
		0);
	return true;
  4030f2:	2001      	movs	r0, #1
}
  4030f4:	b003      	add	sp, #12
  4030f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4030f8:	20001574 	.word	0x20001574
  4030fc:	40034000 	.word	0x40034000

00403100 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  403100:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
  403104:	2a03      	cmp	r2, #3
  403106:	d82a      	bhi.n	40315e <udd_ep_free+0x5e>
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
  403108:	b500      	push	{lr}
  40310a:	b083      	sub	sp, #12
  40310c:	0093      	lsls	r3, r2, #2
  40310e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  403112:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
  403116:	6b19      	ldr	r1, [r3, #48]	; 0x30
  403118:	9100      	str	r1, [sp, #0]
  40311a:	9900      	ldr	r1, [sp, #0]
  40311c:	f041 014f 	orr.w	r1, r1, #79	; 0x4f
  403120:	9100      	str	r1, [sp, #0]
  403122:	9900      	ldr	r1, [sp, #0]
  403124:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
  403128:	9100      	str	r1, [sp, #0]
  40312a:	9900      	ldr	r1, [sp, #0]
  40312c:	6319      	str	r1, [r3, #48]	; 0x30
  40312e:	2300      	movs	r3, #0
  403130:	9301      	str	r3, [sp, #4]
  403132:	9b01      	ldr	r3, [sp, #4]
  403134:	2b13      	cmp	r3, #19
  403136:	d806      	bhi.n	403146 <udd_ep_free+0x46>
  403138:	bf00      	nop
  40313a:	9b01      	ldr	r3, [sp, #4]
  40313c:	3301      	adds	r3, #1
  40313e:	9301      	str	r3, [sp, #4]
  403140:	9b01      	ldr	r3, [sp, #4]
  403142:	2b13      	cmp	r3, #19
  403144:	d9f8      	bls.n	403138 <udd_ep_free+0x38>
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  403146:	1e50      	subs	r0, r2, #1
  403148:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40314c:	4b04      	ldr	r3, [pc, #16]	; (403160 <udd_ep_free+0x60>)
  40314e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403152:	2101      	movs	r1, #1
  403154:	4b03      	ldr	r3, [pc, #12]	; (403164 <udd_ep_free+0x64>)
  403156:	4798      	blx	r3
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
	udd_ep_abort_job(ep);
}
  403158:	b003      	add	sp, #12
  40315a:	f85d fb04 	ldr.w	pc, [sp], #4
  40315e:	4770      	bx	lr
  403160:	20001574 	.word	0x20001574
  403164:	00401fd1 	.word	0x00401fd1

00403168 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  403168:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
  40316c:	2803      	cmp	r0, #3
  40316e:	d815      	bhi.n	40319c <udd_ep_is_halted+0x34>
		return false;
	}
	return ptr_job->b_stall_requested ||
  403170:	1e43      	subs	r3, r0, #1
  403172:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403176:	4a0a      	ldr	r2, [pc, #40]	; (4031a0 <udd_ep_is_halted+0x38>)
  403178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40317c:	7c5b      	ldrb	r3, [r3, #17]
  40317e:	f013 0f20 	tst.w	r3, #32
  403182:	d109      	bne.n	403198 <udd_ep_is_halted+0x30>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  403184:	300c      	adds	r0, #12
  403186:	4b07      	ldr	r3, [pc, #28]	; (4031a4 <udd_ep_is_halted+0x3c>)
  403188:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	return ptr_job->b_stall_requested ||
  40318c:	f013 0f28 	tst.w	r3, #40	; 0x28
  403190:	bf14      	ite	ne
  403192:	2001      	movne	r0, #1
  403194:	2000      	moveq	r0, #0
  403196:	4770      	bx	lr
  403198:	2001      	movs	r0, #1
  40319a:	4770      	bx	lr
bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  40319c:	2000      	movs	r0, #0
	}
	return ptr_job->b_stall_requested ||
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}
  40319e:	4770      	bx	lr
  4031a0:	20001574 	.word	0x20001574
  4031a4:	40034000 	.word	0x40034000

004031a8 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4031a8:	f000 010f 	and.w	r1, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  4031ac:	2903      	cmp	r1, #3
  4031ae:	d861      	bhi.n	403274 <udd_ep_set_halt+0xcc>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  4031b0:	b410      	push	{r4}
  4031b2:	b083      	sub	sp, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4031b4:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  4031b8:	fab2 f282 	clz	r2, r2
  4031bc:	0952      	lsrs	r2, r2, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4031be:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4031c0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4031c4:	2400      	movs	r4, #0
  4031c6:	4b30      	ldr	r3, [pc, #192]	; (403288 <udd_ep_set_halt+0xe0>)
  4031c8:	701c      	strb	r4, [r3, #0]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4031ca:	f010 0f80 	tst.w	r0, #128	; 0x80
  4031ce:	d028      	beq.n	403222 <udd_ep_set_halt+0x7a>

bool udd_ep_set_halt(udd_ep_id_t ep)
{
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4031d0:	1e4b      	subs	r3, r1, #1
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}
	flags = cpu_irq_save();
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4031d2:	f101 000c 	add.w	r0, r1, #12
  4031d6:	4c2d      	ldr	r4, [pc, #180]	; (40328c <udd_ep_set_halt+0xe4>)
  4031d8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
  4031dc:	f010 0f10 	tst.w	r0, #16
  4031e0:	d109      	bne.n	4031f6 <udd_ep_set_halt+0x4e>
				|| ptr_job->bank > 1)) {
  4031e2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  4031e6:	4c2a      	ldr	r4, [pc, #168]	; (403290 <udd_ep_set_halt+0xe8>)
  4031e8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  4031ec:	7c40      	ldrb	r0, [r0, #17]
  4031ee:	f3c0 0081 	ubfx	r0, r0, #2, #2
  4031f2:	2801      	cmp	r0, #1
  4031f4:	dd15      	ble.n	403222 <udd_ep_set_halt+0x7a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  4031f6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  4031fa:	4b25      	ldr	r3, [pc, #148]	; (403290 <udd_ep_set_halt+0xe8>)
  4031fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  403200:	7c58      	ldrb	r0, [r3, #17]
  403202:	f040 0020 	orr.w	r0, r0, #32
  403206:	7458      	strb	r0, [r3, #17]
		udd_enable_endpoint_interrupt(ep_index);
  403208:	2301      	movs	r3, #1
  40320a:	408b      	lsls	r3, r1
  40320c:	491f      	ldr	r1, [pc, #124]	; (40328c <udd_ep_set_halt+0xe4>)
  40320e:	610b      	str	r3, [r1, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403210:	2a00      	cmp	r2, #0
  403212:	d031      	beq.n	403278 <udd_ep_set_halt+0xd0>
		cpu_irq_enable();
  403214:	2001      	movs	r0, #1
  403216:	4b1c      	ldr	r3, [pc, #112]	; (403288 <udd_ep_set_halt+0xe0>)
  403218:	7018      	strb	r0, [r3, #0]
  40321a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40321e:	b662      	cpsie	i
  403220:	e02d      	b.n	40327e <udd_ep_set_halt+0xd6>
  403222:	008b      	lsls	r3, r1, #2
  403224:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
  403228:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
		cpu_irq_restore(flags);
		return true;
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  40322c:	6b18      	ldr	r0, [r3, #48]	; 0x30
  40322e:	9000      	str	r0, [sp, #0]
  403230:	9800      	ldr	r0, [sp, #0]
  403232:	f040 004f 	orr.w	r0, r0, #79	; 0x4f
  403236:	9000      	str	r0, [sp, #0]
  403238:	9800      	ldr	r0, [sp, #0]
  40323a:	f040 0020 	orr.w	r0, r0, #32
  40323e:	9000      	str	r0, [sp, #0]
  403240:	9800      	ldr	r0, [sp, #0]
  403242:	6318      	str	r0, [r3, #48]	; 0x30
  403244:	2300      	movs	r3, #0
  403246:	9301      	str	r3, [sp, #4]
  403248:	9b01      	ldr	r3, [sp, #4]
  40324a:	2b13      	cmp	r3, #19
  40324c:	d806      	bhi.n	40325c <udd_ep_set_halt+0xb4>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40324e:	bf00      	nop
  403250:	9b01      	ldr	r3, [sp, #4]
  403252:	3301      	adds	r3, #1
  403254:	9301      	str	r3, [sp, #4]
  403256:	9b01      	ldr	r3, [sp, #4]
  403258:	2b13      	cmp	r3, #19
  40325a:	d9f8      	bls.n	40324e <udd_ep_set_halt+0xa6>
		udd_enable_endpoint_interrupt(ep_index);
  40325c:	2301      	movs	r3, #1
  40325e:	408b      	lsls	r3, r1
  403260:	490a      	ldr	r1, [pc, #40]	; (40328c <udd_ep_set_halt+0xe4>)
  403262:	610b      	str	r3, [r1, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403264:	b152      	cbz	r2, 40327c <udd_ep_set_halt+0xd4>
		cpu_irq_enable();
  403266:	2001      	movs	r0, #1
  403268:	4b07      	ldr	r3, [pc, #28]	; (403288 <udd_ep_set_halt+0xe0>)
  40326a:	7018      	strb	r0, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40326c:	f3bf 8f5f 	dmb	sy
  403270:	b662      	cpsie	i
  403272:	e004      	b.n	40327e <udd_ep_set_halt+0xd6>
	bool b_dir_in = ep & USB_EP_DIR_IN;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
  403274:	2000      	movs	r0, #0
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
}
  403276:	4770      	bx	lr
				|| ptr_job->bank > 1)) {
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
  403278:	2001      	movs	r0, #1
  40327a:	e000      	b.n	40327e <udd_ep_set_halt+0xd6>
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
	}
	return true;
  40327c:	2001      	movs	r0, #1
}
  40327e:	b003      	add	sp, #12
  403280:	f85d 4b04 	ldr.w	r4, [sp], #4
  403284:	4770      	bx	lr
  403286:	bf00      	nop
  403288:	200000a3 	.word	0x200000a3
  40328c:	40034000 	.word	0x40034000
  403290:	20001574 	.word	0x20001574

00403294 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  403294:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  403298:	2803      	cmp	r0, #3
  40329a:	d867      	bhi.n	40336c <udd_ep_clear_halt+0xd8>
		return false;
	ptr_job = &udd_ep_job[ep - 1];
  40329c:	1e41      	subs	r1, r0, #1

	ptr_job->b_stall_requested = false;
  40329e:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4032a2:	4b36      	ldr	r3, [pc, #216]	; (40337c <udd_ep_clear_halt+0xe8>)
  4032a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4032a8:	7c5a      	ldrb	r2, [r3, #17]
  4032aa:	f36f 1245 	bfc	r2, #5, #1
  4032ae:	745a      	strb	r2, [r3, #17]
  4032b0:	0082      	lsls	r2, r0, #2
  4032b2:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  4032b6:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	if (Is_udd_endpoint_stall_requested(ep)) {
  4032ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4032bc:	f013 0f20 	tst.w	r3, #32
  4032c0:	d056      	beq.n	403370 <udd_ep_clear_halt+0xdc>
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  4032c2:	b530      	push	{r4, r5, lr}
  4032c4:	b085      	sub	sp, #20
	ptr_job = &udd_ep_job[ep - 1];

	ptr_job->b_stall_requested = false;
	if (Is_udd_endpoint_stall_requested(ep)) {
		// Remove stall
		udd_disable_stall_handshake(ep);
  4032c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4032c8:	9300      	str	r3, [sp, #0]
  4032ca:	9b00      	ldr	r3, [sp, #0]
  4032cc:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4032d0:	9300      	str	r3, [sp, #0]
  4032d2:	9b00      	ldr	r3, [sp, #0]
  4032d4:	f023 0320 	bic.w	r3, r3, #32
  4032d8:	9300      	str	r3, [sp, #0]
  4032da:	9b00      	ldr	r3, [sp, #0]
  4032dc:	6313      	str	r3, [r2, #48]	; 0x30
  4032de:	2300      	movs	r3, #0
  4032e0:	9301      	str	r3, [sp, #4]
  4032e2:	9b01      	ldr	r3, [sp, #4]
  4032e4:	2b13      	cmp	r3, #19
  4032e6:	d806      	bhi.n	4032f6 <udd_ep_clear_halt+0x62>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4032e8:	bf00      	nop
  4032ea:	9b01      	ldr	r3, [sp, #4]
  4032ec:	3301      	adds	r3, #1
  4032ee:	9301      	str	r3, [sp, #4]
  4032f0:	9b01      	ldr	r3, [sp, #4]
  4032f2:	2b13      	cmp	r3, #19
  4032f4:	d9f8      	bls.n	4032e8 <udd_ep_clear_halt+0x54>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  4032f6:	4b22      	ldr	r3, [pc, #136]	; (403380 <udd_ep_clear_halt+0xec>)
  4032f8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  4032fa:	2401      	movs	r4, #1
  4032fc:	fa04 f000 	lsl.w	r0, r4, r0
  403300:	ea40 0405 	orr.w	r4, r0, r5
  403304:	629c      	str	r4, [r3, #40]	; 0x28
  403306:	6a9c      	ldr	r4, [r3, #40]	; 0x28
  403308:	ea24 0000 	bic.w	r0, r4, r0
  40330c:	6298      	str	r0, [r3, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  40330e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403310:	9302      	str	r3, [sp, #8]
  403312:	9b02      	ldr	r3, [sp, #8]
  403314:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403318:	9302      	str	r3, [sp, #8]
  40331a:	9b02      	ldr	r3, [sp, #8]
  40331c:	f023 0308 	bic.w	r3, r3, #8
  403320:	9302      	str	r3, [sp, #8]
  403322:	9b02      	ldr	r3, [sp, #8]
  403324:	6313      	str	r3, [r2, #48]	; 0x30
  403326:	2300      	movs	r3, #0
  403328:	9303      	str	r3, [sp, #12]
  40332a:	9b03      	ldr	r3, [sp, #12]
  40332c:	2b13      	cmp	r3, #19
  40332e:	d806      	bhi.n	40333e <udd_ep_clear_halt+0xaa>
  403330:	bf00      	nop
  403332:	9b03      	ldr	r3, [sp, #12]
  403334:	3301      	adds	r3, #1
  403336:	9303      	str	r3, [sp, #12]
  403338:	9b03      	ldr	r3, [sp, #12]
  40333a:	2b13      	cmp	r3, #19
  40333c:	d9f8      	bls.n	403330 <udd_ep_clear_halt+0x9c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  40333e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  403342:	4a0e      	ldr	r2, [pc, #56]	; (40337c <udd_ep_clear_halt+0xe8>)
  403344:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403348:	7c5b      	ldrb	r3, [r3, #17]
  40334a:	f013 0f10 	tst.w	r3, #16
  40334e:	d011      	beq.n	403374 <udd_ep_clear_halt+0xe0>
			ptr_job->busy = false;
  403350:	0088      	lsls	r0, r1, #2
  403352:	1843      	adds	r3, r0, r1
  403354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  403358:	7c5c      	ldrb	r4, [r3, #17]
  40335a:	f36f 1404 	bfc	r4, #4, #1
  40335e:	745c      	strb	r4, [r3, #17]
			ptr_job->call_nohalt();
  403360:	4401      	add	r1, r0
  403362:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  403366:	4798      	blx	r3
		}
	}
	return true;
  403368:	2001      	movs	r0, #1
  40336a:	e004      	b.n	403376 <udd_ep_clear_halt+0xe2>
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;
  40336c:	2000      	movs	r0, #0
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
}
  40336e:	4770      	bx	lr
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
  403370:	2001      	movs	r0, #1
  403372:	4770      	bx	lr
  403374:	2001      	movs	r0, #1
}
  403376:	b005      	add	sp, #20
  403378:	bd30      	pop	{r4, r5, pc}
  40337a:	bf00      	nop
  40337c:	20001574 	.word	0x20001574
  403380:	40034000 	.word	0x40034000

00403384 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  403384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
  403386:	f000 050f 	and.w	r5, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
  40338a:	2d03      	cmp	r5, #3
  40338c:	f200 809f 	bhi.w	4034ce <udd_ep_run+0x14a>
  403390:	00ac      	lsls	r4, r5, #2
  403392:	f104 2440 	add.w	r4, r4, #1073758208	; 0x40004000
  403396:	f504 3440 	add.w	r4, r4, #196608	; 0x30000
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
  40339a:	6b26      	ldr	r6, [r4, #48]	; 0x30
  40339c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  4033a0:	f000 8097 	beq.w	4034d2 <udd_ep_run+0x14e>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  4033a4:	1e6e      	subs	r6, r5, #1

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
  4033a6:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  4033aa:	4f4f      	ldr	r7, [pc, #316]	; (4034e8 <udd_ep_run+0x164>)
  4033ac:	eb07 078e 	add.w	r7, r7, lr, lsl #2
  4033b0:	7c7f      	ldrb	r7, [r7, #17]
  4033b2:	f017 0f20 	tst.w	r7, #32
  4033b6:	f040 808e 	bne.w	4034d6 <udd_ep_run+0x152>
			|| Is_udd_endpoint_stall_requested(ep)) {
  4033ba:	6b27      	ldr	r7, [r4, #48]	; 0x30
  4033bc:	f017 0f20 	tst.w	r7, #32
  4033c0:	f040 808b 	bne.w	4034da <udd_ep_run+0x156>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4033c4:	f3ef 8710 	mrs	r7, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
  4033c8:	fab7 f787 	clz	r7, r7
  4033cc:	097f      	lsrs	r7, r7, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4033ce:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4033d0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4033d4:	f04f 0c00 	mov.w	ip, #0
  4033d8:	f8df e110 	ldr.w	lr, [pc, #272]	; 4034ec <udd_ep_run+0x168>
  4033dc:	f88e c000 	strb.w	ip, [lr]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
  4033e0:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  4033e4:	f8df c100 	ldr.w	ip, [pc, #256]	; 4034e8 <udd_ep_run+0x164>
  4033e8:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  4033ec:	f89e e011 	ldrb.w	lr, [lr, #17]
  4033f0:	f01e 0f10 	tst.w	lr, #16
  4033f4:	d009      	beq.n	40340a <udd_ep_run+0x86>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4033f6:	2f00      	cmp	r7, #0
  4033f8:	d071      	beq.n	4034de <udd_ep_run+0x15a>
		cpu_irq_enable();
  4033fa:	2201      	movs	r2, #1
  4033fc:	4b3b      	ldr	r3, [pc, #236]	; (4034ec <udd_ep_run+0x168>)
  4033fe:	701a      	strb	r2, [r3, #0]
  403400:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  403404:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
  403406:	2000      	movs	r0, #0
  403408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
  40340a:	eb06 0e86 	add.w	lr, r6, r6, lsl #2
  40340e:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 4034e8 <udd_ep_run+0x164>
  403412:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
  403416:	f89e c011 	ldrb.w	ip, [lr, #17]
  40341a:	f04c 0c10 	orr.w	ip, ip, #16
  40341e:	f88e c011 	strb.w	ip, [lr, #17]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  403422:	b13f      	cbz	r7, 403434 <udd_ep_run+0xb0>
		cpu_irq_enable();
  403424:	f04f 0e01 	mov.w	lr, #1
  403428:	4f30      	ldr	r7, [pc, #192]	; (4034ec <udd_ep_run+0x168>)
  40342a:	f887 e000 	strb.w	lr, [r7]
  40342e:	f3bf 8f5f 	dmb	sy
  403432:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  403434:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 4034e8 <udd_ep_run+0x164>
  403438:	eb06 0786 	add.w	r7, r6, r6, lsl #2
  40343c:	00bf      	lsls	r7, r7, #2
  40343e:	eb0c 0e07 	add.w	lr, ip, r7
  403442:	f8ce 2004 	str.w	r2, [lr, #4]
	ptr_job->buf_size = buf_size;
  403446:	f10e 0208 	add.w	r2, lr, #8
  40344a:	f8ce 3008 	str.w	r3, [lr, #8]
	ptr_job->buf_cnt = 0;
  40344e:	f04f 0e00 	mov.w	lr, #0
  403452:	f8c2 e004 	str.w	lr, [r2, #4]
	ptr_job->call_trans = callback;
  403456:	9a06      	ldr	r2, [sp, #24]
  403458:	f84c 2007 	str.w	r2, [ip, r7]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  40345c:	b919      	cbnz	r1, 403466 <udd_ep_run+0xe2>
  40345e:	fab3 f383 	clz	r3, r3
  403462:	095b      	lsrs	r3, r3, #5
  403464:	e000      	b.n	403468 <udd_ep_run+0xe4>
  403466:	2301      	movs	r3, #1
  403468:	491f      	ldr	r1, [pc, #124]	; (4034e8 <udd_ep_run+0x164>)
  40346a:	00b7      	lsls	r7, r6, #2
  40346c:	19ba      	adds	r2, r7, r6
  40346e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  403472:	7c52      	ldrb	r2, [r2, #17]
  403474:	f363 1286 	bfi	r2, r3, #6, #1
	ptr_job->b_buf_end = false;
  403478:	443e      	add	r6, r7
  40347a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
  40347e:	4613      	mov	r3, r2
  403480:	f36f 13c7 	bfc	r3, #7, #1
  403484:	7473      	strb	r3, [r6, #17]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403486:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40348a:	b672      	cpsid	i
  40348c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  403490:	2200      	movs	r2, #0
  403492:	4b16      	ldr	r3, [pc, #88]	; (4034ec <udd_ep_run+0x168>)
  403494:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();
	udd_enable_endpoint_interrupt(ep);
  403496:	2301      	movs	r3, #1
  403498:	40ab      	lsls	r3, r5
  40349a:	4a15      	ldr	r2, [pc, #84]	; (4034f0 <udd_ep_run+0x16c>)
  40349c:	6113      	str	r3, [r2, #16]
	// Request first transfer
	if (b_dir_in) {
  40349e:	f010 0f80 	tst.w	r0, #128	; 0x80
  4034a2:	d00c      	beq.n	4034be <udd_ep_run+0x13a>
		if (Is_udd_in_pending(ep)) {
  4034a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4034a6:	f013 0f11 	tst.w	r3, #17
  4034aa:	d108      	bne.n	4034be <udd_ep_run+0x13a>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  4034ac:	4628      	mov	r0, r5
  4034ae:	2101      	movs	r1, #1
  4034b0:	4b10      	ldr	r3, [pc, #64]	; (4034f4 <udd_ep_run+0x170>)
  4034b2:	4798      	blx	r3
  4034b4:	b118      	cbz	r0, 4034be <udd_ep_run+0x13a>
				// Over one bank
				udd_ep_in_sent(ep, false);
  4034b6:	4628      	mov	r0, r5
  4034b8:	2100      	movs	r1, #0
  4034ba:	4b0e      	ldr	r3, [pc, #56]	; (4034f4 <udd_ep_run+0x170>)
  4034bc:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4034be:	b986      	cbnz	r6, 4034e2 <udd_ep_run+0x15e>
		cpu_irq_enable();
  4034c0:	2001      	movs	r0, #1
  4034c2:	4b0a      	ldr	r3, [pc, #40]	; (4034ec <udd_ep_run+0x168>)
  4034c4:	7018      	strb	r0, [r3, #0]
  4034c6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4034ca:	b662      	cpsie	i
  4034cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
  4034ce:	2000      	movs	r0, #0
  4034d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| ptr_job->b_stall_requested
			|| Is_udd_endpoint_stall_requested(ep)) {
		return false; // Endpoint is halted
  4034d2:	2000      	movs	r0, #0
  4034d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4034d6:	2000      	movs	r0, #0
  4034d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4034da:	2000      	movs	r0, #0
  4034dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
  4034de:	2000      	movs	r0, #0
  4034e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);

	return true;
  4034e2:	2001      	movs	r0, #1
}
  4034e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4034e6:	bf00      	nop
  4034e8:	20001574 	.word	0x20001574
  4034ec:	200000a3 	.word	0x200000a3
  4034f0:	40034000 	.word	0x40034000
  4034f4:	00402105 	.word	0x00402105

004034f8 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  4034f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034fa:	b089      	sub	sp, #36	; 0x24
	bool b_dir_in = ep & USB_EP_DIR_IN;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  4034fc:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep)
  403500:	2c03      	cmp	r4, #3
  403502:	f200 80ba 	bhi.w	40367a <udd_ep_abort+0x182>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  403506:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40350a:	b672      	cpsid	i
  40350c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  403510:	2100      	movs	r1, #0
  403512:	4a5b      	ldr	r2, [pc, #364]	; (403680 <udd_ep_abort+0x188>)
  403514:	7011      	strb	r1, [r2, #0]
		return;

	// Disable interrupts
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
  403516:	2501      	movs	r5, #1
  403518:	40a5      	lsls	r5, r4
  40351a:	4a5a      	ldr	r2, [pc, #360]	; (403684 <udd_ep_abort+0x18c>)
  40351c:	6155      	str	r5, [r2, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40351e:	b92b      	cbnz	r3, 40352c <udd_ep_abort+0x34>
		cpu_irq_enable();
  403520:	2201      	movs	r2, #1
  403522:	4b57      	ldr	r3, [pc, #348]	; (403680 <udd_ep_abort+0x188>)
  403524:	701a      	strb	r2, [r3, #0]
  403526:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40352a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
  40352c:	f010 0f80 	tst.w	r0, #128	; 0x80
  403530:	d10a      	bne.n	403548 <udd_ep_abort+0x50>
  403532:	00a6      	lsls	r6, r4, #2
  403534:	f106 2640 	add.w	r6, r6, #1073758208	; 0x40004000
  403538:	f506 3640 	add.w	r6, r6, #196608	; 0x30000
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40353c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  40353e:	f013 0f42 	tst.w	r3, #66	; 0x42
  403542:	f040 8081 	bne.w	403648 <udd_ep_abort+0x150>
  403546:	e086      	b.n	403656 <udd_ep_abort+0x15e>
  403548:	00a2      	lsls	r2, r4, #2
  40354a:	f102 2240 	add.w	r2, r2, #1073758208	; 0x40004000
  40354e:	f502 3240 	add.w	r2, r2, #196608	; 0x30000
	udd_disable_endpoint_interrupt(ep);
	cpu_irq_restore(flags);
	// Clear pending statuses
	if (b_dir_in) {
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  403552:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403554:	f013 0f10 	tst.w	r3, #16
  403558:	d053      	beq.n	403602 <udd_ep_abort+0x10a>
			udd_kill_data_in_fifo(ep,
  40355a:	2c00      	cmp	r4, #0
  40355c:	d039      	beq.n	4035d2 <udd_ep_abort+0xda>
  40355e:	2c03      	cmp	r4, #3
  403560:	d037      	beq.n	4035d2 <udd_ep_abort+0xda>
  403562:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403564:	9300      	str	r3, [sp, #0]
  403566:	9b00      	ldr	r3, [sp, #0]
  403568:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40356c:	9300      	str	r3, [sp, #0]
  40356e:	9b00      	ldr	r3, [sp, #0]
  403570:	f023 0310 	bic.w	r3, r3, #16
  403574:	9300      	str	r3, [sp, #0]
  403576:	9b00      	ldr	r3, [sp, #0]
  403578:	6313      	str	r3, [r2, #48]	; 0x30
  40357a:	2300      	movs	r3, #0
  40357c:	9301      	str	r3, [sp, #4]
  40357e:	9b01      	ldr	r3, [sp, #4]
  403580:	2b13      	cmp	r3, #19
  403582:	d806      	bhi.n	403592 <udd_ep_abort+0x9a>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  403584:	bf00      	nop
  403586:	9b01      	ldr	r3, [sp, #4]
  403588:	3301      	adds	r3, #1
  40358a:	9301      	str	r3, [sp, #4]
  40358c:	9b01      	ldr	r3, [sp, #4]
  40358e:	2b13      	cmp	r3, #19
  403590:	d9f8      	bls.n	403584 <udd_ep_abort+0x8c>
  403592:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403594:	f013 0f10 	tst.w	r3, #16
  403598:	d1fb      	bne.n	403592 <udd_ep_abort+0x9a>
  40359a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40359c:	9302      	str	r3, [sp, #8]
  40359e:	9b02      	ldr	r3, [sp, #8]
  4035a0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4035a4:	9302      	str	r3, [sp, #8]
  4035a6:	9b02      	ldr	r3, [sp, #8]
  4035a8:	f043 0310 	orr.w	r3, r3, #16
  4035ac:	9302      	str	r3, [sp, #8]
  4035ae:	9b02      	ldr	r3, [sp, #8]
  4035b0:	6313      	str	r3, [r2, #48]	; 0x30
  4035b2:	2300      	movs	r3, #0
  4035b4:	9303      	str	r3, [sp, #12]
  4035b6:	9b03      	ldr	r3, [sp, #12]
  4035b8:	2b13      	cmp	r3, #19
  4035ba:	d806      	bhi.n	4035ca <udd_ep_abort+0xd2>
  4035bc:	bf00      	nop
  4035be:	9b03      	ldr	r3, [sp, #12]
  4035c0:	3301      	adds	r3, #1
  4035c2:	9303      	str	r3, [sp, #12]
  4035c4:	9b03      	ldr	r3, [sp, #12]
  4035c6:	2b13      	cmp	r3, #19
  4035c8:	d9f8      	bls.n	4035bc <udd_ep_abort+0xc4>
  4035ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4035cc:	f013 0f10 	tst.w	r3, #16
  4035d0:	d0fb      	beq.n	4035ca <udd_ep_abort+0xd2>
  4035d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4035d4:	9304      	str	r3, [sp, #16]
  4035d6:	9b04      	ldr	r3, [sp, #16]
  4035d8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4035dc:	9304      	str	r3, [sp, #16]
  4035de:	9b04      	ldr	r3, [sp, #16]
  4035e0:	f023 0310 	bic.w	r3, r3, #16
  4035e4:	9304      	str	r3, [sp, #16]
  4035e6:	9b04      	ldr	r3, [sp, #16]
  4035e8:	6313      	str	r3, [r2, #48]	; 0x30
  4035ea:	2300      	movs	r3, #0
  4035ec:	9305      	str	r3, [sp, #20]
  4035ee:	9b05      	ldr	r3, [sp, #20]
  4035f0:	2b13      	cmp	r3, #19
  4035f2:	d806      	bhi.n	403602 <udd_ep_abort+0x10a>
  4035f4:	bf00      	nop
  4035f6:	9b05      	ldr	r3, [sp, #20]
  4035f8:	3301      	adds	r3, #1
  4035fa:	9305      	str	r3, [sp, #20]
  4035fc:	9b05      	ldr	r3, [sp, #20]
  4035fe:	2b13      	cmp	r3, #19
  403600:	d9f8      	bls.n	4035f4 <udd_ep_abort+0xfc>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  403602:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403604:	9306      	str	r3, [sp, #24]
  403606:	9b06      	ldr	r3, [sp, #24]
  403608:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40360c:	9306      	str	r3, [sp, #24]
  40360e:	9b06      	ldr	r3, [sp, #24]
  403610:	f023 0301 	bic.w	r3, r3, #1
  403614:	9306      	str	r3, [sp, #24]
  403616:	9b06      	ldr	r3, [sp, #24]
  403618:	6313      	str	r3, [r2, #48]	; 0x30
  40361a:	2300      	movs	r3, #0
  40361c:	9307      	str	r3, [sp, #28]
  40361e:	9b07      	ldr	r3, [sp, #28]
  403620:	2b13      	cmp	r3, #19
  403622:	d806      	bhi.n	403632 <udd_ep_abort+0x13a>
  403624:	bf00      	nop
  403626:	9b07      	ldr	r3, [sp, #28]
  403628:	3301      	adds	r3, #1
  40362a:	9307      	str	r3, [sp, #28]
  40362c:	9b07      	ldr	r3, [sp, #28]
  40362e:	2b13      	cmp	r3, #19
  403630:	d9f8      	bls.n	403624 <udd_ep_abort+0x12c>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  403632:	1e63      	subs	r3, r4, #1
  403634:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  403638:	4b13      	ldr	r3, [pc, #76]	; (403688 <udd_ep_abort+0x190>)
  40363a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40363e:	7c5a      	ldrb	r2, [r3, #17]
  403640:	f36f 0283 	bfc	r2, #2, #2
  403644:	745a      	strb	r2, [r3, #17]
  403646:	e006      	b.n	403656 <udd_ep_abort+0x15e>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  403648:	4f10      	ldr	r7, [pc, #64]	; (40368c <udd_ep_abort+0x194>)
  40364a:	4620      	mov	r0, r4
  40364c:	47b8      	blx	r7
		udd_ack_in_sent(ep);
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
  40364e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  403650:	f013 0f42 	tst.w	r3, #66	; 0x42
  403654:	d1f9      	bne.n	40364a <udd_ep_abort+0x152>
			udd_ep_ack_out_received(ep);
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  403656:	4b0b      	ldr	r3, [pc, #44]	; (403684 <udd_ep_abort+0x18c>)
  403658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40365a:	432a      	orrs	r2, r5
  40365c:	629a      	str	r2, [r3, #40]	; 0x28
  40365e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403660:	ea22 0505 	bic.w	r5, r2, r5
  403664:	629d      	str	r5, [r3, #40]	; 0x28
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  403666:	1e60      	subs	r0, r4, #1
  403668:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40366c:	4b06      	ldr	r3, [pc, #24]	; (403688 <udd_ep_abort+0x190>)
  40366e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403672:	2101      	movs	r1, #1
  403674:	4622      	mov	r2, r4
  403676:	4b06      	ldr	r3, [pc, #24]	; (403690 <udd_ep_abort+0x198>)
  403678:	4798      	blx	r3
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
	// Abort job
	udd_ep_abort_job(ep);
}
  40367a:	b009      	add	sp, #36	; 0x24
  40367c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40367e:	bf00      	nop
  403680:	200000a3 	.word	0x200000a3
  403684:	40034000 	.word	0x40034000
  403688:	20001574 	.word	0x20001574
  40368c:	00402011 	.word	0x00402011
  403690:	00401fd1 	.word	0x00401fd1

00403694 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  403694:	3801      	subs	r0, #1
  403696:	2802      	cmp	r0, #2
  403698:	d818      	bhi.n	4036cc <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  40369a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40369e:	460e      	mov	r6, r1
  4036a0:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4036a2:	b182      	cbz	r2, 4036c6 <_write+0x32>
  4036a4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4036a6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4036e0 <_write+0x4c>
  4036aa:	4f0c      	ldr	r7, [pc, #48]	; (4036dc <_write+0x48>)
  4036ac:	f8d8 0000 	ldr.w	r0, [r8]
  4036b0:	f815 1b01 	ldrb.w	r1, [r5], #1
  4036b4:	683b      	ldr	r3, [r7, #0]
  4036b6:	4798      	blx	r3
  4036b8:	2800      	cmp	r0, #0
  4036ba:	db0a      	blt.n	4036d2 <_write+0x3e>
  4036bc:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4036be:	3c01      	subs	r4, #1
  4036c0:	d1f4      	bne.n	4036ac <_write+0x18>
  4036c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4036c6:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
  4036c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4036cc:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4036d0:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4036d2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4036d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4036da:	bf00      	nop
  4036dc:	20001618 	.word	0x20001618
  4036e0:	2000161c 	.word	0x2000161c

004036e4 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  4036e4:	b510      	push	{r4, lr}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4036e6:	2000      	movs	r0, #0
  4036e8:	213e      	movs	r1, #62	; 0x3e
  4036ea:	4b0a      	ldr	r3, [pc, #40]	; (403714 <sysclk_enable_usb+0x30>)
  4036ec:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4036ee:	4c0a      	ldr	r4, [pc, #40]	; (403718 <sysclk_enable_usb+0x34>)
  4036f0:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4036f2:	2800      	cmp	r0, #0
  4036f4:	d0fc      	beq.n	4036f0 <sysclk_enable_usb+0xc>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  4036f6:	4b09      	ldr	r3, [pc, #36]	; (40371c <sysclk_enable_usb+0x38>)
  4036f8:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  4036fa:	4a09      	ldr	r2, [pc, #36]	; (403720 <sysclk_enable_usb+0x3c>)
  4036fc:	4b09      	ldr	r3, [pc, #36]	; (403724 <sysclk_enable_usb+0x40>)
  4036fe:	62da      	str	r2, [r3, #44]	; 0x2c
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
	} else {
		return pmc_is_locked_pllbck();
  403700:	4c09      	ldr	r4, [pc, #36]	; (403728 <sysclk_enable_usb+0x44>)
  403702:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  403704:	2800      	cmp	r0, #0
  403706:	d0fc      	beq.n	403702 <sysclk_enable_usb+0x1e>

		pll_enable_source(CONFIG_PLL1_SOURCE);
		pll_config_defaults(&pllcfg, 1);
		pll_enable(&pllcfg, 1);
		pll_wait_for_lock(1);
		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
  403708:	2001      	movs	r0, #1
  40370a:	4b08      	ldr	r3, [pc, #32]	; (40372c <sysclk_enable_usb+0x48>)
  40370c:	4798      	blx	r3
		pmc_enable_udpck();
  40370e:	4b08      	ldr	r3, [pc, #32]	; (403730 <sysclk_enable_usb+0x4c>)
  403710:	4798      	blx	r3
  403712:	bd10      	pop	{r4, pc}
  403714:	0040398d 	.word	0x0040398d
  403718:	004039e1 	.word	0x004039e1
  40371c:	00403a11 	.word	0x00403a11
  403720:	000f3f02 	.word	0x000f3f02
  403724:	400e0400 	.word	0x400e0400
  403728:	00403a1d 	.word	0x00403a1d
  40372c:	00403ad5 	.word	0x00403ad5
  403730:	00403ae9 	.word	0x00403ae9

00403734 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  403734:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  403736:	480e      	ldr	r0, [pc, #56]	; (403770 <sysclk_init+0x3c>)
  403738:	4b0e      	ldr	r3, [pc, #56]	; (403774 <sysclk_init+0x40>)
  40373a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40373c:	2000      	movs	r0, #0
  40373e:	213e      	movs	r1, #62	; 0x3e
  403740:	4b0d      	ldr	r3, [pc, #52]	; (403778 <sysclk_init+0x44>)
  403742:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403744:	4c0d      	ldr	r4, [pc, #52]	; (40377c <sysclk_init+0x48>)
  403746:	47a0      	blx	r4
  403748:	2800      	cmp	r0, #0
  40374a:	d0fc      	beq.n	403746 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40374c:	4b0c      	ldr	r3, [pc, #48]	; (403780 <sysclk_init+0x4c>)
  40374e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403750:	4a0c      	ldr	r2, [pc, #48]	; (403784 <sysclk_init+0x50>)
  403752:	4b0d      	ldr	r3, [pc, #52]	; (403788 <sysclk_init+0x54>)
  403754:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  403756:	4c0d      	ldr	r4, [pc, #52]	; (40378c <sysclk_init+0x58>)
  403758:	47a0      	blx	r4
  40375a:	2800      	cmp	r0, #0
  40375c:	d0fc      	beq.n	403758 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40375e:	2010      	movs	r0, #16
  403760:	4b0b      	ldr	r3, [pc, #44]	; (403790 <sysclk_init+0x5c>)
  403762:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403764:	4b0b      	ldr	r3, [pc, #44]	; (403794 <sysclk_init+0x60>)
  403766:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  403768:	4801      	ldr	r0, [pc, #4]	; (403770 <sysclk_init+0x3c>)
  40376a:	4b02      	ldr	r3, [pc, #8]	; (403774 <sysclk_init+0x40>)
  40376c:	4798      	blx	r3
  40376e:	bd10      	pop	{r4, pc}
  403770:	07270e00 	.word	0x07270e00
  403774:	00403e8d 	.word	0x00403e8d
  403778:	0040398d 	.word	0x0040398d
  40377c:	004039e1 	.word	0x004039e1
  403780:	004039f1 	.word	0x004039f1
  403784:	20133f01 	.word	0x20133f01
  403788:	400e0400 	.word	0x400e0400
  40378c:	00403a01 	.word	0x00403a01
  403790:	00403925 	.word	0x00403925
  403794:	00403d79 	.word	0x00403d79

00403798 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  403798:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40379a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40379e:	d02f      	beq.n	403800 <pio_set_peripheral+0x68>
  4037a0:	d807      	bhi.n	4037b2 <pio_set_peripheral+0x1a>
  4037a2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4037a6:	d014      	beq.n	4037d2 <pio_set_peripheral+0x3a>
  4037a8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4037ac:	d01e      	beq.n	4037ec <pio_set_peripheral+0x54>
  4037ae:	b939      	cbnz	r1, 4037c0 <pio_set_peripheral+0x28>
  4037b0:	4770      	bx	lr
  4037b2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4037b6:	d037      	beq.n	403828 <pio_set_peripheral+0x90>
  4037b8:	d804      	bhi.n	4037c4 <pio_set_peripheral+0x2c>
  4037ba:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4037be:	d029      	beq.n	403814 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4037c0:	6042      	str	r2, [r0, #4]
  4037c2:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4037c4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4037c8:	d02e      	beq.n	403828 <pio_set_peripheral+0x90>
  4037ca:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4037ce:	d02b      	beq.n	403828 <pio_set_peripheral+0x90>
  4037d0:	e7f6      	b.n	4037c0 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4037d2:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4037d4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4037d6:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4037d8:	43d3      	mvns	r3, r2
  4037da:	4021      	ands	r1, r4
  4037dc:	4019      	ands	r1, r3
  4037de:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4037e0:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4037e2:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4037e4:	4021      	ands	r1, r4
  4037e6:	400b      	ands	r3, r1
  4037e8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4037ea:	e01a      	b.n	403822 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4037ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4037ee:	4313      	orrs	r3, r2
  4037f0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4037f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4037f4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4037f6:	400b      	ands	r3, r1
  4037f8:	ea23 0302 	bic.w	r3, r3, r2
  4037fc:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4037fe:	e7df      	b.n	4037c0 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403800:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  403802:	6f01      	ldr	r1, [r0, #112]	; 0x70
  403804:	400b      	ands	r3, r1
  403806:	ea23 0302 	bic.w	r3, r3, r2
  40380a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40380c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40380e:	4313      	orrs	r3, r2
  403810:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403812:	e7d5      	b.n	4037c0 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  403814:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  403816:	4313      	orrs	r3, r2
  403818:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40381a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40381c:	4313      	orrs	r3, r2
  40381e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  403820:	e7ce      	b.n	4037c0 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  403822:	6042      	str	r2, [r0, #4]
}
  403824:	f85d 4b04 	ldr.w	r4, [sp], #4
  403828:	4770      	bx	lr
  40382a:	bf00      	nop

0040382c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40382c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40382e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  403832:	bf14      	ite	ne
  403834:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  403836:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  403838:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40383c:	bf14      	ite	ne
  40383e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  403840:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  403842:	f012 0f02 	tst.w	r2, #2
  403846:	d002      	beq.n	40384e <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  403848:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40384c:	e004      	b.n	403858 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  40384e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  403852:	bf18      	it	ne
  403854:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  403858:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40385a:	6001      	str	r1, [r0, #0]
  40385c:	4770      	bx	lr
  40385e:	bf00      	nop

00403860 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  403860:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  403862:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  403864:	9c01      	ldr	r4, [sp, #4]
  403866:	b10c      	cbz	r4, 40386c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  403868:	6641      	str	r1, [r0, #100]	; 0x64
  40386a:	e000      	b.n	40386e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40386c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  40386e:	b10b      	cbz	r3, 403874 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  403870:	6501      	str	r1, [r0, #80]	; 0x50
  403872:	e000      	b.n	403876 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  403874:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  403876:	b10a      	cbz	r2, 40387c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  403878:	6301      	str	r1, [r0, #48]	; 0x30
  40387a:	e000      	b.n	40387e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40387c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40387e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  403880:	6001      	str	r1, [r0, #0]
}
  403882:	f85d 4b04 	ldr.w	r4, [sp], #4
  403886:	4770      	bx	lr

00403888 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  403888:	b5f0      	push	{r4, r5, r6, r7, lr}
  40388a:	b083      	sub	sp, #12
  40388c:	4607      	mov	r7, r0
  40388e:	460c      	mov	r4, r1
  403890:	4616      	mov	r6, r2
  403892:	461d      	mov	r5, r3
	/* Configure pins */
	switch (ul_type) {
  403894:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  403898:	d014      	beq.n	4038c4 <pio_configure+0x3c>
  40389a:	d809      	bhi.n	4038b0 <pio_configure+0x28>
  40389c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4038a0:	d010      	beq.n	4038c4 <pio_configure+0x3c>
  4038a2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4038a6:	d00d      	beq.n	4038c4 <pio_configure+0x3c>
  4038a8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4038ac:	d12c      	bne.n	403908 <pio_configure+0x80>
  4038ae:	e009      	b.n	4038c4 <pio_configure+0x3c>
  4038b0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4038b4:	d018      	beq.n	4038e8 <pio_configure+0x60>
  4038b6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4038ba:	d015      	beq.n	4038e8 <pio_configure+0x60>
  4038bc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4038c0:	d00c      	beq.n	4038dc <pio_configure+0x54>
  4038c2:	e021      	b.n	403908 <pio_configure+0x80>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4038c4:	4638      	mov	r0, r7
  4038c6:	4621      	mov	r1, r4
  4038c8:	4632      	mov	r2, r6
  4038ca:	4b11      	ldr	r3, [pc, #68]	; (403910 <pio_configure+0x88>)
  4038cc:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4038ce:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4038d2:	bf14      	ite	ne
  4038d4:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4038d6:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4038d8:	2001      	movs	r0, #1
  4038da:	e016      	b.n	40390a <pio_configure+0x82>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4038dc:	4611      	mov	r1, r2
  4038de:	461a      	mov	r2, r3
  4038e0:	4b0c      	ldr	r3, [pc, #48]	; (403914 <pio_configure+0x8c>)
  4038e2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4038e4:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
  4038e6:	e010      	b.n	40390a <pio_configure+0x82>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4038e8:	f005 0301 	and.w	r3, r5, #1
  4038ec:	9300      	str	r3, [sp, #0]
  4038ee:	4638      	mov	r0, r7
  4038f0:	4631      	mov	r1, r6
  4038f2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
  4038f6:	bf14      	ite	ne
  4038f8:	2200      	movne	r2, #0
  4038fa:	2201      	moveq	r2, #1
  4038fc:	f3c5 0380 	ubfx	r3, r5, #2, #1
  403900:	4c05      	ldr	r4, [pc, #20]	; (403918 <pio_configure+0x90>)
  403902:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  403904:	2001      	movs	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
  403906:	e000      	b.n	40390a <pio_configure+0x82>

	default:
		return 0;
  403908:	2000      	movs	r0, #0
	}

	return 1;
}
  40390a:	b003      	add	sp, #12
  40390c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40390e:	bf00      	nop
  403910:	00403799 	.word	0x00403799
  403914:	0040382d 	.word	0x0040382d
  403918:	00403861 	.word	0x00403861

0040391c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40391c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40391e:	4770      	bx	lr

00403920 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  403920:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  403922:	4770      	bx	lr

00403924 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  403924:	4a18      	ldr	r2, [pc, #96]	; (403988 <pmc_switch_mck_to_pllack+0x64>)
  403926:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40392c:	4318      	orrs	r0, r3
  40392e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403930:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403932:	f013 0f08 	tst.w	r3, #8
  403936:	d003      	beq.n	403940 <pmc_switch_mck_to_pllack+0x1c>
  403938:	e009      	b.n	40394e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40393a:	3b01      	subs	r3, #1
  40393c:	d103      	bne.n	403946 <pmc_switch_mck_to_pllack+0x22>
  40393e:	e01e      	b.n	40397e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403940:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403944:	4910      	ldr	r1, [pc, #64]	; (403988 <pmc_switch_mck_to_pllack+0x64>)
  403946:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403948:	f012 0f08 	tst.w	r2, #8
  40394c:	d0f5      	beq.n	40393a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40394e:	4a0e      	ldr	r2, [pc, #56]	; (403988 <pmc_switch_mck_to_pllack+0x64>)
  403950:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403952:	f023 0303 	bic.w	r3, r3, #3
  403956:	f043 0302 	orr.w	r3, r3, #2
  40395a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40395c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40395e:	f010 0008 	ands.w	r0, r0, #8
  403962:	d004      	beq.n	40396e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  403964:	2000      	movs	r0, #0
  403966:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  403968:	3b01      	subs	r3, #1
  40396a:	d103      	bne.n	403974 <pmc_switch_mck_to_pllack+0x50>
  40396c:	e009      	b.n	403982 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40396e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403972:	4905      	ldr	r1, [pc, #20]	; (403988 <pmc_switch_mck_to_pllack+0x64>)
  403974:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403976:	f012 0f08 	tst.w	r2, #8
  40397a:	d0f5      	beq.n	403968 <pmc_switch_mck_to_pllack+0x44>
  40397c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40397e:	2001      	movs	r0, #1
  403980:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  403982:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403984:	4770      	bx	lr
  403986:	bf00      	nop
  403988:	400e0400 	.word	0x400e0400

0040398c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40398c:	b138      	cbz	r0, 40399e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40398e:	4911      	ldr	r1, [pc, #68]	; (4039d4 <pmc_switch_mainck_to_xtal+0x48>)
  403990:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  403992:	4a11      	ldr	r2, [pc, #68]	; (4039d8 <pmc_switch_mainck_to_xtal+0x4c>)
  403994:	401a      	ands	r2, r3
  403996:	4b11      	ldr	r3, [pc, #68]	; (4039dc <pmc_switch_mainck_to_xtal+0x50>)
  403998:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40399a:	620b      	str	r3, [r1, #32]
  40399c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40399e:	4a0d      	ldr	r2, [pc, #52]	; (4039d4 <pmc_switch_mainck_to_xtal+0x48>)
  4039a0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4039a2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4039a6:	f023 0303 	bic.w	r3, r3, #3
  4039aa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4039ae:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4039b2:	0209      	lsls	r1, r1, #8
  4039b4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4039b6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4039b8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4039ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4039bc:	f013 0f01 	tst.w	r3, #1
  4039c0:	d0fb      	beq.n	4039ba <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4039c2:	4a04      	ldr	r2, [pc, #16]	; (4039d4 <pmc_switch_mainck_to_xtal+0x48>)
  4039c4:	6a13      	ldr	r3, [r2, #32]
  4039c6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4039ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4039ce:	6213      	str	r3, [r2, #32]
  4039d0:	4770      	bx	lr
  4039d2:	bf00      	nop
  4039d4:	400e0400 	.word	0x400e0400
  4039d8:	fec8fffc 	.word	0xfec8fffc
  4039dc:	01370002 	.word	0x01370002

004039e0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4039e0:	4b02      	ldr	r3, [pc, #8]	; (4039ec <pmc_osc_is_ready_mainck+0xc>)
  4039e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4039e4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4039e8:	4770      	bx	lr
  4039ea:	bf00      	nop
  4039ec:	400e0400 	.word	0x400e0400

004039f0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4039f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4039f4:	4b01      	ldr	r3, [pc, #4]	; (4039fc <pmc_disable_pllack+0xc>)
  4039f6:	629a      	str	r2, [r3, #40]	; 0x28
  4039f8:	4770      	bx	lr
  4039fa:	bf00      	nop
  4039fc:	400e0400 	.word	0x400e0400

00403a00 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403a00:	4b02      	ldr	r3, [pc, #8]	; (403a0c <pmc_is_locked_pllack+0xc>)
  403a02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403a04:	f000 0002 	and.w	r0, r0, #2
  403a08:	4770      	bx	lr
  403a0a:	bf00      	nop
  403a0c:	400e0400 	.word	0x400e0400

00403a10 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  403a10:	2200      	movs	r2, #0
  403a12:	4b01      	ldr	r3, [pc, #4]	; (403a18 <pmc_disable_pllbck+0x8>)
  403a14:	62da      	str	r2, [r3, #44]	; 0x2c
  403a16:	4770      	bx	lr
  403a18:	400e0400 	.word	0x400e0400

00403a1c <pmc_is_locked_pllbck>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  403a1c:	4b02      	ldr	r3, [pc, #8]	; (403a28 <pmc_is_locked_pllbck+0xc>)
  403a1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403a20:	f000 0004 	and.w	r0, r0, #4
  403a24:	4770      	bx	lr
  403a26:	bf00      	nop
  403a28:	400e0400 	.word	0x400e0400

00403a2c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403a2c:	2822      	cmp	r0, #34	; 0x22
  403a2e:	d81e      	bhi.n	403a6e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403a30:	281f      	cmp	r0, #31
  403a32:	d80c      	bhi.n	403a4e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  403a34:	4b11      	ldr	r3, [pc, #68]	; (403a7c <pmc_enable_periph_clk+0x50>)
  403a36:	699a      	ldr	r2, [r3, #24]
  403a38:	2301      	movs	r3, #1
  403a3a:	4083      	lsls	r3, r0
  403a3c:	401a      	ands	r2, r3
  403a3e:	4293      	cmp	r3, r2
  403a40:	d017      	beq.n	403a72 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  403a42:	2301      	movs	r3, #1
  403a44:	4083      	lsls	r3, r0
  403a46:	4a0d      	ldr	r2, [pc, #52]	; (403a7c <pmc_enable_periph_clk+0x50>)
  403a48:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403a4a:	2000      	movs	r0, #0
  403a4c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403a4e:	4b0b      	ldr	r3, [pc, #44]	; (403a7c <pmc_enable_periph_clk+0x50>)
  403a50:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  403a54:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  403a56:	2301      	movs	r3, #1
  403a58:	4083      	lsls	r3, r0
  403a5a:	401a      	ands	r2, r3
  403a5c:	4293      	cmp	r3, r2
  403a5e:	d00a      	beq.n	403a76 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  403a60:	2301      	movs	r3, #1
  403a62:	4083      	lsls	r3, r0
  403a64:	4a05      	ldr	r2, [pc, #20]	; (403a7c <pmc_enable_periph_clk+0x50>)
  403a66:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  403a6a:	2000      	movs	r0, #0
  403a6c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  403a6e:	2001      	movs	r0, #1
  403a70:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  403a72:	2000      	movs	r0, #0
  403a74:	4770      	bx	lr
  403a76:	2000      	movs	r0, #0
}
  403a78:	4770      	bx	lr
  403a7a:	bf00      	nop
  403a7c:	400e0400 	.word	0x400e0400

00403a80 <pmc_disable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  403a80:	2822      	cmp	r0, #34	; 0x22
  403a82:	d81e      	bhi.n	403ac2 <pmc_disable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  403a84:	281f      	cmp	r0, #31
  403a86:	d80c      	bhi.n	403aa2 <pmc_disable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  403a88:	4b11      	ldr	r3, [pc, #68]	; (403ad0 <pmc_disable_periph_clk+0x50>)
  403a8a:	699a      	ldr	r2, [r3, #24]
  403a8c:	2301      	movs	r3, #1
  403a8e:	4083      	lsls	r3, r0
  403a90:	401a      	ands	r2, r3
  403a92:	4293      	cmp	r3, r2
  403a94:	d117      	bne.n	403ac6 <pmc_disable_periph_clk+0x46>
			PMC->PMC_PCDR0 = 1 << ul_id;
  403a96:	2301      	movs	r3, #1
  403a98:	4083      	lsls	r3, r0
  403a9a:	4a0d      	ldr	r2, [pc, #52]	; (403ad0 <pmc_disable_periph_clk+0x50>)
  403a9c:	6153      	str	r3, [r2, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  403a9e:	2000      	movs	r0, #0
  403aa0:	4770      	bx	lr
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  403aa2:	4b0b      	ldr	r3, [pc, #44]	; (403ad0 <pmc_disable_periph_clk+0x50>)
  403aa4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
			PMC->PMC_PCDR0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  403aa8:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  403aaa:	2301      	movs	r3, #1
  403aac:	4083      	lsls	r3, r0
  403aae:	401a      	ands	r2, r3
  403ab0:	4293      	cmp	r3, r2
  403ab2:	d10a      	bne.n	403aca <pmc_disable_periph_clk+0x4a>
			PMC->PMC_PCDR1 = 1 << ul_id;
  403ab4:	2301      	movs	r3, #1
  403ab6:	4083      	lsls	r3, r0
  403ab8:	4a05      	ldr	r2, [pc, #20]	; (403ad0 <pmc_disable_periph_clk+0x50>)
  403aba:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		}
#endif
	}
	return 0;
  403abe:	2000      	movs	r0, #0
  403ac0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  403ac2:	2001      	movs	r0, #1
  403ac4:	4770      	bx	lr
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
  403ac6:	2000      	movs	r0, #0
  403ac8:	4770      	bx	lr
  403aca:	2000      	movs	r0, #0
}
  403acc:	4770      	bx	lr
  403ace:	bf00      	nop
  403ad0:	400e0400 	.word	0x400e0400

00403ad4 <pmc_switch_udpck_to_pllbck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
  403ad4:	0200      	lsls	r0, r0, #8
  403ad6:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
  403ada:	f040 0001 	orr.w	r0, r0, #1
  403ade:	4b01      	ldr	r3, [pc, #4]	; (403ae4 <pmc_switch_udpck_to_pllbck+0x10>)
  403ae0:	6398      	str	r0, [r3, #56]	; 0x38
  403ae2:	4770      	bx	lr
  403ae4:	400e0400 	.word	0x400e0400

00403ae8 <pmc_enable_udpck>:
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  403ae8:	2280      	movs	r2, #128	; 0x80
  403aea:	4b01      	ldr	r3, [pc, #4]	; (403af0 <pmc_enable_udpck+0x8>)
  403aec:	601a      	str	r2, [r3, #0]
  403aee:	4770      	bx	lr
  403af0:	400e0400 	.word	0x400e0400

00403af4 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
  403af4:	4a03      	ldr	r2, [pc, #12]	; (403b04 <pmc_set_fast_startup_input+0x10>)
  403af6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  403af8:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
  403afc:	4303      	orrs	r3, r0
  403afe:	6713      	str	r3, [r2, #112]	; 0x70
  403b00:	4770      	bx	lr
  403b02:	bf00      	nop
  403b04:	400e0400 	.word	0x400e0400

00403b08 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
  403b08:	4b02      	ldr	r3, [pc, #8]	; (403b14 <pmc_is_wakeup_clocks_restored+0xc>)
  403b0a:	7818      	ldrb	r0, [r3, #0]
}
  403b0c:	f080 0001 	eor.w	r0, r0, #1
  403b10:	4770      	bx	lr
  403b12:	bf00      	nop
  403b14:	200015b6 	.word	0x200015b6

00403b18 <board_init>:
#include <conf_board.h>

#include "arduino_core/internal_timer.h"

void board_init(void)
{
  403b18:	b538      	push	{r3, r4, r5, lr}
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	WDT->WDT_MR = WDT_MR_WDDIS;  //disable watchdog timer
  403b1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403b1e:	4b12      	ldr	r3, [pc, #72]	; (403b68 <board_init+0x50>)
  403b20:	605a      	str	r2, [r3, #4]
  403b22:	201d      	movs	r0, #29
  403b24:	4b11      	ldr	r3, [pc, #68]	; (403b6c <board_init+0x54>)
  403b26:	4798      	blx	r3
	
	//init and start up the adc
	sysclk_enable_peripheral_clock(ID_ADC);
	adc_init(ADC, sysclk_get_main_hz(), sysclk_get_main_hz() / 4, 512);
  403b28:	4c11      	ldr	r4, [pc, #68]	; (403b70 <board_init+0x58>)
  403b2a:	4620      	mov	r0, r4
  403b2c:	4911      	ldr	r1, [pc, #68]	; (403b74 <board_init+0x5c>)
  403b2e:	4a12      	ldr	r2, [pc, #72]	; (403b78 <board_init+0x60>)
  403b30:	f44f 7300 	mov.w	r3, #512	; 0x200
  403b34:	4d11      	ldr	r5, [pc, #68]	; (403b7c <board_init+0x64>)
  403b36:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
  403b38:	4620      	mov	r0, r4
  403b3a:	2100      	movs	r1, #0
  403b3c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  403b40:	2301      	movs	r3, #1
  403b42:	4d0f      	ldr	r5, [pc, #60]	; (403b80 <board_init+0x68>)
  403b44:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
  403b46:	4620      	mov	r0, r4
  403b48:	2100      	movs	r1, #0
  403b4a:	4b0e      	ldr	r3, [pc, #56]	; (403b84 <board_init+0x6c>)
  403b4c:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_3);
  403b4e:	4620      	mov	r0, r4
  403b50:	2103      	movs	r1, #3
  403b52:	4b0d      	ldr	r3, [pc, #52]	; (403b88 <board_init+0x70>)
  403b54:	4798      	blx	r3
	adc_start(ADC);
  403b56:	4620      	mov	r0, r4
  403b58:	4b0c      	ldr	r3, [pc, #48]	; (403b8c <board_init+0x74>)
  403b5a:	4798      	blx	r3

	//configure timer counter to create milliseconds counter for Arduino
	//delay/millis functions
	internal_timer_configure(1000);
  403b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  403b60:	4b0b      	ldr	r3, [pc, #44]	; (403b90 <board_init+0x78>)
  403b62:	4798      	blx	r3
  403b64:	bd38      	pop	{r3, r4, r5, pc}
  403b66:	bf00      	nop
  403b68:	400e1450 	.word	0x400e1450
  403b6c:	00403a2d 	.word	0x00403a2d
  403b70:	40038000 	.word	0x40038000
  403b74:	0e4e1c00 	.word	0x0e4e1c00
  403b78:	03938700 	.word	0x03938700
  403b7c:	00401b35 	.word	0x00401b35
  403b80:	00401b79 	.word	0x00401b79
  403b84:	00401b69 	.word	0x00401b69
  403b88:	00401ba1 	.word	0x00401ba1
  403b8c:	00401b99 	.word	0x00401b99
  403b90:	004008e1 	.word	0x004008e1

00403b94 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  403b94:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  403b96:	010b      	lsls	r3, r1, #4
  403b98:	4293      	cmp	r3, r2
  403b9a:	d90f      	bls.n	403bbc <usart_set_async_baudrate+0x28>
  403b9c:	e01c      	b.n	403bd8 <usart_set_async_baudrate+0x44>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
  403b9e:	f002 0207 	and.w	r2, r2, #7
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  403ba2:	6841      	ldr	r1, [r0, #4]
  403ba4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  403ba8:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  403baa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  403bae:	6202      	str	r2, [r0, #32]

	return 0;
  403bb0:	2000      	movs	r0, #0
  403bb2:	e01e      	b.n	403bf2 <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
  403bb4:	2001      	movs	r0, #1
  403bb6:	e01c      	b.n	403bf2 <usart_set_async_baudrate+0x5e>
  403bb8:	2001      	movs	r0, #1
  403bba:	e01a      	b.n	403bf2 <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403bbc:	00d2      	lsls	r2, r2, #3
  403bbe:	eb02 0253 	add.w	r2, r2, r3, lsr #1
  403bc2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  403bc6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403bc8:	1e5c      	subs	r4, r3, #1
  403bca:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403bce:	428c      	cmp	r4, r1
  403bd0:	d8f0      	bhi.n	403bb4 <usart_set_async_baudrate+0x20>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
  403bd2:	f002 0207 	and.w	r2, r2, #7
  403bd6:	e7e8      	b.n	403baa <usart_set_async_baudrate+0x16>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  403bd8:	00c9      	lsls	r1, r1, #3
  403bda:	00d2      	lsls	r2, r2, #3
  403bdc:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  403be0:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  403be4:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  403be6:	1e5c      	subs	r4, r3, #1
  403be8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  403bec:	428c      	cmp	r4, r1
  403bee:	d9d6      	bls.n	403b9e <usart_set_async_baudrate+0xa>
  403bf0:	e7e2      	b.n	403bb8 <usart_set_async_baudrate+0x24>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
  403bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
  403bf6:	4770      	bx	lr

00403bf8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  403bf8:	4b0a      	ldr	r3, [pc, #40]	; (403c24 <usart_reset+0x2c>)
  403bfa:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
  403bfe:	2300      	movs	r3, #0
  403c00:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  403c02:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  403c04:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  403c06:	2388      	movs	r3, #136	; 0x88
  403c08:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  403c0a:	2324      	movs	r3, #36	; 0x24
  403c0c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  403c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
  403c12:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  403c14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  403c18:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_DTRDIS;
  403c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  403c1e:	6003      	str	r3, [r0, #0]
  403c20:	4770      	bx	lr
  403c22:	bf00      	nop
  403c24:	55534100 	.word	0x55534100

00403c28 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
  403c28:	b570      	push	{r4, r5, r6, lr}
  403c2a:	4605      	mov	r5, r0
  403c2c:	460c      	mov	r4, r1
  403c2e:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
  403c30:	4b0f      	ldr	r3, [pc, #60]	; (403c70 <usart_init_rs232+0x48>)
  403c32:	4798      	blx	r3

	ul_reg_val = 0;
  403c34:	2200      	movs	r2, #0
  403c36:	4b0f      	ldr	r3, [pc, #60]	; (403c74 <usart_init_rs232+0x4c>)
  403c38:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  403c3a:	b19c      	cbz	r4, 403c64 <usart_init_rs232+0x3c>
  403c3c:	4628      	mov	r0, r5
  403c3e:	6821      	ldr	r1, [r4, #0]
  403c40:	4632      	mov	r2, r6
  403c42:	4b0d      	ldr	r3, [pc, #52]	; (403c78 <usart_init_rs232+0x50>)
  403c44:	4798      	blx	r3
  403c46:	4602      	mov	r2, r0
  403c48:	b970      	cbnz	r0, 403c68 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403c4a:	68a1      	ldr	r1, [r4, #8]
  403c4c:	6863      	ldr	r3, [r4, #4]
  403c4e:	4319      	orrs	r1, r3
  403c50:	6923      	ldr	r3, [r4, #16]
  403c52:	4319      	orrs	r1, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  403c54:	68e3      	ldr	r3, [r4, #12]
  403c56:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  403c58:	4906      	ldr	r1, [pc, #24]	; (403c74 <usart_init_rs232+0x4c>)
  403c5a:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
  403c5c:	6869      	ldr	r1, [r5, #4]
  403c5e:	430b      	orrs	r3, r1
  403c60:	606b      	str	r3, [r5, #4]

	return 0;
  403c62:	e002      	b.n	403c6a <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
  403c64:	2201      	movs	r2, #1
  403c66:	e000      	b.n	403c6a <usart_init_rs232+0x42>
  403c68:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
  403c6a:	4610      	mov	r0, r2
  403c6c:	bd70      	pop	{r4, r5, r6, pc}
  403c6e:	bf00      	nop
  403c70:	00403bf9 	.word	0x00403bf9
  403c74:	200015b8 	.word	0x200015b8
  403c78:	00403b95 	.word	0x00403b95

00403c7c <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  403c7c:	2340      	movs	r3, #64	; 0x40
  403c7e:	6003      	str	r3, [r0, #0]
  403c80:	4770      	bx	lr
  403c82:	bf00      	nop

00403c84 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  403c84:	2310      	movs	r3, #16
  403c86:	6003      	str	r3, [r0, #0]
  403c88:	4770      	bx	lr
  403c8a:	bf00      	nop

00403c8c <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
  403c8c:	6081      	str	r1, [r0, #8]
  403c8e:	4770      	bx	lr

00403c90 <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
  403c90:	60c1      	str	r1, [r0, #12]
  403c92:	4770      	bx	lr

00403c94 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
  403c94:	6940      	ldr	r0, [r0, #20]
}
  403c96:	4770      	bx	lr

00403c98 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  403c98:	6943      	ldr	r3, [r0, #20]
  403c9a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  403c9e:	bf1d      	ittte	ne
  403ca0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  403ca4:	61c1      	strne	r1, [r0, #28]
	return 0;
  403ca6:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  403ca8:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  403caa:	4770      	bx	lr

00403cac <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  403cac:	6943      	ldr	r3, [r0, #20]
  403cae:	f013 0f01 	tst.w	r3, #1
  403cb2:	d005      	beq.n	403cc0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  403cb4:	6983      	ldr	r3, [r0, #24]
  403cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  403cba:	600b      	str	r3, [r1, #0]

	return 0;
  403cbc:	2000      	movs	r0, #0
  403cbe:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  403cc0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  403cc2:	4770      	bx	lr

00403cc4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
  403cc4:	e7fe      	b.n	403cc4 <Dummy_Handler>
  403cc6:	bf00      	nop

00403cc8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403cc8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  403cca:	4b20      	ldr	r3, [pc, #128]	; (403d4c <Reset_Handler+0x84>)
  403ccc:	4a20      	ldr	r2, [pc, #128]	; (403d50 <Reset_Handler+0x88>)
  403cce:	429a      	cmp	r2, r3
  403cd0:	d913      	bls.n	403cfa <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  403cd2:	4b20      	ldr	r3, [pc, #128]	; (403d54 <Reset_Handler+0x8c>)
  403cd4:	4a1d      	ldr	r2, [pc, #116]	; (403d4c <Reset_Handler+0x84>)
  403cd6:	429a      	cmp	r2, r3
  403cd8:	d21f      	bcs.n	403d1a <Reset_Handler+0x52>
  403cda:	4611      	mov	r1, r2
  403cdc:	3204      	adds	r2, #4
  403cde:	3303      	adds	r3, #3
  403ce0:	1a9b      	subs	r3, r3, r2
  403ce2:	f023 0303 	bic.w	r3, r3, #3
  403ce6:	3304      	adds	r3, #4
  403ce8:	4a19      	ldr	r2, [pc, #100]	; (403d50 <Reset_Handler+0x88>)
  403cea:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  403cec:	f852 0b04 	ldr.w	r0, [r2], #4
  403cf0:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  403cf4:	429a      	cmp	r2, r3
  403cf6:	d1f9      	bne.n	403cec <Reset_Handler+0x24>
  403cf8:	e00f      	b.n	403d1a <Reset_Handler+0x52>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  403cfa:	4b14      	ldr	r3, [pc, #80]	; (403d4c <Reset_Handler+0x84>)
  403cfc:	4a14      	ldr	r2, [pc, #80]	; (403d50 <Reset_Handler+0x88>)
  403cfe:	429a      	cmp	r2, r3
  403d00:	d20b      	bcs.n	403d1a <Reset_Handler+0x52>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  403d02:	4b14      	ldr	r3, [pc, #80]	; (403d54 <Reset_Handler+0x8c>)
  403d04:	4a11      	ldr	r2, [pc, #68]	; (403d4c <Reset_Handler+0x84>)
  403d06:	1a9a      	subs	r2, r3, r2
  403d08:	4813      	ldr	r0, [pc, #76]	; (403d58 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  403d0a:	1881      	adds	r1, r0, r2
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  403d0c:	b12a      	cbz	r2, 403d1a <Reset_Handler+0x52>
			*pDest-- = *pSrc--;
  403d0e:	f851 2904 	ldr.w	r2, [r1], #-4
  403d12:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  403d16:	4281      	cmp	r1, r0
  403d18:	d1f9      	bne.n	403d0e <Reset_Handler+0x46>
  403d1a:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403d1c:	4b0f      	ldr	r3, [pc, #60]	; (403d5c <Reset_Handler+0x94>)
  403d1e:	4a10      	ldr	r2, [pc, #64]	; (403d60 <Reset_Handler+0x98>)
  403d20:	429a      	cmp	r2, r3
  403d22:	d20b      	bcs.n	403d3c <Reset_Handler+0x74>
  403d24:	1d13      	adds	r3, r2, #4
  403d26:	4a0f      	ldr	r2, [pc, #60]	; (403d64 <Reset_Handler+0x9c>)
  403d28:	1ad2      	subs	r2, r2, r3
  403d2a:	f022 0203 	bic.w	r2, r2, #3
  403d2e:	441a      	add	r2, r3
  403d30:	3b04      	subs	r3, #4
		*pDest++ = 0;
  403d32:	2100      	movs	r1, #0
  403d34:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403d38:	4293      	cmp	r3, r2
  403d3a:	d1fb      	bne.n	403d34 <Reset_Handler+0x6c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  403d3c:	4b0a      	ldr	r3, [pc, #40]	; (403d68 <Reset_Handler+0xa0>)
  403d3e:	4a0b      	ldr	r2, [pc, #44]	; (403d6c <Reset_Handler+0xa4>)
  403d40:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  403d42:	4b0b      	ldr	r3, [pc, #44]	; (403d70 <Reset_Handler+0xa8>)
  403d44:	4798      	blx	r3

	/* Branch to main function */
	main();
  403d46:	4b0b      	ldr	r3, [pc, #44]	; (403d74 <Reset_Handler+0xac>)
  403d48:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  403d4a:	e7fe      	b.n	403d4a <Reset_Handler+0x82>
  403d4c:	20000000 	.word	0x20000000
  403d50:	00404ff0 	.word	0x00404ff0
  403d54:	200008e4 	.word	0x200008e4
  403d58:	00404fec 	.word	0x00404fec
  403d5c:	20001628 	.word	0x20001628
  403d60:	200008e4 	.word	0x200008e4
  403d64:	2000162b 	.word	0x2000162b
  403d68:	e000ed00 	.word	0xe000ed00
  403d6c:	00400000 	.word	0x00400000
  403d70:	00403f61 	.word	0x00403f61
  403d74:	00400aa1 	.word	0x00400aa1

00403d78 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  403d78:	4b3d      	ldr	r3, [pc, #244]	; (403e70 <SystemCoreClockUpdate+0xf8>)
  403d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403d7c:	f003 0303 	and.w	r3, r3, #3
  403d80:	2b03      	cmp	r3, #3
  403d82:	d85d      	bhi.n	403e40 <SystemCoreClockUpdate+0xc8>
  403d84:	e8df f003 	tbb	[pc, r3]
  403d88:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  403d8c:	4b39      	ldr	r3, [pc, #228]	; (403e74 <SystemCoreClockUpdate+0xfc>)
  403d8e:	695b      	ldr	r3, [r3, #20]
  403d90:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403d94:	bf14      	ite	ne
  403d96:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403d9a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403d9e:	4b36      	ldr	r3, [pc, #216]	; (403e78 <SystemCoreClockUpdate+0x100>)
  403da0:	601a      	str	r2, [r3, #0]
  403da2:	e04d      	b.n	403e40 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403da4:	4b32      	ldr	r3, [pc, #200]	; (403e70 <SystemCoreClockUpdate+0xf8>)
  403da6:	6a1b      	ldr	r3, [r3, #32]
  403da8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403dac:	d003      	beq.n	403db6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  403dae:	4a33      	ldr	r2, [pc, #204]	; (403e7c <SystemCoreClockUpdate+0x104>)
  403db0:	4b31      	ldr	r3, [pc, #196]	; (403e78 <SystemCoreClockUpdate+0x100>)
  403db2:	601a      	str	r2, [r3, #0]
  403db4:	e044      	b.n	403e40 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403db6:	4a32      	ldr	r2, [pc, #200]	; (403e80 <SystemCoreClockUpdate+0x108>)
  403db8:	4b2f      	ldr	r3, [pc, #188]	; (403e78 <SystemCoreClockUpdate+0x100>)
  403dba:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403dbc:	4b2c      	ldr	r3, [pc, #176]	; (403e70 <SystemCoreClockUpdate+0xf8>)
  403dbe:	6a1b      	ldr	r3, [r3, #32]
  403dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403dc4:	2b10      	cmp	r3, #16
  403dc6:	d002      	beq.n	403dce <SystemCoreClockUpdate+0x56>
  403dc8:	2b20      	cmp	r3, #32
  403dca:	d004      	beq.n	403dd6 <SystemCoreClockUpdate+0x5e>
  403dcc:	e038      	b.n	403e40 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403dce:	4a2d      	ldr	r2, [pc, #180]	; (403e84 <SystemCoreClockUpdate+0x10c>)
  403dd0:	4b29      	ldr	r3, [pc, #164]	; (403e78 <SystemCoreClockUpdate+0x100>)
  403dd2:	601a      	str	r2, [r3, #0]
			break;
  403dd4:	e034      	b.n	403e40 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403dd6:	4a29      	ldr	r2, [pc, #164]	; (403e7c <SystemCoreClockUpdate+0x104>)
  403dd8:	4b27      	ldr	r3, [pc, #156]	; (403e78 <SystemCoreClockUpdate+0x100>)
  403dda:	601a      	str	r2, [r3, #0]
			break;
  403ddc:	e030      	b.n	403e40 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  403dde:	4b24      	ldr	r3, [pc, #144]	; (403e70 <SystemCoreClockUpdate+0xf8>)
  403de0:	6a1b      	ldr	r3, [r3, #32]
  403de2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403de6:	d003      	beq.n	403df0 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  403de8:	4a24      	ldr	r2, [pc, #144]	; (403e7c <SystemCoreClockUpdate+0x104>)
  403dea:	4b23      	ldr	r3, [pc, #140]	; (403e78 <SystemCoreClockUpdate+0x100>)
  403dec:	601a      	str	r2, [r3, #0]
  403dee:	e012      	b.n	403e16 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403df0:	4a23      	ldr	r2, [pc, #140]	; (403e80 <SystemCoreClockUpdate+0x108>)
  403df2:	4b21      	ldr	r3, [pc, #132]	; (403e78 <SystemCoreClockUpdate+0x100>)
  403df4:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  403df6:	4b1e      	ldr	r3, [pc, #120]	; (403e70 <SystemCoreClockUpdate+0xf8>)
  403df8:	6a1b      	ldr	r3, [r3, #32]
  403dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403dfe:	2b10      	cmp	r3, #16
  403e00:	d002      	beq.n	403e08 <SystemCoreClockUpdate+0x90>
  403e02:	2b20      	cmp	r3, #32
  403e04:	d004      	beq.n	403e10 <SystemCoreClockUpdate+0x98>
  403e06:	e006      	b.n	403e16 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  403e08:	4a1e      	ldr	r2, [pc, #120]	; (403e84 <SystemCoreClockUpdate+0x10c>)
  403e0a:	4b1b      	ldr	r3, [pc, #108]	; (403e78 <SystemCoreClockUpdate+0x100>)
  403e0c:	601a      	str	r2, [r3, #0]
					break;
  403e0e:	e002      	b.n	403e16 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  403e10:	4a1a      	ldr	r2, [pc, #104]	; (403e7c <SystemCoreClockUpdate+0x104>)
  403e12:	4b19      	ldr	r3, [pc, #100]	; (403e78 <SystemCoreClockUpdate+0x100>)
  403e14:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  403e16:	4b16      	ldr	r3, [pc, #88]	; (403e70 <SystemCoreClockUpdate+0xf8>)
  403e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403e1a:	f003 0303 	and.w	r3, r3, #3
  403e1e:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403e20:	4a13      	ldr	r2, [pc, #76]	; (403e70 <SystemCoreClockUpdate+0xf8>)
  403e22:	bf07      	ittee	eq
  403e24:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  403e26:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403e28:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403e2a:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  403e2c:	4812      	ldr	r0, [pc, #72]	; (403e78 <SystemCoreClockUpdate+0x100>)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  403e2e:	f3c3 410a 	ubfx	r1, r3, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  403e32:	6803      	ldr	r3, [r0, #0]
  403e34:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
  403e38:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  403e3a:	fbb3 f3f2 	udiv	r3, r3, r2
  403e3e:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  403e40:	4b0b      	ldr	r3, [pc, #44]	; (403e70 <SystemCoreClockUpdate+0xf8>)
  403e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403e48:	2b70      	cmp	r3, #112	; 0x70
  403e4a:	d107      	bne.n	403e5c <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  403e4c:	4a0a      	ldr	r2, [pc, #40]	; (403e78 <SystemCoreClockUpdate+0x100>)
  403e4e:	6813      	ldr	r3, [r2, #0]
  403e50:	490d      	ldr	r1, [pc, #52]	; (403e88 <SystemCoreClockUpdate+0x110>)
  403e52:	fba1 1303 	umull	r1, r3, r1, r3
  403e56:	085b      	lsrs	r3, r3, #1
  403e58:	6013      	str	r3, [r2, #0]
  403e5a:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403e5c:	4b04      	ldr	r3, [pc, #16]	; (403e70 <SystemCoreClockUpdate+0xf8>)
  403e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  403e60:	4905      	ldr	r1, [pc, #20]	; (403e78 <SystemCoreClockUpdate+0x100>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  403e62:	f3c2 1202 	ubfx	r2, r2, #4, #3
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  403e66:	680b      	ldr	r3, [r1, #0]
  403e68:	40d3      	lsrs	r3, r2
  403e6a:	600b      	str	r3, [r1, #0]
  403e6c:	4770      	bx	lr
  403e6e:	bf00      	nop
  403e70:	400e0400 	.word	0x400e0400
  403e74:	400e1410 	.word	0x400e1410
  403e78:	200000a4 	.word	0x200000a4
  403e7c:	00b71b00 	.word	0x00b71b00
  403e80:	003d0900 	.word	0x003d0900
  403e84:	007a1200 	.word	0x007a1200
  403e88:	aaaaaaab 	.word	0xaaaaaaab

00403e8c <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  403e8c:	4b12      	ldr	r3, [pc, #72]	; (403ed8 <system_init_flash+0x4c>)
  403e8e:	4298      	cmp	r0, r3
  403e90:	d804      	bhi.n	403e9c <system_init_flash+0x10>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403e92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403e96:	4b11      	ldr	r3, [pc, #68]	; (403edc <system_init_flash+0x50>)
  403e98:	601a      	str	r2, [r3, #0]
  403e9a:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  403e9c:	4b10      	ldr	r3, [pc, #64]	; (403ee0 <system_init_flash+0x54>)
  403e9e:	4298      	cmp	r0, r3
  403ea0:	d803      	bhi.n	403eaa <system_init_flash+0x1e>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403ea2:	4a10      	ldr	r2, [pc, #64]	; (403ee4 <system_init_flash+0x58>)
  403ea4:	4b0d      	ldr	r3, [pc, #52]	; (403edc <system_init_flash+0x50>)
  403ea6:	601a      	str	r2, [r3, #0]
  403ea8:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  403eaa:	4b0f      	ldr	r3, [pc, #60]	; (403ee8 <system_init_flash+0x5c>)
  403eac:	4298      	cmp	r0, r3
  403eae:	d803      	bhi.n	403eb8 <system_init_flash+0x2c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403eb0:	4a0e      	ldr	r2, [pc, #56]	; (403eec <system_init_flash+0x60>)
  403eb2:	4b0a      	ldr	r3, [pc, #40]	; (403edc <system_init_flash+0x50>)
  403eb4:	601a      	str	r2, [r3, #0]
  403eb6:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  403eb8:	4b0d      	ldr	r3, [pc, #52]	; (403ef0 <system_init_flash+0x64>)
  403eba:	4298      	cmp	r0, r3
  403ebc:	d803      	bhi.n	403ec6 <system_init_flash+0x3a>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  403ebe:	4a0d      	ldr	r2, [pc, #52]	; (403ef4 <system_init_flash+0x68>)
  403ec0:	4b06      	ldr	r3, [pc, #24]	; (403edc <system_init_flash+0x50>)
  403ec2:	601a      	str	r2, [r3, #0]
  403ec4:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  403ec6:	4b0c      	ldr	r3, [pc, #48]	; (403ef8 <system_init_flash+0x6c>)
  403ec8:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403eca:	bf94      	ite	ls
  403ecc:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  403ed0:	4a0a      	ldrhi	r2, [pc, #40]	; (403efc <system_init_flash+0x70>)
  403ed2:	4b02      	ldr	r3, [pc, #8]	; (403edc <system_init_flash+0x50>)
  403ed4:	601a      	str	r2, [r3, #0]
  403ed6:	4770      	bx	lr
  403ed8:	01312cff 	.word	0x01312cff
  403edc:	400e0a00 	.word	0x400e0a00
  403ee0:	026259ff 	.word	0x026259ff
  403ee4:	04000100 	.word	0x04000100
  403ee8:	039386ff 	.word	0x039386ff
  403eec:	04000200 	.word	0x04000200
  403ef0:	04c4b3ff 	.word	0x04c4b3ff
  403ef4:	04000300 	.word	0x04000300
  403ef8:	05f5e0ff 	.word	0x05f5e0ff
  403efc:	04000500 	.word	0x04000500

00403f00 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  403f00:	4b09      	ldr	r3, [pc, #36]	; (403f28 <_sbrk+0x28>)
  403f02:	681b      	ldr	r3, [r3, #0]
  403f04:	b913      	cbnz	r3, 403f0c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  403f06:	4a09      	ldr	r2, [pc, #36]	; (403f2c <_sbrk+0x2c>)
  403f08:	4b07      	ldr	r3, [pc, #28]	; (403f28 <_sbrk+0x28>)
  403f0a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  403f0c:	4b06      	ldr	r3, [pc, #24]	; (403f28 <_sbrk+0x28>)
  403f0e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  403f10:	181a      	adds	r2, r3, r0
  403f12:	4907      	ldr	r1, [pc, #28]	; (403f30 <_sbrk+0x30>)
  403f14:	4291      	cmp	r1, r2
  403f16:	db04      	blt.n	403f22 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  403f18:	4610      	mov	r0, r2
  403f1a:	4a03      	ldr	r2, [pc, #12]	; (403f28 <_sbrk+0x28>)
  403f1c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  403f1e:	4618      	mov	r0, r3
  403f20:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  403f22:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  403f26:	4770      	bx	lr
  403f28:	200015bc 	.word	0x200015bc
  403f2c:	20004628 	.word	0x20004628
  403f30:	2001fffc 	.word	0x2001fffc

00403f34 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  403f34:	f04f 30ff 	mov.w	r0, #4294967295
  403f38:	4770      	bx	lr
  403f3a:	bf00      	nop

00403f3c <_lseek>:
}

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  403f3c:	2000      	movs	r0, #0
  403f3e:	4770      	bx	lr

00403f40 <__aeabi_atexit>:
  403f40:	4603      	mov	r3, r0
  403f42:	4608      	mov	r0, r1
  403f44:	4619      	mov	r1, r3
  403f46:	f000 b801 	b.w	403f4c <__cxa_atexit>
  403f4a:	bf00      	nop

00403f4c <__cxa_atexit>:
  403f4c:	b410      	push	{r4}
  403f4e:	460c      	mov	r4, r1
  403f50:	4613      	mov	r3, r2
  403f52:	4601      	mov	r1, r0
  403f54:	4622      	mov	r2, r4
  403f56:	2002      	movs	r0, #2
  403f58:	f85d 4b04 	ldr.w	r4, [sp], #4
  403f5c:	f000 bbec 	b.w	404738 <__register_exitproc>

00403f60 <__libc_init_array>:
  403f60:	b570      	push	{r4, r5, r6, lr}
  403f62:	4e0f      	ldr	r6, [pc, #60]	; (403fa0 <__libc_init_array+0x40>)
  403f64:	4d0f      	ldr	r5, [pc, #60]	; (403fa4 <__libc_init_array+0x44>)
  403f66:	1b76      	subs	r6, r6, r5
  403f68:	10b6      	asrs	r6, r6, #2
  403f6a:	bf18      	it	ne
  403f6c:	2400      	movne	r4, #0
  403f6e:	d005      	beq.n	403f7c <__libc_init_array+0x1c>
  403f70:	3401      	adds	r4, #1
  403f72:	f855 3b04 	ldr.w	r3, [r5], #4
  403f76:	4798      	blx	r3
  403f78:	42a6      	cmp	r6, r4
  403f7a:	d1f9      	bne.n	403f70 <__libc_init_array+0x10>
  403f7c:	4e0a      	ldr	r6, [pc, #40]	; (403fa8 <__libc_init_array+0x48>)
  403f7e:	4d0b      	ldr	r5, [pc, #44]	; (403fac <__libc_init_array+0x4c>)
  403f80:	1b76      	subs	r6, r6, r5
  403f82:	f001 f819 	bl	404fb8 <_init>
  403f86:	10b6      	asrs	r6, r6, #2
  403f88:	bf18      	it	ne
  403f8a:	2400      	movne	r4, #0
  403f8c:	d006      	beq.n	403f9c <__libc_init_array+0x3c>
  403f8e:	3401      	adds	r4, #1
  403f90:	f855 3b04 	ldr.w	r3, [r5], #4
  403f94:	4798      	blx	r3
  403f96:	42a6      	cmp	r6, r4
  403f98:	d1f9      	bne.n	403f8e <__libc_init_array+0x2e>
  403f9a:	bd70      	pop	{r4, r5, r6, pc}
  403f9c:	bd70      	pop	{r4, r5, r6, pc}
  403f9e:	bf00      	nop
  403fa0:	00404fc4 	.word	0x00404fc4
  403fa4:	00404fc4 	.word	0x00404fc4
  403fa8:	00404fd8 	.word	0x00404fd8
  403fac:	00404fc4 	.word	0x00404fc4

00403fb0 <malloc>:
  403fb0:	4b02      	ldr	r3, [pc, #8]	; (403fbc <malloc+0xc>)
  403fb2:	4601      	mov	r1, r0
  403fb4:	6818      	ldr	r0, [r3, #0]
  403fb6:	f000 b803 	b.w	403fc0 <_malloc_r>
  403fba:	bf00      	nop
  403fbc:	200004d0 	.word	0x200004d0

00403fc0 <_malloc_r>:
  403fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403fc4:	f101 050b 	add.w	r5, r1, #11
  403fc8:	2d16      	cmp	r5, #22
  403fca:	b083      	sub	sp, #12
  403fcc:	4606      	mov	r6, r0
  403fce:	d927      	bls.n	404020 <_malloc_r+0x60>
  403fd0:	f035 0507 	bics.w	r5, r5, #7
  403fd4:	f100 80b6 	bmi.w	404144 <_malloc_r+0x184>
  403fd8:	42a9      	cmp	r1, r5
  403fda:	f200 80b3 	bhi.w	404144 <_malloc_r+0x184>
  403fde:	f000 facf 	bl	404580 <__malloc_lock>
  403fe2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  403fe6:	d222      	bcs.n	40402e <_malloc_r+0x6e>
  403fe8:	4fc2      	ldr	r7, [pc, #776]	; (4042f4 <_malloc_r+0x334>)
  403fea:	08e8      	lsrs	r0, r5, #3
  403fec:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
  403ff0:	68dc      	ldr	r4, [r3, #12]
  403ff2:	429c      	cmp	r4, r3
  403ff4:	f000 81c8 	beq.w	404388 <_malloc_r+0x3c8>
  403ff8:	6863      	ldr	r3, [r4, #4]
  403ffa:	68e1      	ldr	r1, [r4, #12]
  403ffc:	68a5      	ldr	r5, [r4, #8]
  403ffe:	f023 0303 	bic.w	r3, r3, #3
  404002:	4423      	add	r3, r4
  404004:	4630      	mov	r0, r6
  404006:	685a      	ldr	r2, [r3, #4]
  404008:	60e9      	str	r1, [r5, #12]
  40400a:	f042 0201 	orr.w	r2, r2, #1
  40400e:	608d      	str	r5, [r1, #8]
  404010:	605a      	str	r2, [r3, #4]
  404012:	f000 fab7 	bl	404584 <__malloc_unlock>
  404016:	3408      	adds	r4, #8
  404018:	4620      	mov	r0, r4
  40401a:	b003      	add	sp, #12
  40401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404020:	2910      	cmp	r1, #16
  404022:	f200 808f 	bhi.w	404144 <_malloc_r+0x184>
  404026:	f000 faab 	bl	404580 <__malloc_lock>
  40402a:	2510      	movs	r5, #16
  40402c:	e7dc      	b.n	403fe8 <_malloc_r+0x28>
  40402e:	0a68      	lsrs	r0, r5, #9
  404030:	f000 808f 	beq.w	404152 <_malloc_r+0x192>
  404034:	2804      	cmp	r0, #4
  404036:	f200 8154 	bhi.w	4042e2 <_malloc_r+0x322>
  40403a:	09a8      	lsrs	r0, r5, #6
  40403c:	3038      	adds	r0, #56	; 0x38
  40403e:	0041      	lsls	r1, r0, #1
  404040:	4fac      	ldr	r7, [pc, #688]	; (4042f4 <_malloc_r+0x334>)
  404042:	eb07 0181 	add.w	r1, r7, r1, lsl #2
  404046:	68cc      	ldr	r4, [r1, #12]
  404048:	42a1      	cmp	r1, r4
  40404a:	d106      	bne.n	40405a <_malloc_r+0x9a>
  40404c:	e00c      	b.n	404068 <_malloc_r+0xa8>
  40404e:	2a00      	cmp	r2, #0
  404050:	f280 8082 	bge.w	404158 <_malloc_r+0x198>
  404054:	68e4      	ldr	r4, [r4, #12]
  404056:	42a1      	cmp	r1, r4
  404058:	d006      	beq.n	404068 <_malloc_r+0xa8>
  40405a:	6863      	ldr	r3, [r4, #4]
  40405c:	f023 0303 	bic.w	r3, r3, #3
  404060:	1b5a      	subs	r2, r3, r5
  404062:	2a0f      	cmp	r2, #15
  404064:	ddf3      	ble.n	40404e <_malloc_r+0x8e>
  404066:	3801      	subs	r0, #1
  404068:	3001      	adds	r0, #1
  40406a:	49a2      	ldr	r1, [pc, #648]	; (4042f4 <_malloc_r+0x334>)
  40406c:	693c      	ldr	r4, [r7, #16]
  40406e:	f101 0e08 	add.w	lr, r1, #8
  404072:	4574      	cmp	r4, lr
  404074:	f000 817d 	beq.w	404372 <_malloc_r+0x3b2>
  404078:	6863      	ldr	r3, [r4, #4]
  40407a:	f023 0303 	bic.w	r3, r3, #3
  40407e:	1b5a      	subs	r2, r3, r5
  404080:	2a0f      	cmp	r2, #15
  404082:	f300 8163 	bgt.w	40434c <_malloc_r+0x38c>
  404086:	2a00      	cmp	r2, #0
  404088:	f8c1 e014 	str.w	lr, [r1, #20]
  40408c:	f8c1 e010 	str.w	lr, [r1, #16]
  404090:	da73      	bge.n	40417a <_malloc_r+0x1ba>
  404092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404096:	f080 8139 	bcs.w	40430c <_malloc_r+0x34c>
  40409a:	08db      	lsrs	r3, r3, #3
  40409c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
  4040a0:	ea4f 0ca3 	mov.w	ip, r3, asr #2
  4040a4:	684a      	ldr	r2, [r1, #4]
  4040a6:	f8d8 9008 	ldr.w	r9, [r8, #8]
  4040aa:	f8c4 9008 	str.w	r9, [r4, #8]
  4040ae:	2301      	movs	r3, #1
  4040b0:	fa03 f30c 	lsl.w	r3, r3, ip
  4040b4:	4313      	orrs	r3, r2
  4040b6:	f8c4 800c 	str.w	r8, [r4, #12]
  4040ba:	604b      	str	r3, [r1, #4]
  4040bc:	f8c8 4008 	str.w	r4, [r8, #8]
  4040c0:	f8c9 400c 	str.w	r4, [r9, #12]
  4040c4:	1082      	asrs	r2, r0, #2
  4040c6:	2401      	movs	r4, #1
  4040c8:	4094      	lsls	r4, r2
  4040ca:	429c      	cmp	r4, r3
  4040cc:	d862      	bhi.n	404194 <_malloc_r+0x1d4>
  4040ce:	4223      	tst	r3, r4
  4040d0:	d106      	bne.n	4040e0 <_malloc_r+0x120>
  4040d2:	f020 0003 	bic.w	r0, r0, #3
  4040d6:	0064      	lsls	r4, r4, #1
  4040d8:	4223      	tst	r3, r4
  4040da:	f100 0004 	add.w	r0, r0, #4
  4040de:	d0fa      	beq.n	4040d6 <_malloc_r+0x116>
  4040e0:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
  4040e4:	46c4      	mov	ip, r8
  4040e6:	4681      	mov	r9, r0
  4040e8:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4040ec:	459c      	cmp	ip, r3
  4040ee:	d107      	bne.n	404100 <_malloc_r+0x140>
  4040f0:	e141      	b.n	404376 <_malloc_r+0x3b6>
  4040f2:	2900      	cmp	r1, #0
  4040f4:	f280 8151 	bge.w	40439a <_malloc_r+0x3da>
  4040f8:	68db      	ldr	r3, [r3, #12]
  4040fa:	459c      	cmp	ip, r3
  4040fc:	f000 813b 	beq.w	404376 <_malloc_r+0x3b6>
  404100:	685a      	ldr	r2, [r3, #4]
  404102:	f022 0203 	bic.w	r2, r2, #3
  404106:	1b51      	subs	r1, r2, r5
  404108:	290f      	cmp	r1, #15
  40410a:	ddf2      	ble.n	4040f2 <_malloc_r+0x132>
  40410c:	461c      	mov	r4, r3
  40410e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404112:	f854 8f08 	ldr.w	r8, [r4, #8]!
  404116:	195a      	adds	r2, r3, r5
  404118:	f045 0901 	orr.w	r9, r5, #1
  40411c:	f041 0501 	orr.w	r5, r1, #1
  404120:	f8c3 9004 	str.w	r9, [r3, #4]
  404124:	4630      	mov	r0, r6
  404126:	f8c8 c00c 	str.w	ip, [r8, #12]
  40412a:	f8cc 8008 	str.w	r8, [ip, #8]
  40412e:	617a      	str	r2, [r7, #20]
  404130:	613a      	str	r2, [r7, #16]
  404132:	f8c2 e00c 	str.w	lr, [r2, #12]
  404136:	f8c2 e008 	str.w	lr, [r2, #8]
  40413a:	6055      	str	r5, [r2, #4]
  40413c:	5051      	str	r1, [r2, r1]
  40413e:	f000 fa21 	bl	404584 <__malloc_unlock>
  404142:	e769      	b.n	404018 <_malloc_r+0x58>
  404144:	2400      	movs	r4, #0
  404146:	230c      	movs	r3, #12
  404148:	4620      	mov	r0, r4
  40414a:	6033      	str	r3, [r6, #0]
  40414c:	b003      	add	sp, #12
  40414e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404152:	217e      	movs	r1, #126	; 0x7e
  404154:	203f      	movs	r0, #63	; 0x3f
  404156:	e773      	b.n	404040 <_malloc_r+0x80>
  404158:	4423      	add	r3, r4
  40415a:	68e1      	ldr	r1, [r4, #12]
  40415c:	685a      	ldr	r2, [r3, #4]
  40415e:	68a5      	ldr	r5, [r4, #8]
  404160:	f042 0201 	orr.w	r2, r2, #1
  404164:	60e9      	str	r1, [r5, #12]
  404166:	4630      	mov	r0, r6
  404168:	608d      	str	r5, [r1, #8]
  40416a:	605a      	str	r2, [r3, #4]
  40416c:	f000 fa0a 	bl	404584 <__malloc_unlock>
  404170:	3408      	adds	r4, #8
  404172:	4620      	mov	r0, r4
  404174:	b003      	add	sp, #12
  404176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40417a:	4423      	add	r3, r4
  40417c:	4630      	mov	r0, r6
  40417e:	685a      	ldr	r2, [r3, #4]
  404180:	f042 0201 	orr.w	r2, r2, #1
  404184:	605a      	str	r2, [r3, #4]
  404186:	f000 f9fd 	bl	404584 <__malloc_unlock>
  40418a:	3408      	adds	r4, #8
  40418c:	4620      	mov	r0, r4
  40418e:	b003      	add	sp, #12
  404190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404194:	68bc      	ldr	r4, [r7, #8]
  404196:	6863      	ldr	r3, [r4, #4]
  404198:	f023 0803 	bic.w	r8, r3, #3
  40419c:	4545      	cmp	r5, r8
  40419e:	d804      	bhi.n	4041aa <_malloc_r+0x1ea>
  4041a0:	ebc5 0308 	rsb	r3, r5, r8
  4041a4:	2b0f      	cmp	r3, #15
  4041a6:	f300 808c 	bgt.w	4042c2 <_malloc_r+0x302>
  4041aa:	4b53      	ldr	r3, [pc, #332]	; (4042f8 <_malloc_r+0x338>)
  4041ac:	f8df a158 	ldr.w	sl, [pc, #344]	; 404308 <_malloc_r+0x348>
  4041b0:	681a      	ldr	r2, [r3, #0]
  4041b2:	f8da 3000 	ldr.w	r3, [sl]
  4041b6:	3301      	adds	r3, #1
  4041b8:	442a      	add	r2, r5
  4041ba:	eb04 0b08 	add.w	fp, r4, r8
  4041be:	f000 8150 	beq.w	404462 <_malloc_r+0x4a2>
  4041c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  4041c6:	320f      	adds	r2, #15
  4041c8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  4041cc:	f022 020f 	bic.w	r2, r2, #15
  4041d0:	4611      	mov	r1, r2
  4041d2:	4630      	mov	r0, r6
  4041d4:	9201      	str	r2, [sp, #4]
  4041d6:	f000 f9d7 	bl	404588 <_sbrk_r>
  4041da:	f1b0 3fff 	cmp.w	r0, #4294967295
  4041de:	4681      	mov	r9, r0
  4041e0:	9a01      	ldr	r2, [sp, #4]
  4041e2:	f000 8147 	beq.w	404474 <_malloc_r+0x4b4>
  4041e6:	4583      	cmp	fp, r0
  4041e8:	f200 80ee 	bhi.w	4043c8 <_malloc_r+0x408>
  4041ec:	4b43      	ldr	r3, [pc, #268]	; (4042fc <_malloc_r+0x33c>)
  4041ee:	6819      	ldr	r1, [r3, #0]
  4041f0:	45cb      	cmp	fp, r9
  4041f2:	4411      	add	r1, r2
  4041f4:	6019      	str	r1, [r3, #0]
  4041f6:	f000 8142 	beq.w	40447e <_malloc_r+0x4be>
  4041fa:	f8da 0000 	ldr.w	r0, [sl]
  4041fe:	f8df e108 	ldr.w	lr, [pc, #264]	; 404308 <_malloc_r+0x348>
  404202:	3001      	adds	r0, #1
  404204:	bf1b      	ittet	ne
  404206:	ebcb 0b09 	rsbne	fp, fp, r9
  40420a:	4459      	addne	r1, fp
  40420c:	f8ce 9000 	streq.w	r9, [lr]
  404210:	6019      	strne	r1, [r3, #0]
  404212:	f019 0107 	ands.w	r1, r9, #7
  404216:	f000 8107 	beq.w	404428 <_malloc_r+0x468>
  40421a:	f1c1 0008 	rsb	r0, r1, #8
  40421e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404222:	4481      	add	r9, r0
  404224:	3108      	adds	r1, #8
  404226:	444a      	add	r2, r9
  404228:	f3c2 020b 	ubfx	r2, r2, #0, #12
  40422c:	ebc2 0a01 	rsb	sl, r2, r1
  404230:	4651      	mov	r1, sl
  404232:	4630      	mov	r0, r6
  404234:	9301      	str	r3, [sp, #4]
  404236:	f000 f9a7 	bl	404588 <_sbrk_r>
  40423a:	1c43      	adds	r3, r0, #1
  40423c:	9b01      	ldr	r3, [sp, #4]
  40423e:	f000 812c 	beq.w	40449a <_malloc_r+0x4da>
  404242:	ebc9 0200 	rsb	r2, r9, r0
  404246:	4452      	add	r2, sl
  404248:	f042 0201 	orr.w	r2, r2, #1
  40424c:	6819      	ldr	r1, [r3, #0]
  40424e:	f8c7 9008 	str.w	r9, [r7, #8]
  404252:	4451      	add	r1, sl
  404254:	42bc      	cmp	r4, r7
  404256:	f8c9 2004 	str.w	r2, [r9, #4]
  40425a:	6019      	str	r1, [r3, #0]
  40425c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4042fc <_malloc_r+0x33c>
  404260:	d016      	beq.n	404290 <_malloc_r+0x2d0>
  404262:	f1b8 0f0f 	cmp.w	r8, #15
  404266:	f240 80ee 	bls.w	404446 <_malloc_r+0x486>
  40426a:	6862      	ldr	r2, [r4, #4]
  40426c:	f1a8 030c 	sub.w	r3, r8, #12
  404270:	f023 0307 	bic.w	r3, r3, #7
  404274:	18e0      	adds	r0, r4, r3
  404276:	f002 0201 	and.w	r2, r2, #1
  40427a:	f04f 0e05 	mov.w	lr, #5
  40427e:	431a      	orrs	r2, r3
  404280:	2b0f      	cmp	r3, #15
  404282:	6062      	str	r2, [r4, #4]
  404284:	f8c0 e004 	str.w	lr, [r0, #4]
  404288:	f8c0 e008 	str.w	lr, [r0, #8]
  40428c:	f200 8109 	bhi.w	4044a2 <_malloc_r+0x4e2>
  404290:	4b1b      	ldr	r3, [pc, #108]	; (404300 <_malloc_r+0x340>)
  404292:	68bc      	ldr	r4, [r7, #8]
  404294:	681a      	ldr	r2, [r3, #0]
  404296:	4291      	cmp	r1, r2
  404298:	bf88      	it	hi
  40429a:	6019      	strhi	r1, [r3, #0]
  40429c:	4b19      	ldr	r3, [pc, #100]	; (404304 <_malloc_r+0x344>)
  40429e:	681a      	ldr	r2, [r3, #0]
  4042a0:	4291      	cmp	r1, r2
  4042a2:	6862      	ldr	r2, [r4, #4]
  4042a4:	bf88      	it	hi
  4042a6:	6019      	strhi	r1, [r3, #0]
  4042a8:	f022 0203 	bic.w	r2, r2, #3
  4042ac:	4295      	cmp	r5, r2
  4042ae:	eba2 0305 	sub.w	r3, r2, r5
  4042b2:	d801      	bhi.n	4042b8 <_malloc_r+0x2f8>
  4042b4:	2b0f      	cmp	r3, #15
  4042b6:	dc04      	bgt.n	4042c2 <_malloc_r+0x302>
  4042b8:	4630      	mov	r0, r6
  4042ba:	f000 f963 	bl	404584 <__malloc_unlock>
  4042be:	2400      	movs	r4, #0
  4042c0:	e6aa      	b.n	404018 <_malloc_r+0x58>
  4042c2:	1962      	adds	r2, r4, r5
  4042c4:	f043 0301 	orr.w	r3, r3, #1
  4042c8:	f045 0501 	orr.w	r5, r5, #1
  4042cc:	6065      	str	r5, [r4, #4]
  4042ce:	4630      	mov	r0, r6
  4042d0:	60ba      	str	r2, [r7, #8]
  4042d2:	6053      	str	r3, [r2, #4]
  4042d4:	f000 f956 	bl	404584 <__malloc_unlock>
  4042d8:	3408      	adds	r4, #8
  4042da:	4620      	mov	r0, r4
  4042dc:	b003      	add	sp, #12
  4042de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042e2:	2814      	cmp	r0, #20
  4042e4:	d968      	bls.n	4043b8 <_malloc_r+0x3f8>
  4042e6:	2854      	cmp	r0, #84	; 0x54
  4042e8:	f200 8097 	bhi.w	40441a <_malloc_r+0x45a>
  4042ec:	0b28      	lsrs	r0, r5, #12
  4042ee:	306e      	adds	r0, #110	; 0x6e
  4042f0:	0041      	lsls	r1, r0, #1
  4042f2:	e6a5      	b.n	404040 <_malloc_r+0x80>
  4042f4:	200004d4 	.word	0x200004d4
  4042f8:	200015c8 	.word	0x200015c8
  4042fc:	200015cc 	.word	0x200015cc
  404300:	200015c4 	.word	0x200015c4
  404304:	200015c0 	.word	0x200015c0
  404308:	200008e0 	.word	0x200008e0
  40430c:	0a5a      	lsrs	r2, r3, #9
  40430e:	2a04      	cmp	r2, #4
  404310:	d955      	bls.n	4043be <_malloc_r+0x3fe>
  404312:	2a14      	cmp	r2, #20
  404314:	f200 80a7 	bhi.w	404466 <_malloc_r+0x4a6>
  404318:	325b      	adds	r2, #91	; 0x5b
  40431a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  40431e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
  404322:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 4044e0 <_malloc_r+0x520>
  404326:	f8dc 1008 	ldr.w	r1, [ip, #8]
  40432a:	4561      	cmp	r1, ip
  40432c:	d07f      	beq.n	40442e <_malloc_r+0x46e>
  40432e:	684a      	ldr	r2, [r1, #4]
  404330:	f022 0203 	bic.w	r2, r2, #3
  404334:	4293      	cmp	r3, r2
  404336:	d202      	bcs.n	40433e <_malloc_r+0x37e>
  404338:	6889      	ldr	r1, [r1, #8]
  40433a:	458c      	cmp	ip, r1
  40433c:	d1f7      	bne.n	40432e <_malloc_r+0x36e>
  40433e:	68ca      	ldr	r2, [r1, #12]
  404340:	687b      	ldr	r3, [r7, #4]
  404342:	60e2      	str	r2, [r4, #12]
  404344:	60a1      	str	r1, [r4, #8]
  404346:	6094      	str	r4, [r2, #8]
  404348:	60cc      	str	r4, [r1, #12]
  40434a:	e6bb      	b.n	4040c4 <_malloc_r+0x104>
  40434c:	1963      	adds	r3, r4, r5
  40434e:	f042 0701 	orr.w	r7, r2, #1
  404352:	f045 0501 	orr.w	r5, r5, #1
  404356:	6065      	str	r5, [r4, #4]
  404358:	4630      	mov	r0, r6
  40435a:	614b      	str	r3, [r1, #20]
  40435c:	610b      	str	r3, [r1, #16]
  40435e:	f8c3 e00c 	str.w	lr, [r3, #12]
  404362:	f8c3 e008 	str.w	lr, [r3, #8]
  404366:	605f      	str	r7, [r3, #4]
  404368:	509a      	str	r2, [r3, r2]
  40436a:	3408      	adds	r4, #8
  40436c:	f000 f90a 	bl	404584 <__malloc_unlock>
  404370:	e652      	b.n	404018 <_malloc_r+0x58>
  404372:	684b      	ldr	r3, [r1, #4]
  404374:	e6a6      	b.n	4040c4 <_malloc_r+0x104>
  404376:	f109 0901 	add.w	r9, r9, #1
  40437a:	f019 0f03 	tst.w	r9, #3
  40437e:	f10c 0c08 	add.w	ip, ip, #8
  404382:	f47f aeb1 	bne.w	4040e8 <_malloc_r+0x128>
  404386:	e02c      	b.n	4043e2 <_malloc_r+0x422>
  404388:	f104 0308 	add.w	r3, r4, #8
  40438c:	6964      	ldr	r4, [r4, #20]
  40438e:	42a3      	cmp	r3, r4
  404390:	bf08      	it	eq
  404392:	3002      	addeq	r0, #2
  404394:	f43f ae69 	beq.w	40406a <_malloc_r+0xaa>
  404398:	e62e      	b.n	403ff8 <_malloc_r+0x38>
  40439a:	441a      	add	r2, r3
  40439c:	461c      	mov	r4, r3
  40439e:	6851      	ldr	r1, [r2, #4]
  4043a0:	68db      	ldr	r3, [r3, #12]
  4043a2:	f854 5f08 	ldr.w	r5, [r4, #8]!
  4043a6:	f041 0101 	orr.w	r1, r1, #1
  4043aa:	6051      	str	r1, [r2, #4]
  4043ac:	4630      	mov	r0, r6
  4043ae:	60eb      	str	r3, [r5, #12]
  4043b0:	609d      	str	r5, [r3, #8]
  4043b2:	f000 f8e7 	bl	404584 <__malloc_unlock>
  4043b6:	e62f      	b.n	404018 <_malloc_r+0x58>
  4043b8:	305b      	adds	r0, #91	; 0x5b
  4043ba:	0041      	lsls	r1, r0, #1
  4043bc:	e640      	b.n	404040 <_malloc_r+0x80>
  4043be:	099a      	lsrs	r2, r3, #6
  4043c0:	3238      	adds	r2, #56	; 0x38
  4043c2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4043c6:	e7aa      	b.n	40431e <_malloc_r+0x35e>
  4043c8:	42bc      	cmp	r4, r7
  4043ca:	4b45      	ldr	r3, [pc, #276]	; (4044e0 <_malloc_r+0x520>)
  4043cc:	f43f af0e 	beq.w	4041ec <_malloc_r+0x22c>
  4043d0:	689c      	ldr	r4, [r3, #8]
  4043d2:	6862      	ldr	r2, [r4, #4]
  4043d4:	f022 0203 	bic.w	r2, r2, #3
  4043d8:	e768      	b.n	4042ac <_malloc_r+0x2ec>
  4043da:	f8d8 8000 	ldr.w	r8, [r8]
  4043de:	4598      	cmp	r8, r3
  4043e0:	d17c      	bne.n	4044dc <_malloc_r+0x51c>
  4043e2:	f010 0f03 	tst.w	r0, #3
  4043e6:	f1a8 0308 	sub.w	r3, r8, #8
  4043ea:	f100 30ff 	add.w	r0, r0, #4294967295
  4043ee:	d1f4      	bne.n	4043da <_malloc_r+0x41a>
  4043f0:	687b      	ldr	r3, [r7, #4]
  4043f2:	ea23 0304 	bic.w	r3, r3, r4
  4043f6:	607b      	str	r3, [r7, #4]
  4043f8:	0064      	lsls	r4, r4, #1
  4043fa:	429c      	cmp	r4, r3
  4043fc:	f63f aeca 	bhi.w	404194 <_malloc_r+0x1d4>
  404400:	2c00      	cmp	r4, #0
  404402:	f43f aec7 	beq.w	404194 <_malloc_r+0x1d4>
  404406:	4223      	tst	r3, r4
  404408:	4648      	mov	r0, r9
  40440a:	f47f ae69 	bne.w	4040e0 <_malloc_r+0x120>
  40440e:	0064      	lsls	r4, r4, #1
  404410:	4223      	tst	r3, r4
  404412:	f100 0004 	add.w	r0, r0, #4
  404416:	d0fa      	beq.n	40440e <_malloc_r+0x44e>
  404418:	e662      	b.n	4040e0 <_malloc_r+0x120>
  40441a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
  40441e:	d818      	bhi.n	404452 <_malloc_r+0x492>
  404420:	0be8      	lsrs	r0, r5, #15
  404422:	3077      	adds	r0, #119	; 0x77
  404424:	0041      	lsls	r1, r0, #1
  404426:	e60b      	b.n	404040 <_malloc_r+0x80>
  404428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40442c:	e6fb      	b.n	404226 <_malloc_r+0x266>
  40442e:	f8d8 3004 	ldr.w	r3, [r8, #4]
  404432:	1092      	asrs	r2, r2, #2
  404434:	f04f 0c01 	mov.w	ip, #1
  404438:	fa0c f202 	lsl.w	r2, ip, r2
  40443c:	4313      	orrs	r3, r2
  40443e:	f8c8 3004 	str.w	r3, [r8, #4]
  404442:	460a      	mov	r2, r1
  404444:	e77d      	b.n	404342 <_malloc_r+0x382>
  404446:	2301      	movs	r3, #1
  404448:	f8c9 3004 	str.w	r3, [r9, #4]
  40444c:	464c      	mov	r4, r9
  40444e:	2200      	movs	r2, #0
  404450:	e72c      	b.n	4042ac <_malloc_r+0x2ec>
  404452:	f240 5354 	movw	r3, #1364	; 0x554
  404456:	4298      	cmp	r0, r3
  404458:	d81c      	bhi.n	404494 <_malloc_r+0x4d4>
  40445a:	0ca8      	lsrs	r0, r5, #18
  40445c:	307c      	adds	r0, #124	; 0x7c
  40445e:	0041      	lsls	r1, r0, #1
  404460:	e5ee      	b.n	404040 <_malloc_r+0x80>
  404462:	3210      	adds	r2, #16
  404464:	e6b4      	b.n	4041d0 <_malloc_r+0x210>
  404466:	2a54      	cmp	r2, #84	; 0x54
  404468:	d823      	bhi.n	4044b2 <_malloc_r+0x4f2>
  40446a:	0b1a      	lsrs	r2, r3, #12
  40446c:	326e      	adds	r2, #110	; 0x6e
  40446e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  404472:	e754      	b.n	40431e <_malloc_r+0x35e>
  404474:	68bc      	ldr	r4, [r7, #8]
  404476:	6862      	ldr	r2, [r4, #4]
  404478:	f022 0203 	bic.w	r2, r2, #3
  40447c:	e716      	b.n	4042ac <_malloc_r+0x2ec>
  40447e:	f3cb 000b 	ubfx	r0, fp, #0, #12
  404482:	2800      	cmp	r0, #0
  404484:	f47f aeb9 	bne.w	4041fa <_malloc_r+0x23a>
  404488:	4442      	add	r2, r8
  40448a:	68bb      	ldr	r3, [r7, #8]
  40448c:	f042 0201 	orr.w	r2, r2, #1
  404490:	605a      	str	r2, [r3, #4]
  404492:	e6fd      	b.n	404290 <_malloc_r+0x2d0>
  404494:	21fc      	movs	r1, #252	; 0xfc
  404496:	207e      	movs	r0, #126	; 0x7e
  404498:	e5d2      	b.n	404040 <_malloc_r+0x80>
  40449a:	2201      	movs	r2, #1
  40449c:	f04f 0a00 	mov.w	sl, #0
  4044a0:	e6d4      	b.n	40424c <_malloc_r+0x28c>
  4044a2:	f104 0108 	add.w	r1, r4, #8
  4044a6:	4630      	mov	r0, r6
  4044a8:	f000 fb54 	bl	404b54 <_free_r>
  4044ac:	f8da 1000 	ldr.w	r1, [sl]
  4044b0:	e6ee      	b.n	404290 <_malloc_r+0x2d0>
  4044b2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4044b6:	d804      	bhi.n	4044c2 <_malloc_r+0x502>
  4044b8:	0bda      	lsrs	r2, r3, #15
  4044ba:	3277      	adds	r2, #119	; 0x77
  4044bc:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4044c0:	e72d      	b.n	40431e <_malloc_r+0x35e>
  4044c2:	f240 5154 	movw	r1, #1364	; 0x554
  4044c6:	428a      	cmp	r2, r1
  4044c8:	d804      	bhi.n	4044d4 <_malloc_r+0x514>
  4044ca:	0c9a      	lsrs	r2, r3, #18
  4044cc:	327c      	adds	r2, #124	; 0x7c
  4044ce:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  4044d2:	e724      	b.n	40431e <_malloc_r+0x35e>
  4044d4:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
  4044d8:	227e      	movs	r2, #126	; 0x7e
  4044da:	e720      	b.n	40431e <_malloc_r+0x35e>
  4044dc:	687b      	ldr	r3, [r7, #4]
  4044de:	e78b      	b.n	4043f8 <_malloc_r+0x438>
  4044e0:	200004d4 	.word	0x200004d4

004044e4 <memset>:
  4044e4:	b470      	push	{r4, r5, r6}
  4044e6:	0784      	lsls	r4, r0, #30
  4044e8:	d046      	beq.n	404578 <memset+0x94>
  4044ea:	1e54      	subs	r4, r2, #1
  4044ec:	2a00      	cmp	r2, #0
  4044ee:	d041      	beq.n	404574 <memset+0x90>
  4044f0:	b2cd      	uxtb	r5, r1
  4044f2:	4603      	mov	r3, r0
  4044f4:	e002      	b.n	4044fc <memset+0x18>
  4044f6:	1e62      	subs	r2, r4, #1
  4044f8:	b3e4      	cbz	r4, 404574 <memset+0x90>
  4044fa:	4614      	mov	r4, r2
  4044fc:	f803 5b01 	strb.w	r5, [r3], #1
  404500:	079a      	lsls	r2, r3, #30
  404502:	d1f8      	bne.n	4044f6 <memset+0x12>
  404504:	2c03      	cmp	r4, #3
  404506:	d92e      	bls.n	404566 <memset+0x82>
  404508:	b2cd      	uxtb	r5, r1
  40450a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40450e:	2c0f      	cmp	r4, #15
  404510:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  404514:	d919      	bls.n	40454a <memset+0x66>
  404516:	f103 0210 	add.w	r2, r3, #16
  40451a:	4626      	mov	r6, r4
  40451c:	3e10      	subs	r6, #16
  40451e:	2e0f      	cmp	r6, #15
  404520:	f842 5c10 	str.w	r5, [r2, #-16]
  404524:	f842 5c0c 	str.w	r5, [r2, #-12]
  404528:	f842 5c08 	str.w	r5, [r2, #-8]
  40452c:	f842 5c04 	str.w	r5, [r2, #-4]
  404530:	f102 0210 	add.w	r2, r2, #16
  404534:	d8f2      	bhi.n	40451c <memset+0x38>
  404536:	f1a4 0210 	sub.w	r2, r4, #16
  40453a:	f022 020f 	bic.w	r2, r2, #15
  40453e:	f004 040f 	and.w	r4, r4, #15
  404542:	3210      	adds	r2, #16
  404544:	2c03      	cmp	r4, #3
  404546:	4413      	add	r3, r2
  404548:	d90d      	bls.n	404566 <memset+0x82>
  40454a:	461e      	mov	r6, r3
  40454c:	4622      	mov	r2, r4
  40454e:	3a04      	subs	r2, #4
  404550:	2a03      	cmp	r2, #3
  404552:	f846 5b04 	str.w	r5, [r6], #4
  404556:	d8fa      	bhi.n	40454e <memset+0x6a>
  404558:	1f22      	subs	r2, r4, #4
  40455a:	f022 0203 	bic.w	r2, r2, #3
  40455e:	3204      	adds	r2, #4
  404560:	4413      	add	r3, r2
  404562:	f004 0403 	and.w	r4, r4, #3
  404566:	b12c      	cbz	r4, 404574 <memset+0x90>
  404568:	b2c9      	uxtb	r1, r1
  40456a:	441c      	add	r4, r3
  40456c:	f803 1b01 	strb.w	r1, [r3], #1
  404570:	42a3      	cmp	r3, r4
  404572:	d1fb      	bne.n	40456c <memset+0x88>
  404574:	bc70      	pop	{r4, r5, r6}
  404576:	4770      	bx	lr
  404578:	4614      	mov	r4, r2
  40457a:	4603      	mov	r3, r0
  40457c:	e7c2      	b.n	404504 <memset+0x20>
  40457e:	bf00      	nop

00404580 <__malloc_lock>:
  404580:	4770      	bx	lr
  404582:	bf00      	nop

00404584 <__malloc_unlock>:
  404584:	4770      	bx	lr
  404586:	bf00      	nop

00404588 <_sbrk_r>:
  404588:	b538      	push	{r3, r4, r5, lr}
  40458a:	4c07      	ldr	r4, [pc, #28]	; (4045a8 <_sbrk_r+0x20>)
  40458c:	2300      	movs	r3, #0
  40458e:	4605      	mov	r5, r0
  404590:	4608      	mov	r0, r1
  404592:	6023      	str	r3, [r4, #0]
  404594:	f7ff fcb4 	bl	403f00 <_sbrk>
  404598:	1c43      	adds	r3, r0, #1
  40459a:	d000      	beq.n	40459e <_sbrk_r+0x16>
  40459c:	bd38      	pop	{r3, r4, r5, pc}
  40459e:	6823      	ldr	r3, [r4, #0]
  4045a0:	2b00      	cmp	r3, #0
  4045a2:	d0fb      	beq.n	40459c <_sbrk_r+0x14>
  4045a4:	602b      	str	r3, [r5, #0]
  4045a6:	bd38      	pop	{r3, r4, r5, pc}
  4045a8:	20001624 	.word	0x20001624

004045ac <setbuf>:
  4045ac:	2900      	cmp	r1, #0
  4045ae:	bf0c      	ite	eq
  4045b0:	2202      	moveq	r2, #2
  4045b2:	2200      	movne	r2, #0
  4045b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4045b8:	f000 b800 	b.w	4045bc <setvbuf>

004045bc <setvbuf>:
  4045bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4045c0:	4c3a      	ldr	r4, [pc, #232]	; (4046ac <setvbuf+0xf0>)
  4045c2:	6826      	ldr	r6, [r4, #0]
  4045c4:	460d      	mov	r5, r1
  4045c6:	4604      	mov	r4, r0
  4045c8:	4690      	mov	r8, r2
  4045ca:	461f      	mov	r7, r3
  4045cc:	b116      	cbz	r6, 4045d4 <setvbuf+0x18>
  4045ce:	6bb3      	ldr	r3, [r6, #56]	; 0x38
  4045d0:	2b00      	cmp	r3, #0
  4045d2:	d03c      	beq.n	40464e <setvbuf+0x92>
  4045d4:	f1b8 0f02 	cmp.w	r8, #2
  4045d8:	d82f      	bhi.n	40463a <setvbuf+0x7e>
  4045da:	2f00      	cmp	r7, #0
  4045dc:	db2d      	blt.n	40463a <setvbuf+0x7e>
  4045de:	4621      	mov	r1, r4
  4045e0:	4630      	mov	r0, r6
  4045e2:	f000 f9b5 	bl	404950 <_fflush_r>
  4045e6:	89a1      	ldrh	r1, [r4, #12]
  4045e8:	2300      	movs	r3, #0
  4045ea:	6063      	str	r3, [r4, #4]
  4045ec:	61a3      	str	r3, [r4, #24]
  4045ee:	060b      	lsls	r3, r1, #24
  4045f0:	d427      	bmi.n	404642 <setvbuf+0x86>
  4045f2:	f021 0183 	bic.w	r1, r1, #131	; 0x83
  4045f6:	b289      	uxth	r1, r1
  4045f8:	f1b8 0f02 	cmp.w	r8, #2
  4045fc:	81a1      	strh	r1, [r4, #12]
  4045fe:	d02a      	beq.n	404656 <setvbuf+0x9a>
  404600:	2d00      	cmp	r5, #0
  404602:	d036      	beq.n	404672 <setvbuf+0xb6>
  404604:	f1b8 0f01 	cmp.w	r8, #1
  404608:	d011      	beq.n	40462e <setvbuf+0x72>
  40460a:	b289      	uxth	r1, r1
  40460c:	f001 0008 	and.w	r0, r1, #8
  404610:	4b27      	ldr	r3, [pc, #156]	; (4046b0 <setvbuf+0xf4>)
  404612:	63f3      	str	r3, [r6, #60]	; 0x3c
  404614:	b280      	uxth	r0, r0
  404616:	6025      	str	r5, [r4, #0]
  404618:	6125      	str	r5, [r4, #16]
  40461a:	6167      	str	r7, [r4, #20]
  40461c:	b178      	cbz	r0, 40463e <setvbuf+0x82>
  40461e:	f011 0f03 	tst.w	r1, #3
  404622:	bf18      	it	ne
  404624:	2700      	movne	r7, #0
  404626:	60a7      	str	r7, [r4, #8]
  404628:	2000      	movs	r0, #0
  40462a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40462e:	f041 0101 	orr.w	r1, r1, #1
  404632:	427b      	negs	r3, r7
  404634:	81a1      	strh	r1, [r4, #12]
  404636:	61a3      	str	r3, [r4, #24]
  404638:	e7e7      	b.n	40460a <setvbuf+0x4e>
  40463a:	f04f 30ff 	mov.w	r0, #4294967295
  40463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404642:	6921      	ldr	r1, [r4, #16]
  404644:	4630      	mov	r0, r6
  404646:	f000 fa85 	bl	404b54 <_free_r>
  40464a:	89a1      	ldrh	r1, [r4, #12]
  40464c:	e7d1      	b.n	4045f2 <setvbuf+0x36>
  40464e:	4630      	mov	r0, r6
  404650:	f000 fa12 	bl	404a78 <__sinit>
  404654:	e7be      	b.n	4045d4 <setvbuf+0x18>
  404656:	2000      	movs	r0, #0
  404658:	f104 0343 	add.w	r3, r4, #67	; 0x43
  40465c:	f041 0102 	orr.w	r1, r1, #2
  404660:	2500      	movs	r5, #0
  404662:	2201      	movs	r2, #1
  404664:	81a1      	strh	r1, [r4, #12]
  404666:	60a5      	str	r5, [r4, #8]
  404668:	6023      	str	r3, [r4, #0]
  40466a:	6123      	str	r3, [r4, #16]
  40466c:	6162      	str	r2, [r4, #20]
  40466e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404672:	2f00      	cmp	r7, #0
  404674:	bf08      	it	eq
  404676:	f44f 6780 	moveq.w	r7, #1024	; 0x400
  40467a:	4638      	mov	r0, r7
  40467c:	f7ff fc98 	bl	403fb0 <malloc>
  404680:	4605      	mov	r5, r0
  404682:	b128      	cbz	r0, 404690 <setvbuf+0xd4>
  404684:	89a1      	ldrh	r1, [r4, #12]
  404686:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40468a:	b289      	uxth	r1, r1
  40468c:	81a1      	strh	r1, [r4, #12]
  40468e:	e7b9      	b.n	404604 <setvbuf+0x48>
  404690:	f44f 6080 	mov.w	r0, #1024	; 0x400
  404694:	f7ff fc8c 	bl	403fb0 <malloc>
  404698:	4605      	mov	r5, r0
  40469a:	b918      	cbnz	r0, 4046a4 <setvbuf+0xe8>
  40469c:	89a1      	ldrh	r1, [r4, #12]
  40469e:	f04f 30ff 	mov.w	r0, #4294967295
  4046a2:	e7d9      	b.n	404658 <setvbuf+0x9c>
  4046a4:	f44f 6780 	mov.w	r7, #1024	; 0x400
  4046a8:	e7ec      	b.n	404684 <setvbuf+0xc8>
  4046aa:	bf00      	nop
  4046ac:	200004d0 	.word	0x200004d0
  4046b0:	0040497d 	.word	0x0040497d

004046b4 <strlen>:
  4046b4:	f020 0103 	bic.w	r1, r0, #3
  4046b8:	f010 0003 	ands.w	r0, r0, #3
  4046bc:	f1c0 0000 	rsb	r0, r0, #0
  4046c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046c4:	f100 0c04 	add.w	ip, r0, #4
  4046c8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  4046cc:	f06f 0200 	mvn.w	r2, #0
  4046d0:	bf1c      	itt	ne
  4046d2:	fa22 f20c 	lsrne.w	r2, r2, ip
  4046d6:	4313      	orrne	r3, r2
  4046d8:	f04f 0c01 	mov.w	ip, #1
  4046dc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  4046e0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  4046e4:	eba3 020c 	sub.w	r2, r3, ip
  4046e8:	ea22 0203 	bic.w	r2, r2, r3
  4046ec:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  4046f0:	bf04      	itt	eq
  4046f2:	f851 3b04 	ldreq.w	r3, [r1], #4
  4046f6:	3004      	addeq	r0, #4
  4046f8:	d0f4      	beq.n	4046e4 <strlen+0x30>
  4046fa:	f1c2 0100 	rsb	r1, r2, #0
  4046fe:	ea02 0201 	and.w	r2, r2, r1
  404702:	fab2 f282 	clz	r2, r2
  404706:	f1c2 021f 	rsb	r2, r2, #31
  40470a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40470e:	4770      	bx	lr

00404710 <_write_r>:
  404710:	b570      	push	{r4, r5, r6, lr}
  404712:	4c08      	ldr	r4, [pc, #32]	; (404734 <_write_r+0x24>)
  404714:	4606      	mov	r6, r0
  404716:	2500      	movs	r5, #0
  404718:	4608      	mov	r0, r1
  40471a:	4611      	mov	r1, r2
  40471c:	461a      	mov	r2, r3
  40471e:	6025      	str	r5, [r4, #0]
  404720:	f7fe ffb8 	bl	403694 <_write>
  404724:	1c43      	adds	r3, r0, #1
  404726:	d000      	beq.n	40472a <_write_r+0x1a>
  404728:	bd70      	pop	{r4, r5, r6, pc}
  40472a:	6823      	ldr	r3, [r4, #0]
  40472c:	2b00      	cmp	r3, #0
  40472e:	d0fb      	beq.n	404728 <_write_r+0x18>
  404730:	6033      	str	r3, [r6, #0]
  404732:	bd70      	pop	{r4, r5, r6, pc}
  404734:	20001624 	.word	0x20001624

00404738 <__register_exitproc>:
  404738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40473c:	4c25      	ldr	r4, [pc, #148]	; (4047d4 <__register_exitproc+0x9c>)
  40473e:	6825      	ldr	r5, [r4, #0]
  404740:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  404744:	4606      	mov	r6, r0
  404746:	4688      	mov	r8, r1
  404748:	4692      	mov	sl, r2
  40474a:	4699      	mov	r9, r3
  40474c:	b3cc      	cbz	r4, 4047c2 <__register_exitproc+0x8a>
  40474e:	6860      	ldr	r0, [r4, #4]
  404750:	281f      	cmp	r0, #31
  404752:	dc18      	bgt.n	404786 <__register_exitproc+0x4e>
  404754:	1c43      	adds	r3, r0, #1
  404756:	b17e      	cbz	r6, 404778 <__register_exitproc+0x40>
  404758:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40475c:	2101      	movs	r1, #1
  40475e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  404762:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
  404766:	fa01 f200 	lsl.w	r2, r1, r0
  40476a:	4317      	orrs	r7, r2
  40476c:	2e02      	cmp	r6, #2
  40476e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  404772:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  404776:	d01e      	beq.n	4047b6 <__register_exitproc+0x7e>
  404778:	3002      	adds	r0, #2
  40477a:	6063      	str	r3, [r4, #4]
  40477c:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  404780:	2000      	movs	r0, #0
  404782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404786:	4b14      	ldr	r3, [pc, #80]	; (4047d8 <__register_exitproc+0xa0>)
  404788:	b303      	cbz	r3, 4047cc <__register_exitproc+0x94>
  40478a:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40478e:	f7ff fc0f 	bl	403fb0 <malloc>
  404792:	4604      	mov	r4, r0
  404794:	b1d0      	cbz	r0, 4047cc <__register_exitproc+0x94>
  404796:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40479a:	2700      	movs	r7, #0
  40479c:	e880 0088 	stmia.w	r0, {r3, r7}
  4047a0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4047a4:	4638      	mov	r0, r7
  4047a6:	2301      	movs	r3, #1
  4047a8:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4047ac:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4047b0:	2e00      	cmp	r6, #0
  4047b2:	d0e1      	beq.n	404778 <__register_exitproc+0x40>
  4047b4:	e7d0      	b.n	404758 <__register_exitproc+0x20>
  4047b6:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4047ba:	430a      	orrs	r2, r1
  4047bc:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4047c0:	e7da      	b.n	404778 <__register_exitproc+0x40>
  4047c2:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4047c6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4047ca:	e7c0      	b.n	40474e <__register_exitproc+0x16>
  4047cc:	f04f 30ff 	mov.w	r0, #4294967295
  4047d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4047d4:	00404fb4 	.word	0x00404fb4
  4047d8:	00403fb1 	.word	0x00403fb1

004047dc <register_fini>:
  4047dc:	4b02      	ldr	r3, [pc, #8]	; (4047e8 <register_fini+0xc>)
  4047de:	b113      	cbz	r3, 4047e6 <register_fini+0xa>
  4047e0:	4802      	ldr	r0, [pc, #8]	; (4047ec <register_fini+0x10>)
  4047e2:	f000 b805 	b.w	4047f0 <atexit>
  4047e6:	4770      	bx	lr
  4047e8:	00000000 	.word	0x00000000
  4047ec:	00404a8d 	.word	0x00404a8d

004047f0 <atexit>:
  4047f0:	4601      	mov	r1, r0
  4047f2:	2000      	movs	r0, #0
  4047f4:	4602      	mov	r2, r0
  4047f6:	4603      	mov	r3, r0
  4047f8:	f7ff bf9e 	b.w	404738 <__register_exitproc>

004047fc <__sflush_r>:
  4047fc:	898b      	ldrh	r3, [r1, #12]
  4047fe:	b29a      	uxth	r2, r3
  404800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404804:	460d      	mov	r5, r1
  404806:	0711      	lsls	r1, r2, #28
  404808:	4680      	mov	r8, r0
  40480a:	d43c      	bmi.n	404886 <__sflush_r+0x8a>
  40480c:	686a      	ldr	r2, [r5, #4]
  40480e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404812:	2a00      	cmp	r2, #0
  404814:	81ab      	strh	r3, [r5, #12]
  404816:	dd65      	ble.n	4048e4 <__sflush_r+0xe8>
  404818:	6aae      	ldr	r6, [r5, #40]	; 0x28
  40481a:	2e00      	cmp	r6, #0
  40481c:	d04b      	beq.n	4048b6 <__sflush_r+0xba>
  40481e:	b29b      	uxth	r3, r3
  404820:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  404824:	2100      	movs	r1, #0
  404826:	b292      	uxth	r2, r2
  404828:	f8d8 4000 	ldr.w	r4, [r8]
  40482c:	f8c8 1000 	str.w	r1, [r8]
  404830:	2a00      	cmp	r2, #0
  404832:	d05b      	beq.n	4048ec <__sflush_r+0xf0>
  404834:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404836:	075f      	lsls	r7, r3, #29
  404838:	d505      	bpl.n	404846 <__sflush_r+0x4a>
  40483a:	6869      	ldr	r1, [r5, #4]
  40483c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40483e:	1a52      	subs	r2, r2, r1
  404840:	b10b      	cbz	r3, 404846 <__sflush_r+0x4a>
  404842:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  404844:	1ad2      	subs	r2, r2, r3
  404846:	4640      	mov	r0, r8
  404848:	69e9      	ldr	r1, [r5, #28]
  40484a:	2300      	movs	r3, #0
  40484c:	47b0      	blx	r6
  40484e:	1c46      	adds	r6, r0, #1
  404850:	d056      	beq.n	404900 <__sflush_r+0x104>
  404852:	89ab      	ldrh	r3, [r5, #12]
  404854:	692a      	ldr	r2, [r5, #16]
  404856:	602a      	str	r2, [r5, #0]
  404858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40485c:	b29b      	uxth	r3, r3
  40485e:	2200      	movs	r2, #0
  404860:	606a      	str	r2, [r5, #4]
  404862:	04da      	lsls	r2, r3, #19
  404864:	81ab      	strh	r3, [r5, #12]
  404866:	d43b      	bmi.n	4048e0 <__sflush_r+0xe4>
  404868:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40486a:	f8c8 4000 	str.w	r4, [r8]
  40486e:	b311      	cbz	r1, 4048b6 <__sflush_r+0xba>
  404870:	f105 0340 	add.w	r3, r5, #64	; 0x40
  404874:	4299      	cmp	r1, r3
  404876:	d002      	beq.n	40487e <__sflush_r+0x82>
  404878:	4640      	mov	r0, r8
  40487a:	f000 f96b 	bl	404b54 <_free_r>
  40487e:	2000      	movs	r0, #0
  404880:	6328      	str	r0, [r5, #48]	; 0x30
  404882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404886:	692e      	ldr	r6, [r5, #16]
  404888:	b1ae      	cbz	r6, 4048b6 <__sflush_r+0xba>
  40488a:	682c      	ldr	r4, [r5, #0]
  40488c:	602e      	str	r6, [r5, #0]
  40488e:	0791      	lsls	r1, r2, #30
  404890:	bf0c      	ite	eq
  404892:	696b      	ldreq	r3, [r5, #20]
  404894:	2300      	movne	r3, #0
  404896:	1ba4      	subs	r4, r4, r6
  404898:	60ab      	str	r3, [r5, #8]
  40489a:	e00a      	b.n	4048b2 <__sflush_r+0xb6>
  40489c:	4632      	mov	r2, r6
  40489e:	4623      	mov	r3, r4
  4048a0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4048a2:	69e9      	ldr	r1, [r5, #28]
  4048a4:	4640      	mov	r0, r8
  4048a6:	47b8      	blx	r7
  4048a8:	2800      	cmp	r0, #0
  4048aa:	eba4 0400 	sub.w	r4, r4, r0
  4048ae:	4406      	add	r6, r0
  4048b0:	dd04      	ble.n	4048bc <__sflush_r+0xc0>
  4048b2:	2c00      	cmp	r4, #0
  4048b4:	dcf2      	bgt.n	40489c <__sflush_r+0xa0>
  4048b6:	2000      	movs	r0, #0
  4048b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4048bc:	89ab      	ldrh	r3, [r5, #12]
  4048be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4048c2:	81ab      	strh	r3, [r5, #12]
  4048c4:	f04f 30ff 	mov.w	r0, #4294967295
  4048c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4048cc:	89ab      	ldrh	r3, [r5, #12]
  4048ce:	692a      	ldr	r2, [r5, #16]
  4048d0:	6069      	str	r1, [r5, #4]
  4048d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4048d6:	b29b      	uxth	r3, r3
  4048d8:	81ab      	strh	r3, [r5, #12]
  4048da:	04db      	lsls	r3, r3, #19
  4048dc:	602a      	str	r2, [r5, #0]
  4048de:	d5c3      	bpl.n	404868 <__sflush_r+0x6c>
  4048e0:	6528      	str	r0, [r5, #80]	; 0x50
  4048e2:	e7c1      	b.n	404868 <__sflush_r+0x6c>
  4048e4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4048e6:	2a00      	cmp	r2, #0
  4048e8:	dc96      	bgt.n	404818 <__sflush_r+0x1c>
  4048ea:	e7e4      	b.n	4048b6 <__sflush_r+0xba>
  4048ec:	2301      	movs	r3, #1
  4048ee:	4640      	mov	r0, r8
  4048f0:	69e9      	ldr	r1, [r5, #28]
  4048f2:	47b0      	blx	r6
  4048f4:	1c43      	adds	r3, r0, #1
  4048f6:	4602      	mov	r2, r0
  4048f8:	d019      	beq.n	40492e <__sflush_r+0x132>
  4048fa:	89ab      	ldrh	r3, [r5, #12]
  4048fc:	6aae      	ldr	r6, [r5, #40]	; 0x28
  4048fe:	e79a      	b.n	404836 <__sflush_r+0x3a>
  404900:	f8d8 1000 	ldr.w	r1, [r8]
  404904:	2900      	cmp	r1, #0
  404906:	d0e1      	beq.n	4048cc <__sflush_r+0xd0>
  404908:	291d      	cmp	r1, #29
  40490a:	d007      	beq.n	40491c <__sflush_r+0x120>
  40490c:	2916      	cmp	r1, #22
  40490e:	d005      	beq.n	40491c <__sflush_r+0x120>
  404910:	89ab      	ldrh	r3, [r5, #12]
  404912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404916:	81ab      	strh	r3, [r5, #12]
  404918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40491c:	89ab      	ldrh	r3, [r5, #12]
  40491e:	692a      	ldr	r2, [r5, #16]
  404920:	602a      	str	r2, [r5, #0]
  404922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  404926:	2200      	movs	r2, #0
  404928:	81ab      	strh	r3, [r5, #12]
  40492a:	606a      	str	r2, [r5, #4]
  40492c:	e79c      	b.n	404868 <__sflush_r+0x6c>
  40492e:	f8d8 3000 	ldr.w	r3, [r8]
  404932:	2b00      	cmp	r3, #0
  404934:	d0e1      	beq.n	4048fa <__sflush_r+0xfe>
  404936:	2b1d      	cmp	r3, #29
  404938:	d007      	beq.n	40494a <__sflush_r+0x14e>
  40493a:	2b16      	cmp	r3, #22
  40493c:	d005      	beq.n	40494a <__sflush_r+0x14e>
  40493e:	89ab      	ldrh	r3, [r5, #12]
  404940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404944:	81ab      	strh	r3, [r5, #12]
  404946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40494a:	f8c8 4000 	str.w	r4, [r8]
  40494e:	e7b2      	b.n	4048b6 <__sflush_r+0xba>

00404950 <_fflush_r>:
  404950:	b510      	push	{r4, lr}
  404952:	4604      	mov	r4, r0
  404954:	b082      	sub	sp, #8
  404956:	b108      	cbz	r0, 40495c <_fflush_r+0xc>
  404958:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40495a:	b153      	cbz	r3, 404972 <_fflush_r+0x22>
  40495c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  404960:	b908      	cbnz	r0, 404966 <_fflush_r+0x16>
  404962:	b002      	add	sp, #8
  404964:	bd10      	pop	{r4, pc}
  404966:	4620      	mov	r0, r4
  404968:	b002      	add	sp, #8
  40496a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40496e:	f7ff bf45 	b.w	4047fc <__sflush_r>
  404972:	9101      	str	r1, [sp, #4]
  404974:	f000 f880 	bl	404a78 <__sinit>
  404978:	9901      	ldr	r1, [sp, #4]
  40497a:	e7ef      	b.n	40495c <_fflush_r+0xc>

0040497c <_cleanup_r>:
  40497c:	4901      	ldr	r1, [pc, #4]	; (404984 <_cleanup_r+0x8>)
  40497e:	f000 b9c1 	b.w	404d04 <_fwalk_reent>
  404982:	bf00      	nop
  404984:	00404e01 	.word	0x00404e01

00404988 <__sinit.part.1>:
  404988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40498c:	4b35      	ldr	r3, [pc, #212]	; (404a64 <__sinit.part.1+0xdc>)
  40498e:	6845      	ldr	r5, [r0, #4]
  404990:	63c3      	str	r3, [r0, #60]	; 0x3c
  404992:	2400      	movs	r4, #0
  404994:	4607      	mov	r7, r0
  404996:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  40499a:	2304      	movs	r3, #4
  40499c:	2103      	movs	r1, #3
  40499e:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4049a2:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4049a6:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  4049aa:	b083      	sub	sp, #12
  4049ac:	602c      	str	r4, [r5, #0]
  4049ae:	606c      	str	r4, [r5, #4]
  4049b0:	60ac      	str	r4, [r5, #8]
  4049b2:	666c      	str	r4, [r5, #100]	; 0x64
  4049b4:	81ec      	strh	r4, [r5, #14]
  4049b6:	612c      	str	r4, [r5, #16]
  4049b8:	616c      	str	r4, [r5, #20]
  4049ba:	61ac      	str	r4, [r5, #24]
  4049bc:	81ab      	strh	r3, [r5, #12]
  4049be:	4621      	mov	r1, r4
  4049c0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4049c4:	2208      	movs	r2, #8
  4049c6:	f7ff fd8d 	bl	4044e4 <memset>
  4049ca:	68be      	ldr	r6, [r7, #8]
  4049cc:	f8df b098 	ldr.w	fp, [pc, #152]	; 404a68 <__sinit.part.1+0xe0>
  4049d0:	f8df a098 	ldr.w	sl, [pc, #152]	; 404a6c <__sinit.part.1+0xe4>
  4049d4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 404a70 <__sinit.part.1+0xe8>
  4049d8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 404a74 <__sinit.part.1+0xec>
  4049dc:	f8c5 b020 	str.w	fp, [r5, #32]
  4049e0:	2301      	movs	r3, #1
  4049e2:	2209      	movs	r2, #9
  4049e4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4049e8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4049ec:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4049f0:	61ed      	str	r5, [r5, #28]
  4049f2:	4621      	mov	r1, r4
  4049f4:	81f3      	strh	r3, [r6, #14]
  4049f6:	81b2      	strh	r2, [r6, #12]
  4049f8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4049fc:	6034      	str	r4, [r6, #0]
  4049fe:	6074      	str	r4, [r6, #4]
  404a00:	60b4      	str	r4, [r6, #8]
  404a02:	6674      	str	r4, [r6, #100]	; 0x64
  404a04:	6134      	str	r4, [r6, #16]
  404a06:	6174      	str	r4, [r6, #20]
  404a08:	61b4      	str	r4, [r6, #24]
  404a0a:	2208      	movs	r2, #8
  404a0c:	9301      	str	r3, [sp, #4]
  404a0e:	f7ff fd69 	bl	4044e4 <memset>
  404a12:	68fd      	ldr	r5, [r7, #12]
  404a14:	61f6      	str	r6, [r6, #28]
  404a16:	2012      	movs	r0, #18
  404a18:	2202      	movs	r2, #2
  404a1a:	f8c6 b020 	str.w	fp, [r6, #32]
  404a1e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  404a22:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  404a26:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  404a2a:	4621      	mov	r1, r4
  404a2c:	81a8      	strh	r0, [r5, #12]
  404a2e:	81ea      	strh	r2, [r5, #14]
  404a30:	602c      	str	r4, [r5, #0]
  404a32:	606c      	str	r4, [r5, #4]
  404a34:	60ac      	str	r4, [r5, #8]
  404a36:	666c      	str	r4, [r5, #100]	; 0x64
  404a38:	612c      	str	r4, [r5, #16]
  404a3a:	616c      	str	r4, [r5, #20]
  404a3c:	61ac      	str	r4, [r5, #24]
  404a3e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  404a42:	2208      	movs	r2, #8
  404a44:	f7ff fd4e 	bl	4044e4 <memset>
  404a48:	9b01      	ldr	r3, [sp, #4]
  404a4a:	61ed      	str	r5, [r5, #28]
  404a4c:	f8c5 b020 	str.w	fp, [r5, #32]
  404a50:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  404a54:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  404a58:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  404a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  404a5e:	b003      	add	sp, #12
  404a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a64:	0040497d 	.word	0x0040497d
  404a68:	00404d59 	.word	0x00404d59
  404a6c:	00404d7d 	.word	0x00404d7d
  404a70:	00404db5 	.word	0x00404db5
  404a74:	00404dd5 	.word	0x00404dd5

00404a78 <__sinit>:
  404a78:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404a7a:	b103      	cbz	r3, 404a7e <__sinit+0x6>
  404a7c:	4770      	bx	lr
  404a7e:	f7ff bf83 	b.w	404988 <__sinit.part.1>
  404a82:	bf00      	nop

00404a84 <__sfp_lock_acquire>:
  404a84:	4770      	bx	lr
  404a86:	bf00      	nop

00404a88 <__sfp_lock_release>:
  404a88:	4770      	bx	lr
  404a8a:	bf00      	nop

00404a8c <__libc_fini_array>:
  404a8c:	b538      	push	{r3, r4, r5, lr}
  404a8e:	4b08      	ldr	r3, [pc, #32]	; (404ab0 <__libc_fini_array+0x24>)
  404a90:	4d08      	ldr	r5, [pc, #32]	; (404ab4 <__libc_fini_array+0x28>)
  404a92:	1aed      	subs	r5, r5, r3
  404a94:	10ac      	asrs	r4, r5, #2
  404a96:	bf18      	it	ne
  404a98:	18ed      	addne	r5, r5, r3
  404a9a:	d005      	beq.n	404aa8 <__libc_fini_array+0x1c>
  404a9c:	3c01      	subs	r4, #1
  404a9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  404aa2:	4798      	blx	r3
  404aa4:	2c00      	cmp	r4, #0
  404aa6:	d1f9      	bne.n	404a9c <__libc_fini_array+0x10>
  404aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404aac:	f000 ba94 	b.w	404fd8 <_fini>
  404ab0:	00404fe4 	.word	0x00404fe4
  404ab4:	00404fe8 	.word	0x00404fe8

00404ab8 <_malloc_trim_r>:
  404ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404aba:	4f23      	ldr	r7, [pc, #140]	; (404b48 <_malloc_trim_r+0x90>)
  404abc:	460c      	mov	r4, r1
  404abe:	4606      	mov	r6, r0
  404ac0:	f7ff fd5e 	bl	404580 <__malloc_lock>
  404ac4:	68bb      	ldr	r3, [r7, #8]
  404ac6:	685d      	ldr	r5, [r3, #4]
  404ac8:	f025 0503 	bic.w	r5, r5, #3
  404acc:	1b29      	subs	r1, r5, r4
  404ace:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  404ad2:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404ad6:	f021 010f 	bic.w	r1, r1, #15
  404ada:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404ade:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404ae2:	db07      	blt.n	404af4 <_malloc_trim_r+0x3c>
  404ae4:	4630      	mov	r0, r6
  404ae6:	2100      	movs	r1, #0
  404ae8:	f7ff fd4e 	bl	404588 <_sbrk_r>
  404aec:	68bb      	ldr	r3, [r7, #8]
  404aee:	442b      	add	r3, r5
  404af0:	4298      	cmp	r0, r3
  404af2:	d004      	beq.n	404afe <_malloc_trim_r+0x46>
  404af4:	4630      	mov	r0, r6
  404af6:	f7ff fd45 	bl	404584 <__malloc_unlock>
  404afa:	2000      	movs	r0, #0
  404afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404afe:	4630      	mov	r0, r6
  404b00:	4261      	negs	r1, r4
  404b02:	f7ff fd41 	bl	404588 <_sbrk_r>
  404b06:	3001      	adds	r0, #1
  404b08:	d00d      	beq.n	404b26 <_malloc_trim_r+0x6e>
  404b0a:	4b10      	ldr	r3, [pc, #64]	; (404b4c <_malloc_trim_r+0x94>)
  404b0c:	68ba      	ldr	r2, [r7, #8]
  404b0e:	6819      	ldr	r1, [r3, #0]
  404b10:	1b2d      	subs	r5, r5, r4
  404b12:	f045 0501 	orr.w	r5, r5, #1
  404b16:	4630      	mov	r0, r6
  404b18:	1b09      	subs	r1, r1, r4
  404b1a:	6055      	str	r5, [r2, #4]
  404b1c:	6019      	str	r1, [r3, #0]
  404b1e:	f7ff fd31 	bl	404584 <__malloc_unlock>
  404b22:	2001      	movs	r0, #1
  404b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404b26:	4630      	mov	r0, r6
  404b28:	2100      	movs	r1, #0
  404b2a:	f7ff fd2d 	bl	404588 <_sbrk_r>
  404b2e:	68ba      	ldr	r2, [r7, #8]
  404b30:	1a83      	subs	r3, r0, r2
  404b32:	2b0f      	cmp	r3, #15
  404b34:	ddde      	ble.n	404af4 <_malloc_trim_r+0x3c>
  404b36:	4c06      	ldr	r4, [pc, #24]	; (404b50 <_malloc_trim_r+0x98>)
  404b38:	4904      	ldr	r1, [pc, #16]	; (404b4c <_malloc_trim_r+0x94>)
  404b3a:	6824      	ldr	r4, [r4, #0]
  404b3c:	f043 0301 	orr.w	r3, r3, #1
  404b40:	1b00      	subs	r0, r0, r4
  404b42:	6053      	str	r3, [r2, #4]
  404b44:	6008      	str	r0, [r1, #0]
  404b46:	e7d5      	b.n	404af4 <_malloc_trim_r+0x3c>
  404b48:	200004d4 	.word	0x200004d4
  404b4c:	200015cc 	.word	0x200015cc
  404b50:	200008e0 	.word	0x200008e0

00404b54 <_free_r>:
  404b54:	2900      	cmp	r1, #0
  404b56:	d04e      	beq.n	404bf6 <_free_r+0xa2>
  404b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404b5c:	460c      	mov	r4, r1
  404b5e:	4680      	mov	r8, r0
  404b60:	f7ff fd0e 	bl	404580 <__malloc_lock>
  404b64:	f854 7c04 	ldr.w	r7, [r4, #-4]
  404b68:	4962      	ldr	r1, [pc, #392]	; (404cf4 <_free_r+0x1a0>)
  404b6a:	f027 0201 	bic.w	r2, r7, #1
  404b6e:	f1a4 0508 	sub.w	r5, r4, #8
  404b72:	18ab      	adds	r3, r5, r2
  404b74:	688e      	ldr	r6, [r1, #8]
  404b76:	6858      	ldr	r0, [r3, #4]
  404b78:	429e      	cmp	r6, r3
  404b7a:	f020 0003 	bic.w	r0, r0, #3
  404b7e:	d05a      	beq.n	404c36 <_free_r+0xe2>
  404b80:	07fe      	lsls	r6, r7, #31
  404b82:	6058      	str	r0, [r3, #4]
  404b84:	d40b      	bmi.n	404b9e <_free_r+0x4a>
  404b86:	f854 7c08 	ldr.w	r7, [r4, #-8]
  404b8a:	1bed      	subs	r5, r5, r7
  404b8c:	f101 0e08 	add.w	lr, r1, #8
  404b90:	68ac      	ldr	r4, [r5, #8]
  404b92:	4574      	cmp	r4, lr
  404b94:	443a      	add	r2, r7
  404b96:	d067      	beq.n	404c68 <_free_r+0x114>
  404b98:	68ef      	ldr	r7, [r5, #12]
  404b9a:	60e7      	str	r7, [r4, #12]
  404b9c:	60bc      	str	r4, [r7, #8]
  404b9e:	181c      	adds	r4, r3, r0
  404ba0:	6864      	ldr	r4, [r4, #4]
  404ba2:	07e4      	lsls	r4, r4, #31
  404ba4:	d40c      	bmi.n	404bc0 <_free_r+0x6c>
  404ba6:	4f54      	ldr	r7, [pc, #336]	; (404cf8 <_free_r+0x1a4>)
  404ba8:	689c      	ldr	r4, [r3, #8]
  404baa:	42bc      	cmp	r4, r7
  404bac:	4402      	add	r2, r0
  404bae:	d07c      	beq.n	404caa <_free_r+0x156>
  404bb0:	68d8      	ldr	r0, [r3, #12]
  404bb2:	60e0      	str	r0, [r4, #12]
  404bb4:	f042 0301 	orr.w	r3, r2, #1
  404bb8:	6084      	str	r4, [r0, #8]
  404bba:	606b      	str	r3, [r5, #4]
  404bbc:	50aa      	str	r2, [r5, r2]
  404bbe:	e003      	b.n	404bc8 <_free_r+0x74>
  404bc0:	f042 0301 	orr.w	r3, r2, #1
  404bc4:	606b      	str	r3, [r5, #4]
  404bc6:	50aa      	str	r2, [r5, r2]
  404bc8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  404bcc:	d214      	bcs.n	404bf8 <_free_r+0xa4>
  404bce:	08d2      	lsrs	r2, r2, #3
  404bd0:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
  404bd4:	6848      	ldr	r0, [r1, #4]
  404bd6:	689f      	ldr	r7, [r3, #8]
  404bd8:	60af      	str	r7, [r5, #8]
  404bda:	1092      	asrs	r2, r2, #2
  404bdc:	2401      	movs	r4, #1
  404bde:	fa04 f202 	lsl.w	r2, r4, r2
  404be2:	4310      	orrs	r0, r2
  404be4:	60eb      	str	r3, [r5, #12]
  404be6:	6048      	str	r0, [r1, #4]
  404be8:	609d      	str	r5, [r3, #8]
  404bea:	60fd      	str	r5, [r7, #12]
  404bec:	4640      	mov	r0, r8
  404bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404bf2:	f7ff bcc7 	b.w	404584 <__malloc_unlock>
  404bf6:	4770      	bx	lr
  404bf8:	0a53      	lsrs	r3, r2, #9
  404bfa:	2b04      	cmp	r3, #4
  404bfc:	d847      	bhi.n	404c8e <_free_r+0x13a>
  404bfe:	0993      	lsrs	r3, r2, #6
  404c00:	f103 0438 	add.w	r4, r3, #56	; 0x38
  404c04:	0060      	lsls	r0, r4, #1
  404c06:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  404c0a:	493a      	ldr	r1, [pc, #232]	; (404cf4 <_free_r+0x1a0>)
  404c0c:	6883      	ldr	r3, [r0, #8]
  404c0e:	4283      	cmp	r3, r0
  404c10:	d043      	beq.n	404c9a <_free_r+0x146>
  404c12:	6859      	ldr	r1, [r3, #4]
  404c14:	f021 0103 	bic.w	r1, r1, #3
  404c18:	4291      	cmp	r1, r2
  404c1a:	d902      	bls.n	404c22 <_free_r+0xce>
  404c1c:	689b      	ldr	r3, [r3, #8]
  404c1e:	4298      	cmp	r0, r3
  404c20:	d1f7      	bne.n	404c12 <_free_r+0xbe>
  404c22:	68da      	ldr	r2, [r3, #12]
  404c24:	60ea      	str	r2, [r5, #12]
  404c26:	60ab      	str	r3, [r5, #8]
  404c28:	4640      	mov	r0, r8
  404c2a:	6095      	str	r5, [r2, #8]
  404c2c:	60dd      	str	r5, [r3, #12]
  404c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404c32:	f7ff bca7 	b.w	404584 <__malloc_unlock>
  404c36:	07ff      	lsls	r7, r7, #31
  404c38:	4402      	add	r2, r0
  404c3a:	d407      	bmi.n	404c4c <_free_r+0xf8>
  404c3c:	f854 3c08 	ldr.w	r3, [r4, #-8]
  404c40:	1aed      	subs	r5, r5, r3
  404c42:	441a      	add	r2, r3
  404c44:	68a8      	ldr	r0, [r5, #8]
  404c46:	68eb      	ldr	r3, [r5, #12]
  404c48:	60c3      	str	r3, [r0, #12]
  404c4a:	6098      	str	r0, [r3, #8]
  404c4c:	4b2b      	ldr	r3, [pc, #172]	; (404cfc <_free_r+0x1a8>)
  404c4e:	681b      	ldr	r3, [r3, #0]
  404c50:	f042 0001 	orr.w	r0, r2, #1
  404c54:	429a      	cmp	r2, r3
  404c56:	6068      	str	r0, [r5, #4]
  404c58:	608d      	str	r5, [r1, #8]
  404c5a:	d3c7      	bcc.n	404bec <_free_r+0x98>
  404c5c:	4b28      	ldr	r3, [pc, #160]	; (404d00 <_free_r+0x1ac>)
  404c5e:	4640      	mov	r0, r8
  404c60:	6819      	ldr	r1, [r3, #0]
  404c62:	f7ff ff29 	bl	404ab8 <_malloc_trim_r>
  404c66:	e7c1      	b.n	404bec <_free_r+0x98>
  404c68:	1819      	adds	r1, r3, r0
  404c6a:	6849      	ldr	r1, [r1, #4]
  404c6c:	07c9      	lsls	r1, r1, #31
  404c6e:	d409      	bmi.n	404c84 <_free_r+0x130>
  404c70:	68d9      	ldr	r1, [r3, #12]
  404c72:	689b      	ldr	r3, [r3, #8]
  404c74:	4402      	add	r2, r0
  404c76:	f042 0001 	orr.w	r0, r2, #1
  404c7a:	60d9      	str	r1, [r3, #12]
  404c7c:	608b      	str	r3, [r1, #8]
  404c7e:	6068      	str	r0, [r5, #4]
  404c80:	50aa      	str	r2, [r5, r2]
  404c82:	e7b3      	b.n	404bec <_free_r+0x98>
  404c84:	f042 0301 	orr.w	r3, r2, #1
  404c88:	606b      	str	r3, [r5, #4]
  404c8a:	50aa      	str	r2, [r5, r2]
  404c8c:	e7ae      	b.n	404bec <_free_r+0x98>
  404c8e:	2b14      	cmp	r3, #20
  404c90:	d814      	bhi.n	404cbc <_free_r+0x168>
  404c92:	f103 045b 	add.w	r4, r3, #91	; 0x5b
  404c96:	0060      	lsls	r0, r4, #1
  404c98:	e7b5      	b.n	404c06 <_free_r+0xb2>
  404c9a:	684a      	ldr	r2, [r1, #4]
  404c9c:	10a4      	asrs	r4, r4, #2
  404c9e:	2001      	movs	r0, #1
  404ca0:	40a0      	lsls	r0, r4
  404ca2:	4302      	orrs	r2, r0
  404ca4:	604a      	str	r2, [r1, #4]
  404ca6:	461a      	mov	r2, r3
  404ca8:	e7bc      	b.n	404c24 <_free_r+0xd0>
  404caa:	f042 0301 	orr.w	r3, r2, #1
  404cae:	614d      	str	r5, [r1, #20]
  404cb0:	610d      	str	r5, [r1, #16]
  404cb2:	60ec      	str	r4, [r5, #12]
  404cb4:	60ac      	str	r4, [r5, #8]
  404cb6:	606b      	str	r3, [r5, #4]
  404cb8:	50aa      	str	r2, [r5, r2]
  404cba:	e797      	b.n	404bec <_free_r+0x98>
  404cbc:	2b54      	cmp	r3, #84	; 0x54
  404cbe:	d804      	bhi.n	404cca <_free_r+0x176>
  404cc0:	0b13      	lsrs	r3, r2, #12
  404cc2:	f103 046e 	add.w	r4, r3, #110	; 0x6e
  404cc6:	0060      	lsls	r0, r4, #1
  404cc8:	e79d      	b.n	404c06 <_free_r+0xb2>
  404cca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404cce:	d804      	bhi.n	404cda <_free_r+0x186>
  404cd0:	0bd3      	lsrs	r3, r2, #15
  404cd2:	f103 0477 	add.w	r4, r3, #119	; 0x77
  404cd6:	0060      	lsls	r0, r4, #1
  404cd8:	e795      	b.n	404c06 <_free_r+0xb2>
  404cda:	f240 5054 	movw	r0, #1364	; 0x554
  404cde:	4283      	cmp	r3, r0
  404ce0:	d804      	bhi.n	404cec <_free_r+0x198>
  404ce2:	0c93      	lsrs	r3, r2, #18
  404ce4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
  404ce8:	0060      	lsls	r0, r4, #1
  404cea:	e78c      	b.n	404c06 <_free_r+0xb2>
  404cec:	20fc      	movs	r0, #252	; 0xfc
  404cee:	247e      	movs	r4, #126	; 0x7e
  404cf0:	e789      	b.n	404c06 <_free_r+0xb2>
  404cf2:	bf00      	nop
  404cf4:	200004d4 	.word	0x200004d4
  404cf8:	200004dc 	.word	0x200004dc
  404cfc:	200008dc 	.word	0x200008dc
  404d00:	200015c8 	.word	0x200015c8

00404d04 <_fwalk_reent>:
  404d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404d08:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404d0c:	d01f      	beq.n	404d4e <_fwalk_reent+0x4a>
  404d0e:	4688      	mov	r8, r1
  404d10:	4606      	mov	r6, r0
  404d12:	f04f 0900 	mov.w	r9, #0
  404d16:	687d      	ldr	r5, [r7, #4]
  404d18:	68bc      	ldr	r4, [r7, #8]
  404d1a:	3d01      	subs	r5, #1
  404d1c:	d411      	bmi.n	404d42 <_fwalk_reent+0x3e>
  404d1e:	89a3      	ldrh	r3, [r4, #12]
  404d20:	2b01      	cmp	r3, #1
  404d22:	f105 35ff 	add.w	r5, r5, #4294967295
  404d26:	d908      	bls.n	404d3a <_fwalk_reent+0x36>
  404d28:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404d2c:	3301      	adds	r3, #1
  404d2e:	4621      	mov	r1, r4
  404d30:	4630      	mov	r0, r6
  404d32:	d002      	beq.n	404d3a <_fwalk_reent+0x36>
  404d34:	47c0      	blx	r8
  404d36:	ea49 0900 	orr.w	r9, r9, r0
  404d3a:	1c6b      	adds	r3, r5, #1
  404d3c:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404d40:	d1ed      	bne.n	404d1e <_fwalk_reent+0x1a>
  404d42:	683f      	ldr	r7, [r7, #0]
  404d44:	2f00      	cmp	r7, #0
  404d46:	d1e6      	bne.n	404d16 <_fwalk_reent+0x12>
  404d48:	4648      	mov	r0, r9
  404d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404d4e:	46b9      	mov	r9, r7
  404d50:	4648      	mov	r0, r9
  404d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404d56:	bf00      	nop

00404d58 <__sread>:
  404d58:	b510      	push	{r4, lr}
  404d5a:	460c      	mov	r4, r1
  404d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404d60:	f000 f8a4 	bl	404eac <_read_r>
  404d64:	2800      	cmp	r0, #0
  404d66:	db03      	blt.n	404d70 <__sread+0x18>
  404d68:	6d23      	ldr	r3, [r4, #80]	; 0x50
  404d6a:	4403      	add	r3, r0
  404d6c:	6523      	str	r3, [r4, #80]	; 0x50
  404d6e:	bd10      	pop	{r4, pc}
  404d70:	89a3      	ldrh	r3, [r4, #12]
  404d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404d76:	81a3      	strh	r3, [r4, #12]
  404d78:	bd10      	pop	{r4, pc}
  404d7a:	bf00      	nop

00404d7c <__swrite>:
  404d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d80:	4616      	mov	r6, r2
  404d82:	898a      	ldrh	r2, [r1, #12]
  404d84:	461d      	mov	r5, r3
  404d86:	05d3      	lsls	r3, r2, #23
  404d88:	460c      	mov	r4, r1
  404d8a:	4607      	mov	r7, r0
  404d8c:	d506      	bpl.n	404d9c <__swrite+0x20>
  404d8e:	2200      	movs	r2, #0
  404d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404d94:	2302      	movs	r3, #2
  404d96:	f000 f875 	bl	404e84 <_lseek_r>
  404d9a:	89a2      	ldrh	r2, [r4, #12]
  404d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404da0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404da4:	81a2      	strh	r2, [r4, #12]
  404da6:	4638      	mov	r0, r7
  404da8:	4632      	mov	r2, r6
  404daa:	462b      	mov	r3, r5
  404dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404db0:	f7ff bcae 	b.w	404710 <_write_r>

00404db4 <__sseek>:
  404db4:	b510      	push	{r4, lr}
  404db6:	460c      	mov	r4, r1
  404db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404dbc:	f000 f862 	bl	404e84 <_lseek_r>
  404dc0:	89a3      	ldrh	r3, [r4, #12]
  404dc2:	1c42      	adds	r2, r0, #1
  404dc4:	bf0e      	itee	eq
  404dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  404dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404dce:	6520      	strne	r0, [r4, #80]	; 0x50
  404dd0:	81a3      	strh	r3, [r4, #12]
  404dd2:	bd10      	pop	{r4, pc}

00404dd4 <__sclose>:
  404dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404dd8:	f000 b800 	b.w	404ddc <_close_r>

00404ddc <_close_r>:
  404ddc:	b538      	push	{r3, r4, r5, lr}
  404dde:	4c07      	ldr	r4, [pc, #28]	; (404dfc <_close_r+0x20>)
  404de0:	2300      	movs	r3, #0
  404de2:	4605      	mov	r5, r0
  404de4:	4608      	mov	r0, r1
  404de6:	6023      	str	r3, [r4, #0]
  404de8:	f7ff f8a4 	bl	403f34 <_close>
  404dec:	1c43      	adds	r3, r0, #1
  404dee:	d000      	beq.n	404df2 <_close_r+0x16>
  404df0:	bd38      	pop	{r3, r4, r5, pc}
  404df2:	6823      	ldr	r3, [r4, #0]
  404df4:	2b00      	cmp	r3, #0
  404df6:	d0fb      	beq.n	404df0 <_close_r+0x14>
  404df8:	602b      	str	r3, [r5, #0]
  404dfa:	bd38      	pop	{r3, r4, r5, pc}
  404dfc:	20001624 	.word	0x20001624

00404e00 <_fclose_r>:
  404e00:	2900      	cmp	r1, #0
  404e02:	d03d      	beq.n	404e80 <_fclose_r+0x80>
  404e04:	b570      	push	{r4, r5, r6, lr}
  404e06:	4605      	mov	r5, r0
  404e08:	460c      	mov	r4, r1
  404e0a:	b108      	cbz	r0, 404e10 <_fclose_r+0x10>
  404e0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404e0e:	b37b      	cbz	r3, 404e70 <_fclose_r+0x70>
  404e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404e14:	b90b      	cbnz	r3, 404e1a <_fclose_r+0x1a>
  404e16:	2000      	movs	r0, #0
  404e18:	bd70      	pop	{r4, r5, r6, pc}
  404e1a:	4628      	mov	r0, r5
  404e1c:	4621      	mov	r1, r4
  404e1e:	f7ff fced 	bl	4047fc <__sflush_r>
  404e22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404e24:	4606      	mov	r6, r0
  404e26:	b133      	cbz	r3, 404e36 <_fclose_r+0x36>
  404e28:	4628      	mov	r0, r5
  404e2a:	69e1      	ldr	r1, [r4, #28]
  404e2c:	4798      	blx	r3
  404e2e:	2800      	cmp	r0, #0
  404e30:	bfb8      	it	lt
  404e32:	f04f 36ff 	movlt.w	r6, #4294967295
  404e36:	89a3      	ldrh	r3, [r4, #12]
  404e38:	061b      	lsls	r3, r3, #24
  404e3a:	d41c      	bmi.n	404e76 <_fclose_r+0x76>
  404e3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404e3e:	b141      	cbz	r1, 404e52 <_fclose_r+0x52>
  404e40:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404e44:	4299      	cmp	r1, r3
  404e46:	d002      	beq.n	404e4e <_fclose_r+0x4e>
  404e48:	4628      	mov	r0, r5
  404e4a:	f7ff fe83 	bl	404b54 <_free_r>
  404e4e:	2300      	movs	r3, #0
  404e50:	6323      	str	r3, [r4, #48]	; 0x30
  404e52:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404e54:	b121      	cbz	r1, 404e60 <_fclose_r+0x60>
  404e56:	4628      	mov	r0, r5
  404e58:	f7ff fe7c 	bl	404b54 <_free_r>
  404e5c:	2300      	movs	r3, #0
  404e5e:	6463      	str	r3, [r4, #68]	; 0x44
  404e60:	f7ff fe10 	bl	404a84 <__sfp_lock_acquire>
  404e64:	2300      	movs	r3, #0
  404e66:	81a3      	strh	r3, [r4, #12]
  404e68:	f7ff fe0e 	bl	404a88 <__sfp_lock_release>
  404e6c:	4630      	mov	r0, r6
  404e6e:	bd70      	pop	{r4, r5, r6, pc}
  404e70:	f7ff fe02 	bl	404a78 <__sinit>
  404e74:	e7cc      	b.n	404e10 <_fclose_r+0x10>
  404e76:	4628      	mov	r0, r5
  404e78:	6921      	ldr	r1, [r4, #16]
  404e7a:	f7ff fe6b 	bl	404b54 <_free_r>
  404e7e:	e7dd      	b.n	404e3c <_fclose_r+0x3c>
  404e80:	2000      	movs	r0, #0
  404e82:	4770      	bx	lr

00404e84 <_lseek_r>:
  404e84:	b570      	push	{r4, r5, r6, lr}
  404e86:	4c08      	ldr	r4, [pc, #32]	; (404ea8 <_lseek_r+0x24>)
  404e88:	4606      	mov	r6, r0
  404e8a:	2500      	movs	r5, #0
  404e8c:	4608      	mov	r0, r1
  404e8e:	4611      	mov	r1, r2
  404e90:	461a      	mov	r2, r3
  404e92:	6025      	str	r5, [r4, #0]
  404e94:	f7ff f852 	bl	403f3c <_lseek>
  404e98:	1c43      	adds	r3, r0, #1
  404e9a:	d000      	beq.n	404e9e <_lseek_r+0x1a>
  404e9c:	bd70      	pop	{r4, r5, r6, pc}
  404e9e:	6823      	ldr	r3, [r4, #0]
  404ea0:	2b00      	cmp	r3, #0
  404ea2:	d0fb      	beq.n	404e9c <_lseek_r+0x18>
  404ea4:	6033      	str	r3, [r6, #0]
  404ea6:	bd70      	pop	{r4, r5, r6, pc}
  404ea8:	20001624 	.word	0x20001624

00404eac <_read_r>:
  404eac:	b570      	push	{r4, r5, r6, lr}
  404eae:	4c08      	ldr	r4, [pc, #32]	; (404ed0 <_read_r+0x24>)
  404eb0:	4606      	mov	r6, r0
  404eb2:	2500      	movs	r5, #0
  404eb4:	4608      	mov	r0, r1
  404eb6:	4611      	mov	r1, r2
  404eb8:	461a      	mov	r2, r3
  404eba:	6025      	str	r5, [r4, #0]
  404ebc:	f7fc fdd2 	bl	401a64 <_read>
  404ec0:	1c43      	adds	r3, r0, #1
  404ec2:	d000      	beq.n	404ec6 <_read_r+0x1a>
  404ec4:	bd70      	pop	{r4, r5, r6, pc}
  404ec6:	6823      	ldr	r3, [r4, #0]
  404ec8:	2b00      	cmp	r3, #0
  404eca:	d0fb      	beq.n	404ec4 <_read_r+0x18>
  404ecc:	6033      	str	r3, [r6, #0]
  404ece:	bd70      	pop	{r4, r5, r6, pc}
  404ed0:	20001624 	.word	0x20001624
  404ed4:	65746e45 	.word	0x65746e45
  404ed8:	68742072 	.word	0x68742072
  404edc:	75207369 	.word	0x75207369
  404ee0:	2774696e 	.word	0x2774696e
  404ee4:	64612073 	.word	0x64612073
  404ee8:	73657264 	.word	0x73657264
  404eec:	00000073 	.word	0x00000073
  404ef0:	75716552 	.word	0x75716552
  404ef4:	69747365 	.word	0x69747365
  404ef8:	4120676e 	.word	0x4120676e
  404efc:	65726464 	.word	0x65726464
  404f00:	66207373 	.word	0x66207373
  404f04:	206d6f72 	.word	0x206d6f72
  404f08:	74697773 	.word	0x74697773
  404f0c:	203a6863 	.word	0x203a6863
  404f10:	00000000 	.word	0x00000000
  404f14:	746e6553 	.word	0x746e6553
  404f18:	63615020 	.word	0x63615020
  404f1c:	0074656b 	.word	0x0074656b
  404f20:	73756c46 	.word	0x73756c46
  404f24:	00646568 	.word	0x00646568
  404f28:	20746f47 	.word	0x20746f47
  404f2c:	61746144 	.word	0x61746144
  404f30:	0000203a 	.word	0x0000203a
  404f34:	00000020 	.word	0x00000020

00404f38 <_ZTV18HardwareSerialUart>:
	...
  404f40:	00400485 00400ac5 0040033d 00400429     ..@...@.=.@.).@.
  404f50:	00400345 0040035d                       E.@.].@.

00404f58 <_ZTV19HardwareSerialUsart>:
	...
  404f60:	004007c1 00400ac5 0040050d 0040073d     ..@...@...@.=.@.
  404f70:	00400515 0040052d 00000a0d 006e616e     ..@.-.@.....nan.
  404f80:	00666e69 0066766f 0000002e 00000000     inf.ovf.........

00404f90 <_ZTV10usb_serial>:
	...
  404f98:	00400c49 00400c65 00400c35 00400d51     I.@.e.@.5.@.Q.@.
  404fa8:	00400c3d 00400c45 00000043              =.@.E.@.C...

00404fb4 <_global_impure_ptr>:
  404fb4:	200000a8                                ... 

00404fb8 <_init>:
  404fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fba:	bf00      	nop
  404fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404fbe:	bc08      	pop	{r3}
  404fc0:	469e      	mov	lr, r3
  404fc2:	4770      	bx	lr

00404fc4 <__init_array_start>:
  404fc4:	004047dd 	.word	0x004047dd

00404fc8 <__frame_dummy_init_array_entry>:
  404fc8:	004000f1 004004cd 004008a1 00400d95     ..@...@...@...@.

00404fd8 <_fini>:
  404fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fda:	bf00      	nop
  404fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404fde:	bc08      	pop	{r3}
  404fe0:	469e      	mov	lr, r3
  404fe2:	4770      	bx	lr

00404fe4 <__fini_array_start>:
  404fe4:	004000cd 	.word	0x004000cd
